<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>测试 - 分类 - 打工人日志 - jobcher</title>
        <link>https://www.jobcher.com/categories/%E6%B5%8B%E8%AF%95/</link>
        <description>测试 - 分类 - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Fri, 15 Dec 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.jobcher.com/categories/%E6%B5%8B%E8%AF%95/" rel="self" type="application/rss+xml" /><item>
    <title>测试策略：微服务架构</title>
    <link>https://www.jobcher.com/test-way/</link>
    <pubDate>Fri, 15 Dec 2023 00:00:00 &#43;0000</pubDate>
    <author>jobcher</author>
    <guid>https://www.jobcher.com/test-way/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/test.jpeg" referrerpolicy="no-referrer">
            </div><p data-nodeid="886">可以从两个方面来保障微服务的质量：</p>
<ol data-nodeid="887">
<li data-nodeid="888">
<p data-nodeid="889">选取合适的测试策略模型，确保测试活动全面且有效；</p>
</li>
<li data-nodeid="890">
<p data-nodeid="891">建立质量保障体系，使质量保障内化为企业的组织能力。</p>
</li>
</ol>
<h3 data-nodeid="892">如何选择合适的测试策略模型？</h3>
<p data-nodeid="893">要想使面向微服务的测试活动全面且有效，可以借用“测试金字塔”的思想，针对不同类型和颗粒度的测试投入不同的精力，达到一个最佳平衡：</p>
<ul data-nodeid="894">
<li data-nodeid="895">
<p data-nodeid="896">测试需要分层，每一层的测试颗粒度有所不同；</p>
</li>
<li data-nodeid="897">
<p data-nodeid="898">不同层次的测试比重有差异，通常来说，层次越高，测试比重应越少。</p>
</li>
</ul>
<p data-nodeid="899"></p>
<p data-nodeid="900">需要说明的是，传统意义下的测试金字塔，在微服务架构下不再完全奏效。因为微服务中最大的复杂性不在于服务本身，而在于微服务之间的交互方式，这一点值得特别注意。</p>
<p data-nodeid="901">因此，<strong data-nodeid="976">针对微服务架构，常见的测试策略模型</strong>有如下几种。</p>
<p data-nodeid="902">（1） <strong data-nodeid="981">微服务“测试金字塔”</strong></p>
<p data-nodeid="1106" class="">基于微服务架构的特点和测试金字塔的原理，Toby Clemson 有一篇关于<a href="https://www.martinfowler.com/articles/microservice-testing/" data-nodeid="1110">“微服务架构下的测试策略”</a>的文章，其中通过分析阐述了微服务架构下的通用测试策略。</p>
<p data-nodeid="904"></p>
<p data-nodeid="905">如图，该策略模型依然是金字塔形状，从下到上依次为单元测试、集成测试、组件测试、端到端测试、探索式测试。</p>
<p data-nodeid="906">（2） <strong data-nodeid="991">微服务“测试蜂巢”</strong></p>
<p data-nodeid="907">这种策略模型是蜂巢形状，它强调重点关注服务间的集成测试，而单元测试和端到端测试的占比较少。</p>
<p data-nodeid="908"></p>
<p data-nodeid="909">（3） <strong data-nodeid="1000">微服务“测试钻石”</strong></p>
<p data-nodeid="910">这种策略模型是钻石形状的，组件测试和契约测试是重点，单元测试比率减少，另外增加了安全和性能等非功能的测试类型。</p>
<p data-nodeid="911"></p>
<p data-nodeid="912">我想，有多少个基于微服务架构的测试团队大概就有多少个测试策略模型吧。<strong data-nodeid="1010">“测试金字塔”是一种测试策略模型和抽象框架</strong>，当技术架构、系统特点、质量痛点、团队阶段不同时，每种测试的比例也不尽相同，而且最关键的，并不一定必须是金字塔结构。</p>
<p data-nodeid="913">理解了测试策略模型的思考框架，我们看下应如何保障测试活动的全面性和有效性。</p>
<h4 data-nodeid="914">全面性</h4>
<p data-nodeid="915">微服务架构下，既需要保障各服务内部每个模块的完整性，又需要关注模块间、服务间的交互。只有这样才能提升测试覆盖率和全面性，因此，可以通过如下的分层测试来保证微服务的全面性。</p>
<p data-nodeid="916"></p>
<ul data-nodeid="917">
<li data-nodeid="918">
<p data-nodeid="919">单元测试（Unit Test） ：从服务中最小可测试单元视角验证代码行为符合预期，以便测试出方法、类级别的缺陷。</p>
</li>
<li data-nodeid="920">
<p data-nodeid="921">集成测试（Integration Test）：验证当前服务与外部模块之间的通信方式或者交互符合预期，以便测试出接口缺陷。</p>
</li>
<li data-nodeid="922">
<p data-nodeid="923">组件测试 （Component Test）：将测试范围限制在被测系统的一部分（一般是单个服务），使用测试替身（test doubles）将其与其他组件隔离，以便测试出被测代码的缺陷。</p>
</li>
<li data-nodeid="924">
<p data-nodeid="925">契约测试（Contracts Test）：验证当前服务与外部服务之间的交互，以表明它符合消费者服务所期望的契约。</p>
</li>
<li data-nodeid="926">
<p data-nodeid="927">端到端测试（End-to-end Test）：从用户视角验证整个系统的功能能否符合用户的预期。</p>
</li>
</ul>
<p data-nodeid="928">可见，上述测试策略模型中的测试方法，是自下而上逐层扩大测试范围和边界，力保微服务架构的模块内、模块间交互、服务内、服务间交互、系统范围等维度的功能符合预期。</p>
<h4 data-nodeid="929">有效性</h4>
<p data-nodeid="930">确定了分层测试方法，我们应该如何选取每种测试方法的比例，来确保该测试策略的有效性呢？</p>
<p data-nodeid="931">首先必须要明确的是不存在普适性的测试组合比例。我们都知道，测试的目的是解决企业的质量痛点、交付高质量的软件。因此不能为了测试而测试，更不能为了质量而不惜一切代价，需要<strong data-nodeid="1029">考虑资源的投入产出比。</strong></p>
<p data-nodeid="932">测试策略如同测试技术、技术架构一样，并不是一成不变，它会随着业务或项目所处的阶段，以及基于此的其他影响因素的变化而不断演进。但归根结底，还是要从质量保障的目标出发，制定出适合当时的测试策略，并阶段性地对策略进行评估和度量，进而不断改进和优化测试策略。因此，<strong data-nodeid="1034">选取测试策略一定要基于现实情况的痛点出发，结果导向，通过调整测试策略来解决痛点。</strong></p>
<p data-nodeid="933">比如，在项目早期阶段或某 MVP 项目中，业务的诉求是尽快发布到线上，对功能的质量要求不太高，但对发布的时间节点要求非常严格。那这种情况下快速地用端到端这种能模拟用户真实价值的测试方法保障项目质量也未尝不可；随着项目逐渐趋于平稳后，时间要求渐渐有了节奏，对功能的质量要求会逐渐变高，那么这时候可以再根据实际情况引入其他测试方法，如契约测试或组件测试等。</p>
<p data-nodeid="934">你要永远记住，<strong data-nodeid="1040">适合自身项目阶段和团队的测试策略才是“完美”的策略。</strong></p>
<p data-nodeid="935"></p>
<h3 data-nodeid="936">如何建立质量保障体系？</h3>
<p data-nodeid="937">上述分层的测试策略只是尽可能地对微服务进行全面的测试，确保系统的所有层次都被覆盖到，它更多体现在测试活动本身的全面性和有效性方面。要想将质量保障内化为企业的组织能力，就需要通过技术和管理手段形成系统化、标准化和规范化的机制，这就需要建设质量保障体系。</p>
<p data-nodeid="938"><strong data-nodeid="1050">质量保障体系：通过一定的流程规范、测试技术和方法，借助于持续集成/持续交付等技术把质量保障活动有效组合，进而形成系统化、标准化和规范化的保障体系。</strong> 同时，还需要相应的度量、运营手段以及组织能力的保障。</p>
<p data-nodeid="939">如下几个方面是质量保障体系的关键，后续课程也将按如下方式展开讲解。</p>
<ul data-nodeid="940">
<li data-nodeid="941">
<p data-nodeid="942"><strong data-nodeid="1056">流程规范</strong>：没有规矩不成方圆，好的流程规范是保障质量中非常关键的一环。当出现交付质量差的情况时，过程质量也一定是差的。通常会出现某些关键动作未执行或执行不到位、对事情的不当处理等情况，而这些情况可以通过建立闭环、分工明确的流程规范完全可以避免。另外，研发过程中，过程质量跟执行人的质量意识、个人能力等直接相关，那么就需要建立易执行的流程规范，降低人员的执行门槛。同时需要特别注意，规范的不断完善是几乎所有团队的常态，但当规范执行效果不好时一定要及时跟进，分析其根本原因，必要时要进行简化。</p>
</li>
<li data-nodeid="943">
<p data-nodeid="944"><strong data-nodeid="1061">测试技术</strong>： 测试策略模型中的分层测试方法可以使面向微服务的测试活动具有一定的全面性和有效性，使得被测内容在功能方面符合预期。除功能性之外，软件质量还有其他很多属性，如可靠性、易用性、可维护性、可移植性等，而这些质量属性就需要通过各种专项测试技术来保障了。同时，还有许多测试技术的首要价值在于提升测试效率。因此合理地组合这些测试技术，形成测试技术矩阵，有利于最大化发挥它们的价值。</p>
</li>
<li data-nodeid="945">
<p data-nodeid="946"><strong data-nodeid="1066">持续集成与持续交付</strong>：微服务的优势需要通过持续集成和持续交付的支持才能充分发挥出来，这就要求在执行测试活动时提高反馈效率、尽快发现问题。一方面要明确各种“类生产环境”在交付流程中的位置和用途差异点，保证它们的稳定可用。另一方面需要将各种测试技术和自动化技术集成起来，使代码提交后能够自动进行构建、部署和测试等操作，形成工具链，实现真正意义上的持续集成和持续交付。</p>
</li>
<li data-nodeid="947">
<p data-nodeid="948"><strong data-nodeid="1075">度量与运营</strong>：管理学大师德鲁克曾经说过“你如果无法度量它，就无法管理它（It you can’t measure it, you can’t manage it)”。要想能有效管理和改进，就难以绕开度量这个话题。对于研发过程来说，度量无疑是比较难的，它是一个脑力密集型的过程，指标多维度，且很多维度的内容难以清晰地度量。在质量保障体系中，我将基于质量、效率、价值等多维度视角建立起基础的度量体系，并结合定期运营做定向改进，形成 PDCA 正向循环，促使各项指标稳步提升。同时，需要特别警惕的是，<strong data-nodeid="1076">度量是一把双刃剑</strong>，这里我也会告诉一些我的经验教训和踩过的坑，避免走错方向。</p>
</li>
<li data-nodeid="949">
<p data-nodeid="950"><strong data-nodeid="1081">组织保障</strong>：产品的交付离不开组织中每个参与部门成员的努力。正如质量大师戴明所说，质量是设计出来的，不是测试出来的。因此在组织中树立起“质量文化”至关重要。在这部分内容里，我将介绍常见的参与方的角色、职责和协作过程中的常见问题、对策，以及如何营造质量文化等内容。</p>
</li>
</ul>
<h3 data-nodeid="951">总结</h3>
<p data-nodeid="952">谈到了基于微服务架构下的各种质量挑战，可以从两个方面有效且高效地保障微服务的质量：<strong data-nodeid="1091">确保面向微服务的测试活动具备全面性和有效性</strong>，<strong data-nodeid="1092">质量保障需要内化为企业的组织能力。</strong></p>
<p data-nodeid="953">通过对测试金字塔原理和微服务的特点分析，引入单元测试、集成测试、组件测试、契约测试和端到端测试等分层测试类型来确保测试活动的全面性，通过自身项目阶段和团队情况来选取合适的测试策略模型，以保障测试活动的有效性。</p>
<p data-nodeid="954">要想把质量保障内化为企业的组织能力，就需要通过系统的技术和管理手段形成机制，在流程规范、测试技术、持续集成与持续交付、度量与运营、组织保障等方面构建质量保障体系。</p>
<p data-nodeid="955">你是否测试过微服务架构的项目和服务？如果有，欢迎在留言区评论，说说你所经历过的项目的测试策略和质量保障体系是怎样的，期间遇到了哪些困难和问题。同时欢迎你能把这篇文章分享给你的同学、朋友和同事，大家一起交流。</p>
<p data-nodeid="956"><strong data-nodeid="1099">相关链接</strong></p>
<blockquote data-nodeid="957">
<p data-nodeid="958" class="">Testing Strategies in a Microservice Architecture（微服务架构下的测试策略）：<br>
：<a href="https://www.martinfowler.com/articles/microservice-testing/" data-nodeid="1105">https://www.martinfowler.com/articles/microservice-testing/</a></p>
</blockquote>]]></description>
</item>
<item>
    <title>单元测试：测试单元质量提升</title>
    <link>https://www.jobcher.com/unit-test/</link>
    <pubDate>Fri, 15 Dec 2023 00:00:00 &#43;0000</pubDate>
    <author>jobcher</author>
    <guid>https://www.jobcher.com/unit-test/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/junit.png" referrerpolicy="no-referrer">
            </div><h3 data-nodeid="2018">单元测试的价值</h3>
<p data-nodeid="2019">单元测试是一种白盒测试技术，通常由开发人员在编码阶段完成，目的是验证软件代码中的每个单元（方法或类等）是否符合预期，即<strong data-nodeid="2165">尽早</strong>在<strong data-nodeid="2166">尽量小的范围内</strong>暴露问题。</p>
<p data-nodeid="2020">我们都知道，问题发现得越早，修复的代价越小。毫无疑问，在开发阶段进行正确的单元测试可以极大地节省时间和金钱。如果跳过单元测试，会导致在后续更高级别的测试阶段产生更高的缺陷修复成本。</p>
<p data-nodeid="2021"></p>
<p data-nodeid="2022">如图，假如有一个只包含两个单元 A 和 B 的程序，且只执行端到端测试，如果在测试过程中发现了缺陷，则可能有如下多种原因：</p>
<ul data-nodeid="2023">
<li data-nodeid="2024">
<p data-nodeid="2025">该缺陷由单元 A 中的缺陷引起；</p>
</li>
<li data-nodeid="2026">
<p data-nodeid="2027">该缺陷由单元 B 中的缺陷引起；</p>
</li>
<li data-nodeid="2028">
<p data-nodeid="2029">该缺陷由单元 A 和单元 B 中的缺陷共同引起；</p>
</li>
<li data-nodeid="2030">
<p data-nodeid="2031">该缺陷由单元 A 和单元 B 之间接口的缺陷引起；</p>
</li>
<li data-nodeid="2032">
<p data-nodeid="2033">该缺陷是测试方法或测试用例的错误导致的。</p>
</li>
</ul>
<p data-nodeid="2034">由此可见，忽略单元测试会导致后续发现缺陷时，要花费较高的成本来确认缺陷原因。</p>
<p data-nodeid="2035">单元测试除了能够在较早阶段识别软件中的错误，它还有如下价值。</p>
<ul data-nodeid="2036">
<li data-nodeid="2037">
<p data-nodeid="2038">反馈速度快：单元测试通常以自动化形式运行，执行速度非常快，可以快速反馈结果，跟持续集成结合起来，形成有效的反馈环。</p>
</li>
<li data-nodeid="2039">
<p data-nodeid="2040">重构的有力保障：系统需要大规模重构时，单测可以确保对已有逻辑的兼容，如果单元测试都通过，基本上可以保证重构没有破坏原来代码逻辑的正确性。</p>
</li>
<li data-nodeid="2041">
<p data-nodeid="2042">使更熟悉代码：写单元测试的过程本身就是一个审视代码的过程，可以发现一些设计上的问题（代码设计的不可测试）、代码编写方面的问题（边界条件的处理不当）等。</p>
</li>
</ul>
<p data-nodeid="2043">既然单元测试由开发人员来设计和执行，那作为测试人员是不是就不需要学习这门技术了？不知道你是怎样看待这个想法的，我的观点是：</p>
<ul data-nodeid="2044">
<li data-nodeid="2045">
<p data-nodeid="2046">单元测试只是通常情况下由开发人员完成，并不是绝对的，在一些公司或项目里也存在测试人员完成的情况；</p>
</li>
<li data-nodeid="2047">
<p data-nodeid="2048">在你负责的模块或服务里，第一级别的测试不是你来完成的，那么你更有必要去了解它的设计思路和执行情况，这能帮助你发现单元测试可能存在的问题点，也有利于你设计和执行后续高级别的测试类型；</p>
</li>
<li data-nodeid="2049">
<p data-nodeid="2050">开发人员总是不太擅长做测试类的工作，当你掌握了单元测试的技能，你便更有机会去帮助和影响到开发人员，赢得他对你的尊重，也有利于你们更好地合作；</p>
</li>
<li data-nodeid="2051">
<p data-nodeid="2052">这种想法是测试人员的常见想法，所以掌握单元测试技能在测试人员群体中也会是稀缺技能，因此，掌握它将会获得额外的锻炼机会和个人影响力，要知道，机会总是留给有准备的人。</p>
</li>
</ul>
<h3 data-nodeid="2053">微服务下的单元测试类型</h3>
<p data-nodeid="2054">就像之前课程所说：<strong data-nodeid="2192">微服务中最大的复杂性不在于服务本身，而在于微服务之间的交互方式，服务与服务之间常常互相调用以实现更多更复杂的功能。</strong></p>
<p data-nodeid="2055">举个例子，我们需要测试的是订单类（Order）中的获取总价方法（getTotalPrice()），而在该方法中除了自有的一些代码逻辑外，通常需要去调用其他类的方法。比如这里调用的是用户类（User）的优惠等级方法（reductionLevel ()）和商品类（Goods）中的商品价格方法（getUnitPrice()）。很显然，优惠等级方法或商品价格方法，只要一方有错误，就会导致订单类获取总价方法的测试失败。基于这种情况，可以有两种单元测试类型。</p>
<h4 data-nodeid="2056">1. 社交型单元测试（Sociable Unit Testing）</h4>
<p data-nodeid="2057"></p>
<p data-nodeid="2058">如图，测试订单类的获取总价方法（Order.getTotalPrice()）时会真实调用用户类的优惠等级方法（User.reductionLevel()）和商品类的商品单价方法（Goods.getUnitPrice()）。将被测试单元视为黑盒子，直接对其进行测试，这种单元测试称之为<strong data-nodeid="2205">社交型单元测试（Sociable Unit Testing）</strong>。</p>
<h4 data-nodeid="2059">2. 孤立型单元测试（Solitary Unit Testing）</h4>
<p data-nodeid="2060"></p>
<p data-nodeid="2061">如图，如果测试订单类的获取总价方法（Order.getTotalPrice()）时，使用测试替身 <strong data-nodeid="2225">（test doubles）</strong> 技术来替代用户类的优惠等级方法（User.reductionLevel()）和商品类的商品单价方法（Goods.getUnitPrice()）的效果。对象及其依赖项之间的交互和协作被<strong data-nodeid="2226">测试替身</strong>代替，这种单元测试称之为<strong data-nodeid="2227">孤立型单元测试（Solitary Unit Testing）</strong>。</p>
<p data-nodeid="2062">另外，上述提到的测试替身是一种在测试中使用对象代替实际对象的技术，常用的技术如下。</p>
<ul data-nodeid="22981">
<li data-nodeid="22982">
<p data-nodeid="22983"><strong data-nodeid="22990">桩代码（Stubs）</strong>：当在对象上调用特定方法时，会对其进行硬编码（临时代码）的方式来代替真实代码提供固定响应。比如，某函数 X 的实现中调用了一个函数 Y，而 Y 不能调用，为了对函数 X 进行测试，就需要模拟一个函数 Y，那么函数 Y 的实现就是所谓的桩代码。</p>
</li>
<li data-nodeid="22984">
<p data-nodeid="22985" class=""><strong data-nodeid="22995">模拟代码（Mocks）</strong>：模拟代码跟桩代码类似，它除了代替真实代码的能力之外，更强调是否使用了特定的参数调用了特定方法，因此，这种对象成为我们测试结果的基础。</p>
</li>
</ul>
<p data-nodeid="2068">根据被测单元是否与其交互者隔离，会产生以上两种单元测试类型，这两种类型的单元测试在微服务测试中都起着重要作用，它们用来解决不同的测试问题。</p>
<p data-nodeid="2069"></p>
<p data-nodeid="2070"><strong data-nodeid="2246">由上图可知，在微服务架构中，不同组成使用的单元测试类型不同：</strong></p>
<p data-nodeid="2071"></p>
<p data-nodeid="2072">特别注意：当微服务的（网关+仓库+资源+服务层）与（域逻辑）之比相对较大时，单元测试可能收益不大。常见的情况有小型服务或某些几乎只包含了网关+仓库+资源+服务层等内容的服务，例如适配服务等。</p>
<h3 data-nodeid="2073">如何开展单元测试？</h3>
<p data-nodeid="2074">在实际项目过程当中，应该怎样开展单元测试呢？通常来说，可以通过如下四个步骤来进行。</p>
<h4 data-nodeid="2075">1. 确定使用单元测试的代码范围</h4>
<p data-nodeid="2076">虽然单元测试很重要，但并不是所有代码都需要进行单元测试，可以重点关注核心模块代码或底层代码，如重要的业务逻辑代码或通用组件类等。</p>
<h4 data-nodeid="2077">2. 确定技术选型（以 Java 语言为例）</h4>
<p data-nodeid="2078">单元测试中的技术框架通常包括单元测试框架、Mock 代码框架、断言等。</p>
<ul data-nodeid="2079">
<li data-nodeid="2080">
<p data-nodeid="2081">单元测试框架：和开发语言直接相关，最常用的单元测试框架是 Junit 和 TestNG，总体来说，Junit 比较轻量级，它天生是做单测的，而 TestNG 则提供了更丰富的测试功能，测试人员对它并不陌生，这里不多做介绍。</p>
</li>
<li data-nodeid="2082">
<p data-nodeid="2083">Mock 代码框架：常见的有 EasyMock、Mockito、Jmockit、Powermock 等。</p>
</li>
<li data-nodeid="2084">
<p data-nodeid="2085">断言：Junit 和 TestNG 自身都支持断言，除此还有专门用于断言的 Hamcrest 和 assertJ。</p>
</li>
</ul>
<p data-nodeid="2086">关于它们的优劣网络上已有非常多的文章，这里不再赘述。综合来看，个人比较推荐使用Junit+Mockito+assertJ，我建议你根据自己的需求选型。</p>
<h4 data-nodeid="2087">3. 引入衡量单测覆盖情况的代码覆盖率工具</h4>
<p data-nodeid="2088">只单纯地看单元测试的执行通过率还比较单一，为了更全面地看到测试的覆盖情况，可以借助代码覆盖率工具和技术。在 Java 语言里，常用覆盖率工具有 Jacoco、Emma 和 Cobertura，个人推荐使用 Jacoco。</p>
<h4 data-nodeid="2089">4. 接入持续集成工具</h4>
<p data-nodeid="2090">接入持续集成工具是为了形成工具链，将单元测试、代码覆盖率统计集成在一起，使得代码有提交时便自动触发单元测试用例的执行，并伴随有代码覆盖率的统计，最后可以看到单元测试报告的数据（用例通过情况和代码层面各个维度的覆盖数据）。接着可以判断是否需要修改代码，这便形成了一个代码质量的反馈环，如下图所示。</p>
<p data-nodeid="2091"></p>
<p data-nodeid="2092">到代码覆盖率工具和持续集成工具。</p>
<h3 data-nodeid="2093">单元测试最佳实践</h3>
<p data-nodeid="2094">了解了如何开展单元测试，那么如何做到最好呢？我们都知道，代码产生错误无非是对一个业务逻辑或代码逻辑没有实现、实现不充分、实现错误或过分实现，所以无论是拆解业务逻辑还是拆解逻辑控制时都要做到 <strong data-nodeid="2283">MECE 原则</strong>（全称 Mutually Exclusive Collectively Exhaustive，中文意思是“相互独立，完全穷尽”，即日常沟通中常说的“不重不漏”）。</p>
<p data-nodeid="2095">“不重不漏”说起来容易做起来难，为了努力做到它，写出好的单元测试，可以遵循如下具体的实践规范。</p>
<ol data-nodeid="2096">
<li data-nodeid="2097">
<p data-nodeid="2098"><strong data-nodeid="2289">好的单元测试要符合 AIR 特点</strong>：Automatic（自动化）、Independent（独立性）、Repeatable（可重复）。为了凑够一个单词 AIR 的效果，所以有了如上顺序，但我觉得从实际的落地顺序上看，应该是 A-&gt;R-&gt;I。优先保障单元测试能够自动化执行，释放手工介入，再使单元测试可以重复执行，这样可以使得简单的用例先高效地执行起来，再逐渐追求用例的相互独立性。</p>
</li>
<li data-nodeid="2099">
<p data-nodeid="2100"><strong data-nodeid="2293">常见的规范或标准做法有（以 Java 为例）</strong></p>
</li>
</ol>
<ul data-nodeid="2101">
<li data-nodeid="2102">
<p data-nodeid="2103"><strong data-nodeid="2298">代码目录规范</strong>：单元测试代码必须放在“src/test/java”目录下，Maven 采用“约定优于配置”的原则，并对工程的目录布局做了约定——测试代码存放 src/test/java 目录，单元测试相关的配置资源文件存放 src/test/resources 目录。源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</p>
</li>
<li data-nodeid="2104">
<p data-nodeid="2105"><strong data-nodeid="2311">测试类命名规范</strong>：同一个工程里测试类只用一种命名风格，推荐采用[类名]Test.java 或 Test[类名].java 的风格，比如源类名为 AccountServiceImpl.java，那么测试类名为 AccountServiceImplTest.java 或者 TestAccountServiceImpl.java。</p>
</li>
<li data-nodeid="2106">
<p data-nodeid="2107"><strong data-nodeid="2330">测试方法命名规范</strong>：同一个工程里测试方法只用一种命名风格，推荐采用 test[源方法名]_[后缀]的风格。比如源方法名为 login()，则测试方法可以命名为 testLogin_XxxSuccess()、testLogin_XxxNotExist()、testLogin_XxxFail()。</p>
</li>
<li data-nodeid="2108">
<p data-nodeid="2109"><strong data-nodeid="2335">测试数据要求</strong>：尽量使用生产环境的测试数据以保障有效性和多样性。</p>
</li>
<li data-nodeid="2110">
<p data-nodeid="2111"><strong data-nodeid="2340">颗粒度要求</strong>：要保证测试粒度足够小，有助于精确定位问题。单测粒度一般是方法级别，最好不要超过类级别。只有测试粒度小才能在出错时尽快定位到出错位置，一个待测试方法建议关联一个测试方法，如果待测试方法逻辑复杂分支较多，建议拆分为多个测试方法。</p>
</li>
<li data-nodeid="2112">
<p data-nodeid="2113"><strong data-nodeid="2345">验证结果必须要符合预期</strong>：简单来说就是单元测试必须执行通过，执行失败时要及时查明原因并修正问题。</p>
</li>
<li data-nodeid="2114">
<p data-nodeid="2115"><strong data-nodeid="2350">代码要遵守 BCDE 原则</strong>，以保证被测试模块的交付质量。</p>
<ul data-nodeid="2116">
<li data-nodeid="2117">
<p data-nodeid="2118">B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</p>
</li>
<li data-nodeid="2119">
<p data-nodeid="2120">C：Correct，正确的输入，并得到预期的结果。</p>
</li>
<li data-nodeid="2121">
<p data-nodeid="2122">D：Design，与设计文档相结合，来编写单元测试。</p>
</li>
<li data-nodeid="2123">
<p data-nodeid="2124">E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</p>
</li>
</ul>
</li>
<li data-nodeid="2125">
<p data-nodeid="2126"><strong data-nodeid="2359">实践风格</strong>：需加注释、遵守命名规范、公共方法抽象等保证可读性。编写测试代码时，有两种实践风格（至少要有相应的注释来区分）。</p>
<ul data-nodeid="2127">
<li data-nodeid="2128">
<p data-nodeid="2129">准备-执行-断言（Arrange-Act-Assert）：先准备用于测试的对象，然后触发执行，最后对输出和行为进行断言。</p>
</li>
<li data-nodeid="2130">
<p data-nodeid="2131">给定-当-那么（Given-When-Then）：给定某个上下文，当发生某些事情，那么期望某些结果。</p>
</li>
</ul>
</li>
<li data-nodeid="2132">
<p data-nodeid="2133"><strong data-nodeid="2366">执行速度要尽量快</strong>：单个 CASE 的运行时间推荐不超过 5 秒&nbsp;，这样才能在持续集成中尽快暴露问题。</p>
</li>
<li data-nodeid="2134">
<p data-nodeid="2135"><strong data-nodeid="2371">必须能自动验证</strong>：单测要能报错，不能只有调用，不准使用 System.out 等来进行人工验证，必须使用 Assert 来验证。</p>
</li>
<li data-nodeid="2136">
<p data-nodeid="2137"><strong data-nodeid="2380">必须要有逻辑验证能力和强度</strong>：不允许使用恒真断言（如：Assert. <em data-nodeid="2381">assertTrue</em> (true) ; ）不允许使用弱测试断言（如测试方法返回数据，只验证其中某个单字段值就当作通过）。</p>
</li>
<li data-nodeid="2138">
<p data-nodeid="2139"><strong data-nodeid="2386">必须有很强的针对性</strong>：可以有多个 Assert 断言，但每个测试方法只测试一种情况（如一个方法涉及 3 种异常需要去覆盖测试，就写三个不同的测试方法）。</p>
</li>
<li data-nodeid="2140">
<p data-nodeid="2141"><strong data-nodeid="2391">必须独立稳定，可重复执行</strong>：单元测试通常会被放到持续集成中，如果单测对外部环境(发布环境、网络、服务、中间件等)有依赖，容易导致持续集成机制的不可用。对于测试需要的任何条件，都应该让它们成为测试自身的一个自动化组成部分。</p>
</li>
<li data-nodeid="2142">
<p data-nodeid="2143"><strong data-nodeid="2396">同一个工程里只用一种代码框架</strong>；同一个工程里在能够满足需求的情况下只用一种单测框架、只用一种 Mock 框架、只用一种内存数据库等。</p>
</li>
<li data-nodeid="2144">
<p data-nodeid="2145"><strong data-nodeid="2401">单元测试遵守基本质量卡点要求</strong>：增量及全量卡点必须有，但覆盖率具体卡点要求可以根据业务差异化、分阶段地要求，如起步推广阶段，提升覆盖率阶段，最终覆盖率目标。但一般来说，行覆盖率大于等于 60%（经验值），分支覆盖率大于等于 80%（经验值），所有单测通过率 100%。核心业务、核心应用、核心模块的增量代码确保单元测试增量覆盖率达到要求，并且全量单测 CASE 通过。</p>
</li>
</ul>
<p data-nodeid="2146">上述规范和实践经验比较多，可能会因为落地难度和成本而使开发人员望而却步，事实上可以采取“小步快跑”的方式，逐次提升不同方面的要求，拉长落地的战线。</p>
<h3 data-nodeid="2147">总结</h3>
<p data-nodeid="2148">单元测试的定义：它是一种软件测试方法，目的是验证软件代码中的每个单元（方法或类等）是否符合预期，即<strong data-nodeid="2413">尽早</strong>在<strong data-nodeid="2414">尽量小的范围内</strong>暴露错误。</p>
<p data-nodeid="2149">微服务架构下常见的交互场景，测试方式和对象的不同会出现<strong data-nodeid="2424">社交型单元测试</strong>和<strong data-nodeid="2425">孤立型单元测试</strong>两种单元测试类型。</p>
<p data-nodeid="2150">实际如何开展单元测试，先确定要测试的代码范围，再引入单测框架、mock 框架、断言类型、代码覆盖率工具和持续集成工具，使代码提交过程形成一个有效的单元测试质量反馈环。紧接着我又给出了一系列的最佳实践或规范，包括类和方法的命名规范、目录规范、数据要求、验证结果要求、运行速度、质量卡点等，相信这些内容可以帮助你更好地设计和实现单元测试。</p>
<p data-nodeid="2151">你所负责的项目或服务，是否运行过单元测试呢？如果有，欢迎在留言区评论，说说单元测试的落地情况是怎样的。同时欢迎你能把这篇文章分享给你的同学、朋友和同事，大家一起交流。</p>
<blockquote data-nodeid="2152">
<strong data-nodeid="2517">单元测试框架</strong><br>
TestNG官网： <a href="https://testng.org/doc/" data-nodeid="2443">https://testng.org/doc/</a><br>
TestNG教程： <a href="https://www.yiibai.com/testng/" data-nodeid="2448">https://www.yiibai.com/testng/</a><br>
Junit官网： <a href="https://junit.org/junit5/" data-nodeid="2453">https://junit.org/junit5/</a><br>
<strong data-nodeid="2518">Mock代码框架</strong><br>
Mockito： <a href="https://site.mockito.org/" data-nodeid="2462">https://site.mockito.org/</a><br>
jMock： <a href="http://jmock.org/" data-nodeid="2467">http://jmock.org/</a><br>
Easymock： <a href="http://www.easymock.org/" data-nodeid="2472">http://www.easymock.org/</a><br>
Powermock： <a href="https://github.com/powermock/powermock" data-nodeid="2477">https://github.com/powermock/powermock</a><br>
Mock框架对比： <a href="https://stackoverflow.com/questions/22697/whats-the-best-mock-framework-for-java" data-nodeid="2482">https://stackoverflow.com/questions/22697/whats-the-best-mock-framework-for-java</a><br>
<strong data-nodeid="2519">断言</strong><br>
Hamcrest： <a href="http://hamcrest.org/JavaHamcrest/" data-nodeid="2491">http://hamcrest.org/JavaHamcrest/</a><br>
assertJ： <a href="https://joel-costigliola.github.io/assertj/assertj-core.html" data-nodeid="2496">https://joel-costigliola.github.io/assertj/assertj-core.html</a><br>
<strong data-nodeid="2520">覆盖率工具</strong><br>
Jacoco： <a href="https://www.jacoco.org/jacoco/trunk/index.html" data-nodeid="2505">https://www.jacoco.org/jacoco/trunk/index.html</a><br>
Emma： <a href="http://emma.sourceforge.net/" data-nodeid="2510">http://emma.sourceforge.net/</a><br>
Cobertura： <a href="https://cobertura.github.io/cobertura/" data-nodeid="2515">https://cobertura.github.io/cobertura/</a></p>
</blockquote>]]></description>
</item>
<item>
    <title>端到端测试：模拟用户体验</title>
    <link>https://www.jobcher.com/user-test/</link>
    <pubDate>Fri, 15 Dec 2023 00:00:00 &#43;0000</pubDate>
    <author>jobcher</author>
    <guid>https://www.jobcher.com/user-test/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/appium-logo-horiz.png" referrerpolicy="no-referrer">
            </div><h3 data-nodeid="65872">端到端测试详解</h3>
<h4 data-nodeid="65873">定义</h4>
<p data-nodeid="68383"><strong data-nodeid="68389">端到端测试（End-to-end Test）是一种用于测试整个应用程序的流程是否符合预期的测试技术。</strong> 它模拟用户真实的使用场景，通过用户界面测试应用程序，如图所示：</p>
<p data-nodeid="68384" class=""></p>
<p data-nodeid="65877">与其他类型的测试相反，<strong data-nodeid="65995">端到端测试是面向业务的</strong>，其目的是验证应用程序系统整体上是否符合业务目标。为了实现这一目标，该系统通常被视为<strong data-nodeid="65996">黑盒子</strong>：尽可能完整地部署系统中的微服务，并主要通过 GUI 和 API 等公共接口对其进行操作。</p>
<blockquote data-nodeid="65878">
<p data-nodeid="65879">GUI：Graphical User Interface，又称图形用户界面或图形用户接口。它是采用图形方式显示的计算机操作用户界面，是一种人与计算机通信的界面显示格式，允许用户使用鼠标等输入设备操纵屏幕上的图标或菜单选项，以选择命令、调用文件、启动程序或执行其他一些日常任务。</p>
<p data-nodeid="65880">API：Application Programming Interface，又称呼应用程序编程接口或应用程序接口。它是一组定义、程序及协议的集合，通过 API接口实现计算机软件之间的相互通信。API 的一个主要功能是提供通用功能集，同时也是一种中间件，为各种不同平台提供数据共享。</p>
</blockquote>
<p data-nodeid="65881">由于微服务架构包含多个具有相同行为的活动部件，因此端到端测试为服务之间传递消息的正确性提供了更多的信心，而且还可以确保正确配置了其他网络基础结构，例如防火墙、代理或负载均衡等。</p>
<h4 data-nodeid="65882">测试范围</h4>
<p data-nodeid="69511">通过微服务的分层测试策略可知，<strong data-nodeid="69517">端到端测试的范围比其他类型的测试大得多。</strong></p>
<p data-nodeid="76384"></p>
<div data-nodeid="76959" class=""><p style="text-align:center">分层测试策略-测试范围</p> </div>
<p data-nodeid="70629">绝大多数情况下，微服务应用系统会依赖一个或多个由外部管理的微服务。通常，这些外部服务包含在端到端测试范围内。 但是，在极少数情况下，也可以主动排除它们。因为如果外部服务由第三方管理，可能会经常出现稳定性和可靠性问题，这会导致端到端测试因不可控的原因而失败。</p>
<p data-nodeid="75803"></p>
<div data-nodeid="77530" class=""><p style="text-align:center">微服务应用的典型示例 </p></div>
<p data-nodeid="65890">比如，某个应用程序系统依赖公安部门的背景审查服务，通过调用该服务来查询用户是否有过违法前科。首先这样的服务通常会按调用次数付费（每次 5-10 元），具有较高的测试成本，其次背景审查服务不总是稳定可用的。在这种情况下，通过服务虚拟化技术模拟背景审查服务是个不错的选择，这虽然多少会降低端到端测试的信心，但增加了测试用例套件的稳定性。</p>
<h4 data-nodeid="65891">测试入口</h4>
<p data-nodeid="65892">因为端到端测试是面向业务的，那么测试时要从真实用户的使用场景来进行测试，根据应用程序系统是否有 GUI，可以分为两种情况：</p>
<ul data-nodeid="72934">
<li data-nodeid="72935">
<p data-nodeid="72936"><strong data-nodeid="72944">应用程序系统有 GUI</strong>，这种情况下用户可以直接操作 GUI 来使用系统，那么诸如 Selenium WebDriver 之类的工具可以帮助驱动 GUI 触发系统内的特定行为。</p>
</li>
<li data-nodeid="72937">
<p data-nodeid="72938" class=""><strong data-nodeid="72949">应用程序系统没有 GUI</strong>，这种情况下，使用 HTTP 客户端通过其公共的 API 直接操作微服务。没有真实的 GUI，不能直观地看到业务功能行为，但可以通过后台数据来确定系统的正确性，比如 API 的返回结果、持久化数据的变化情况，等等。</p>
</li>
</ul>
<h4 data-nodeid="72939">测试设计</h4>
<p data-nodeid="65899">确定测试范围和测试入口后，可以进一步梳理出要测试的功能列表或用例集，并对其按业务能力、优先级、重要性等维度进行分组。这样可以将它们拆分为较小的任务，以便整个团队可以排序处理，比如可以首先实施优先级较高的用例组，或按紧急程度处理关键的用例，这有助于我们尽早消除潜在的障碍。</p>
<p data-nodeid="65900">另外，由于端到端测试的目标是完全集成后的系统的行为，使得<strong data-nodeid="66035">编写和维护测试用例会比其他类型的测试更加困难：</strong></p>
<ul data-nodeid="65901">
<li data-nodeid="65902">
<p data-nodeid="65903">端到端测试涉及的活动部件比其他测试多得多；</p>
</li>
<li data-nodeid="65904">
<p data-nodeid="65905">端到端测试须考虑系统中的异步处理。</p>
</li>
</ul>
<p data-nodeid="65906">这些因素都可能给端到端测试带来挑战，比如测试过程不稳定、测试时间过长、测试用例集的维护成本高，等等。因此，应尽可能以<strong data-nodeid="66043">最粗粒度</strong>进行端到端的测试设计。</p>
<h3 data-nodeid="65907">如何开展端到端测试？</h3>
<p data-nodeid="65908">熟悉了端到端测试的基本内容，我们来看下如何开展端到端测试，主要有如下几类：</p>
<ul data-nodeid="65909">
<li data-nodeid="65910">
<p data-nodeid="65911"><strong data-nodeid="66049">UI 自动化</strong></p>
</li>
</ul>
<p data-nodeid="65912">对于带有 GUI 的应用程序系统，在进行端到端测试时，可以通过 UI 自动化的方式进行。如果 GUI 是 Web 形式，则 Selenium 是首选工具；如果 GUI 是 Native 形式，则可以使用 Appium。</p>
<p data-nodeid="65913">使用 UI 自动化方式进行端到端测试时，UI 本身也存在不稳定性，因此在测试应用程序时避免使用 GUI 也许是个不错的主意。</p>
<ul data-nodeid="65914">
<li data-nodeid="65915">
<p data-nodeid="65916"><strong data-nodeid="66055">API 自动化</strong></p>
</li>
</ul>
<p data-nodeid="65917">REST-assured&nbsp;库可以绕开 GUI 来测试 REST API 的服务，它用于针对API 触发实际的 HTTP 请求并评估收到的响应是否符合业务需要。</p>
<ul data-nodeid="65918">
<li data-nodeid="65919">
<p data-nodeid="65920"><strong data-nodeid="66060">手工测试</strong></p>
</li>
</ul>
<p data-nodeid="65921">手工测试则是像真实用户那样通过用户界面使用应用程序系统，而且测试自动化工作从来都不可能是完美的。比如，几乎不可能通过编写自动化用例来检测特定的错误，有时会在自动化测试中错过某些边缘情况，某些质量问题在自动化测试中并不明显，不容易被发现，等等。因此，进行某种形式的手工测试依然是一个好主意，且当进行手工测试时，可以适当地引入探索式测试。</p>
<blockquote data-nodeid="65922">
<p data-nodeid="65923">探索式软件测试是一种手动测试方法，强调测试人员在运行系统中发现质量问题的自由度和创造力。只需使用破坏性的思维方式，并提出在应用程序中引发问题和错误的方法。记录所有找到的内容，以备日后使用。当心错误、设计问题、响应时间慢、丢包或错包、以及所有其他会困扰软件用户的问题。</p>
</blockquote>
<h3 data-nodeid="65924">端到端测试实践心得</h3>
<p data-nodeid="65925">通过上述内容可知端到端测试的重要性、实用性、复杂性，这里跟你聊一下我对端到端测试的几点实践心得。</p>
<ul data-nodeid="65926">
<li data-nodeid="65927">
<p data-nodeid="65928">编写尽可能少的端到端测试，但绝不能省略它</p>
</li>
</ul>
<p data-nodeid="65929">由于可以通过较低级别的测试技术来获得微服务的质量信心，因此端到端测试的作用是确保一切都紧密联系在一起，从而实现业务目标。在端到端这个级别的测试上，全面地测试业务需求无疑是浪费的，尤其当微服务数量较多时，它的投入产出比必然很低。所以需要所有其他测试手段都用尽后，再进行端到端测试，并以此作为最终的质量保证。</p>
<p data-nodeid="74088" class="">同时需要警惕的是，<strong data-nodeid="74094">端到端测试要尽可能地少，但绝不能省略它</strong>。因为微服务架构下的分层测试，每一层都有独特的作用，不可轻易省略某一层级的测试。对于端到端测试来说，无论如何也需要验证业务的核心链路和功能。微服务测试人员经常会犯的错误是，在充分进行了较低层次的测试后，会乐观地认为已不存在质量问题，结果问题被生产环境的真实用户发现后才追悔莫及。</p>
<ul data-nodeid="65931">
<li data-nodeid="65932">
<p data-nodeid="65933">分析缺陷产生的层次，推进分层测试的落地与完善</p>
</li>
</ul>
<p data-nodeid="65934">在微服务测试过程中，要善于对出现过的缺陷进行合理性分析。比如，如果较高级别的测试发现缺陷，并且没有进行较低级别的测试或较低级别的测试未执行失败，则需要推动落地或完善较低级别的测试。只有尽可能将测试推到测试金字塔的下方，才能逐渐将分层测试策略在项目中落地。</p>
<ul data-nodeid="65935">
<li data-nodeid="65936">
<p data-nodeid="65937">测试设计时应专注于真实的用户操作</p>
</li>
</ul>
<p data-nodeid="65938">为了确保端到端测试用例套件中的所有测试都是有价值的，可以围绕系统用户的角色以及这些用户在系统中进行的操作轨迹进行分析和场景设计。</p>
<p data-nodeid="65939">例如，对于用户在网站上购物这个场景来说，应编写的是一个包含浏览商品、放入购物车、付款这三个操作的单个测试，而不是分别单独测试每一个操作。这种方法可以显著减少编写的测试数量并缩短测试执行时间。</p>
<ul data-nodeid="65940">
<li data-nodeid="65941">
<p data-nodeid="65942">慎重选择测试入口</p>
</li>
</ul>
<p data-nodeid="65943">如果特定的外部服务或 GUI 是测试用例套件中不稳定的主要原因，则可以重新确定测试范围以便排除掉不稳定的组件。但这里需要注意的是，虽然推荐使用服务虚拟化来模拟不稳定的服务，但尽量用真实的外部服务或 GUI 对核心链路进行至少一次的端到端测试，而不是一直使用服务虚拟化工具来模拟。</p>
<ul data-nodeid="65944">
<li data-nodeid="65945">
<p data-nodeid="65946">使测试与数据无关</p>
</li>
</ul>
<p data-nodeid="65947">端到端测试的常见困难来源是数据管理，有必要针对测试数据进行管理：如果数据可以用业务操作进行构造，则在端到端执行之前构造好需要的测试数据；如果不允许以业务操作方式构造，则可以在数据库中插入所需数据。</p>
<ul data-nodeid="65948">
<li data-nodeid="65949">
<p data-nodeid="65950">端到端测试，从来都不 low</p>
</li>
</ul>
<p data-nodeid="65951">一些测试人员认为端到端测试没有技术含量，我不太认同。因为测试过程中的关注点和验证点不同，个人的收获也不尽相同。你当然可以把端到端测试看成是一个纯黑盒测试，测试的过程就是不断“点点点”的过程，发现问题时直接反馈给研发同学，等研发同学排查解决后回归验证。你也可以提前梳理好核心链路服务调用关系、数据库表结构、核心类的代码逻辑等内容，在进行端到端测试时，针对关键操作实时查看接口调用情况、服务操作的日志、数据库等信息。并且当出现问题时，或许你自己就能定位出问题所在，即使未能定位出来，也可以把你排查到的中间结果告知给研发同学，使研发同学可以更快定位到问题所在。这种端到端测试属于灰盒测试（黑盒测试+白盒测试），测试效率变高、范围更加精准，研发人员对待你的态度也将大不一样。</p>
<h3 data-nodeid="65952">总结</h3>
<p data-nodeid="65953">本节课，我讲解了微服务架构下的端到端测试，它是一种用于测试整个应用程序的流程是否符合预期的测试技术。它的测试范围比其他类型的测试大得多。绝大多数情况下，微服务应用系统依赖的外部服务也应包含在端到端测试范围内。如果有必要，也可以主动排除它们。端到端测试是面向业务的，所以测试时要从真实用户使用场景来进行测试，尽可能完整地部署系统中的微服务，并主要通过 GUI 和 API 等公共接口对其进行操作。</p>
<p data-nodeid="65954">紧接着我又讲解了如何开展端到端测试，主要通过 UI 自动化测试方式、API 自动化测试方式和手工测试方式来进行：通过端到端测试框架（如Selenium、Appium、&nbsp;REST-assured&nbsp;）和探索式软件测试方法发现整个应用程序的缺陷。</p>
<p data-nodeid="65955">最后我给出了我在端到端测试方面的一些实践心得，包括端到端测试数量、缺陷分析和分层测试推进、测试设计时的关注点、对测试入口的选择、测试数据的准备和对端到端测试的基本认识等。</p>
<p data-nodeid="75219">到目前为止，关于微服务的分层测试策略的内容就介绍完了，再来整体回顾一下。</p>
<p data-nodeid="75220" class=""></p>
<ul data-nodeid="65958">
<li data-nodeid="65959">
<p data-nodeid="65960">单元测试（Unit Test） ：从服务中最小可测试单元视角验证代码行为符合预期，以便测试出方法、类级别的缺陷。</p>
</li>
<li data-nodeid="65961">
<p data-nodeid="65962">集成测试（Integration Test）：验证当前服务与外部模块之间的通信方式或者交互符合预期，以便测试出接口缺陷。</p>
</li>
<li data-nodeid="65963">
<p data-nodeid="65964">组件测试 （Component Test）：将测试范围限制在被测系统的一部分（一般是单个服务），使用测试替身（test doubles）将其与其他组件隔离，以便测试出被测代码的缺陷。</p>
</li>
<li data-nodeid="65965">
<p data-nodeid="65966">契约测试（Contracts Test）：验证当前服务与外部服务之间的交互，以表明它符合消费者服务所期望的契约。</p>
</li>
<li data-nodeid="65967">
<p data-nodeid="65968">端到端测试（End-to-end Test）：从用户视角验证整个系统的功能能否符合用户的预期。</p>
</li>
</ul>
<p data-nodeid="65969">你所负责的项目或服务，是否进行过端到端测试？我想，一定有。那么它具体的进展是怎样的？欢迎在留言区评论。同时欢迎你能把这篇文章分享给你的同学、朋友和同事，大家一起交流。</p>
<blockquote data-nodeid="65970">
<p data-nodeid="65971">相关链接<br>
<a href="ttps://www.martinfowler.com/articles/microservice-testing/" data-nodeid="66101">https://www.martinfowler.com/articles/microservice-testing/ </a><br>
<a href="https://www.martinfowler.com/articles/practical-test-pyramid.html" data-nodeid="66106">https://www.martinfowler.com/articles/practical-test-pyramid.html</a><br>
<a href="https://engineering.zalando.com/posts/2019/02/end-to-end-microservices.html" data-nodeid="66110">https://engineering.zalando.com/posts/2019/02/end-to-end-microservices.html</a><br>
<a href="https://opensource.com/article/18/6/five-microservice-testing-strategies-startups" data-nodeid="66114">https://opensource.com/article/18/6/five-microservice-testing-strategies-startups</a><br>
<a href="https://www.intevity.com/insights/automated-testing-with-microservices" data-nodeid="66118">https://www.intevity.com/insights/automated-testing-with-microservices</a><br>
端到端测试框架<br>
Cypress： <a href="https://github.com/cypress-io/cypress" data-nodeid="66125">https://github.com/cypress-io/cypress</a><br>
Zalenium： <a href="https://github.com/zalando/zalenium" data-nodeid="66130">https://github.com/zalando/zalenium</a><br>
Chakram： <a href="https://www.npmjs.com/package/chakram" data-nodeid="66135">https://www.npmjs.com/package/chakram</a><br>
REST-assured： <a href="https://github.com/rest-assured/rest-assured" data-nodeid="66140">https://github.com/rest-assured/rest-assured</a><br>
Selenium： <a href="https://www.selenium.dev/" data-nodeid="66145">https://www.selenium.dev/</a><br>
Appium： <a href="http://appium.io/" data-nodeid="66150">http://appium.io/</a></p>
</blockquote>]]></description>
</item>
</channel>
</rss>
