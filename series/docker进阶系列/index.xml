<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>docker进阶系列 - seris - 打工人日志 - jobcher</title>
        <link>https://www.jobcher.com/series/docker%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97/</link>
        <description>docker进阶系列 - seris - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Fri, 18 Feb 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.jobcher.com/series/docker%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97/" rel="self" type="application/rss+xml" /><item>
    <title>docker 命令(2)</title>
    <link>https://www.jobcher.com/docker02/</link>
    <pubDate>Fri, 18 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/docker02/</guid>
    <description><![CDATA[<h1 id="docker-命令2">docker 命令(2)</h1>
<h2 id="docker-ps-命令"><code>docker ps</code> 命令</h2>
<p><code>docker ps</code> 能查看所有运行中的容器<br>
<code>docker ps -a</code> 能查看所有的容器<br>
<code>docker rm -f $(docker ps -aq)</code> 强制删除所有容器</p>
<h2 id="docker-run和docker-create有什么区别"><code>docker run</code>和<code>docker create</code>有什么区别</h2>
<p><code>docker create</code>命令能够基于镜像创建容器。<br>
该命令执行的效果类似于<code>docker run -d</code>，即创建一个将在系统后台运行的容器。<br>
但是与<code>docker run -d</code>不同的是，<code>docker create</code>创建的容器<code>并未实际启动</code>，还需要执行<code>docker start</code>命令或<code>docker run</code>命令以启动容器。<br>
事实上，<code>docker creat</code>e 命令常用于<code>在启动容器之前进行必要的设置</code>。</p>
]]></description>
</item><item>
    <title>清理Docker的container，image与volume</title>
    <link>https://www.jobcher.com/docker-clean/</link>
    <pubDate>Thu, 10 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/docker-clean/</guid>
    <description><![CDATA[<h1 id="清理-docker-的-containerimage-与-volume">清理 Docker 的 container，image 与 volume</h1>
<p>Docker 的镜像（image）、容器（container）、数据卷（volume）， 都是由 daemon 托管的。 因此，在需要清理时，也需要使用其自带的手段。</p>
<h2 id="清理技巧">清理技巧</h2>
<p>清理所有停止运行的容器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker container prune
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">docker rm <span class="k">$(</span>docker ps -aq<span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>清理所有悬挂<code>（&lt;none&gt;）</code>镜像：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker image prune
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">docker rmi <span class="k">$(</span>docker images -qf <span class="s2">&#34;dangling=true&#34;</span><span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>清理所有无用数据卷：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker volume prune
</span></span></code></pre></td></tr></table>
</div>
</div><p>由于<code>prune</code>操作是批量删除类的危险操作，所以会有一次确认。 如果不想输入<code>y&lt;CR&gt;</code>来确认，可以添加<code>-f</code>操作。慎用！</p>
<h2 id="清理停止的容器">清理停止的容器</h2>
<p>docker rm -lv CONTAINER
<code>-l</code>是清理 link，<code>v</code>是清理 volume。 这里的 CONTAINER 是容器的 name 或 ID，可以是一个或多个。</p>
<p>参数列表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name shorthand</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">–force,-f</td>
<td style="text-align:left">false</td>
<td style="text-align:left">Force the removal of a running container (uses SIGKILL)</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">–link, -l</td>
<td style="text-align:left">false</td>
<td style="text-align:left">Remove the specified link</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">–volumes, -v</td>
<td style="text-align:left"></td>
<td style="text-align:left">false</td>
<td>Remove the volumes associated with the container</td>
</tr>
</tbody>
</table>
<h2 id="清理所有停止的容器">清理所有停止的容器</h2>
<p>通过<code>docker ps</code>可以查询当前运行的容器信息。 而通过<code>docker ps -a</code>，可以查询所有的容器信息，包括已停止的。</p>
<p>在需要清理所有已停止的容器时，通常利用 shell 的特性，组合一下就好。</p>
<p>docker rm $(docker ps -aq)
其中，<code>ps的-q</code>，是只输出容器 ID，方便作为参数让<code>rm</code>使用。 假如给<code>rm</code>指定<code>-f</code>，则可以清理所有容器，包括正在运行的。</p>
<p>这条组合命令，等价于另一条命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker container prune
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>container</code>子命令，下面包含了所有和容器相关的子命令。 包括<code>docker ps</code>，等价于<code>docker container ps</code>或<code>docker container ls</code>。 其余还有<code>start、stop、kill、cp</code>等，一级子命令相当于二级子命令在外面的 alias。 而<code>prune</code>则是特别提供的清理命令，这在其它的管理命令里还可以看到，比如<code>image、volume</code>。</p>
<h2 id="按需批量清理容器">按需批量清理容器</h2>
<p>清除所有已停止的容器，是比较常用的清理。 但有时会需要做一些特殊过滤。</p>
<p>这时就需要使用<code>docker ps --filter</code>。</p>
<p>比如，显示所有返回值为 0，即正常退出的容器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker ps -a --filter <span class="s1">&#39;exited=0&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>同理，可以得到其它非正常退出的容器。</p>
<p>目前支持的过滤器有：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">id (container’s id)
</span></span><span class="line"><span class="cl">label (label=&lt;key&gt; or label=&lt;key&gt;=&lt;value&gt;)
</span></span><span class="line"><span class="cl">name (container’s name)
</span></span><span class="line"><span class="cl">exited (int - the code of exited containers. Only useful with –all)
</span></span><span class="line"><span class="cl">status (created|restarting|running|removing|paused|exited|dead)
</span></span><span class="line"><span class="cl">ancestor (&lt;image-name&gt;[:&lt;tag&gt;], &lt;image id&gt; or &lt;image@digest&gt;) - filters containers that were created from the given image or a descendant.
</span></span><span class="line"><span class="cl">before (container’s id or name) - filters containers created before given id or name
</span></span><span class="line"><span class="cl">since (container’s id or name) - filters containers created since given id or name
</span></span><span class="line"><span class="cl">isolation (default|process|hyperv) (Windows daemon only)
</span></span><span class="line"><span class="cl">volume (volume name or mount point) - filters containers that mount volumes.
</span></span><span class="line"><span class="cl">network (network id or name) - filters containers connected to the provided network
</span></span><span class="line"><span class="cl">health (starting|healthy|unhealthy|none) - filters containers based on healthcheck status
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="清理失败">清理失败</h2>
<p>如果在清理容器时发生失败，通过重启 Docker 的 Daemon，应该都能解决问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># systemd</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart docker.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># initd</span>
</span></span><span class="line"><span class="cl">sudo service docker restart
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="清理镜像">清理镜像</h2>
<p>与清理容器的<code>ps、rm</code>类似，清理镜像也有<code>images、rmi</code>两个子命令。 <code>images</code>用来查看，<code>rmi</code>用来删除。</p>
<p>清理镜像前，应该确保该镜像的容器，已经被清除。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker rmi IMAGE
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中，IMAGE 可以是 name 或 ID。 如果是 name，不加 TAG 可以删除所有 TAG。</p>
<p>另外，这两个命令也都属于 alias。 <code>docker images</code>等价<code>于docker image ls</code>，而<code>docker rmi</code>等价于<code>docker image rm</code>。</p>
<p>按需批量清理镜像 ¶
与<code>ps</code>类似，<code>images</code>也支持<code>--filter</code>参数。</p>
<p>与清理相关，最常用的，当属<code>&lt;none&gt;</code>了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker images --filter <span class="s2">&#34;dangling=true&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这条命令，可以列出所有悬挂（dangling）的镜像，也就是显示为<none>的那些。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker rmi <span class="k">$(</span>docker images -qf <span class="s2">&#34;dangling=true&#34;</span><span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这条组合命令，如果不写入 Bash 的 alias，几乎无法使用。 不过还有一条等价命令，非常容易使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker image prune
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>prune</code>和<code>images</code>类似，也同样支持&ndash;filter 参数。 其它的<code>filter</code>有：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dangling (boolean - true or false)
</span></span><span class="line"><span class="cl">label (label=&lt;key&gt; or label=&lt;key&gt;=&lt;value&gt;)
</span></span><span class="line"><span class="cl">before (&lt;image-name&gt;[:&lt;tag&gt;], &lt;image id&gt; or &lt;image@digest&gt;) - filter images created before given id or references
</span></span><span class="line"><span class="cl">since (&lt;image-name&gt;[:&lt;tag&gt;], &lt;image id&gt; or &lt;image@digest&gt;) - filter images created since given id or references
</span></span><span class="line"><span class="cl">reference (pattern of an image reference) - filter images whose reference matches the specified pattern
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="清理所有无用镜像">清理所有无用镜像</h2>
<p>这招要慎用，否则需要重新下载。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker image prune -a
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="清理数据卷">清理数据卷</h2>
<p>数据卷不如容器或镜像那样显眼，但占的硬盘却可大可小。</p>
<p>数据卷的相关命令，都在<code>docker volume</code>中了。</p>
<p>一般用<code>docker volume ls</code>来查看，用<code>docker volume rm VOLUME</code>来删除一个或多个。</p>
<p>不过，绝大多数情况下，不需要执行这两个命令的组合。 直接执行<code>docker volume prune</code>就好，即可删除所有无用卷。</p>
<p>注意：这是一个危险操作！甚至可以说，这是本文中最危险的操作！ 一般真正有价值的运行数据，都在数据卷中。 （当然也可能挂载到了容器外的文件系统里，那就没关系。） 如果在关键服务停止期间，执行这个操作，很可能会丢失所有数据！</p>
<h2 id="从文件系统删除">从文件系统删除</h2>
<p>除配置文件以为，Docker 的内容相关文件，基本都放在<code>/var/lib/docker/</code>目录下。</p>
<p>该目录下有下列子目录，基本可以猜测出用途：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">aufs
</span></span><span class="line"><span class="cl">containers
</span></span><span class="line"><span class="cl">image
</span></span><span class="line"><span class="cl">network
</span></span><span class="line"><span class="cl">plugins
</span></span><span class="line"><span class="cl">swarm
</span></span><span class="line"><span class="cl">tmp
</span></span><span class="line"><span class="cl">trust
</span></span><span class="line"><span class="cl">volumes
</span></span></code></pre></td></tr></table>
</div>
</div><p>一般不推荐直接操作这些目录，除非一些极特殊情况。 操作不当，后果难料，需要慎重。</p>
]]></description>
</item><item>
    <title>docker进阶使用</title>
    <link>https://www.jobcher.com/docker01/</link>
    <pubDate>Thu, 09 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/docker01/</guid>
    <description><![CDATA[<h1 id="docker-进阶使用">docker 进阶使用</h1>
<p>dockerfile 和 docker compose 的配置</p>
<h1 id="dockerfile-使用">Dockerfile 使用</h1>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p>例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    FROM nginx<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    RUN <span class="nb">echo</span> <span class="s1">&#39;这是一个本地构建的nginx镜像&#39;</span> &gt; /usr/share/nginx/html/index.html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>保存 Dockerfile 文件并在本地路径执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    docker build -t nginx:v1-test .
</span></span><span class="line"><span class="cl">    docker run -name docker run --name nginx-test -d  -p 8080:80 nginx:v1-test
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览 nginx 页面确认更新内容</p>
<pre><code>curl 127.0.0.1:8080
输出：
这是一个本地构建的nginx镜像
</code></pre>
<h2 id="docker-命令详解">Docker 命令详解</h2>
<h3 id="copy">COPY</h3>
<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;源路径1&gt;...  &lt;目标路径&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;源路径1&gt;&#34;</span>,...  <span class="s2">&#34;&lt;目标路径&gt;&#34;</span><span class="o">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>&lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    COPY hom* /mydir/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    COPY hom?.txt /mydir/<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="from">FROM</h3>
<p>FROM：定制的镜像都是基于 FROM 的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    FROM nginx<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="run">RUN</h3>
<p>RUN：用于执行后面跟着的命令行命令</p>
<p>shell：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    RUN &lt;命令行命令&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c1"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>exec：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    RUN <span class="o">[</span><span class="s2">&#34;可执行文件&#34;</span>, <span class="s2">&#34;参数1&#34;</span>, <span class="s2">&#34;参数2&#34;</span><span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c1"># 例如：</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c1"># RUN [&#34;./test.php&#34;, &#34;dev&#34;, &#34;offline&#34;] 等价于 RUN ./test.php dev offline</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add">ADD</h3>
<p>ADD 指令和 COPY 的使用格类似</p>
<p>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</p>
<p>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</p>
<h3 id="cmd">CMD</h3>
<p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>
<ol>
<li>CMD 在 docker run 时运行。</li>
<li>RUN 是在 docker build。</li>
</ol>
<p>Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    CMD &lt;shell 命令&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    CMD <span class="o">[</span><span class="s2">&#34;&lt;可执行文件或命令&gt;&#34;</span>,<span class="s2">&#34;&lt;param1&gt;&#34;</span>,<span class="s2">&#34;&lt;param2&gt;&#34;</span>,...<span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    CMD <span class="o">[</span><span class="s2">&#34;&lt;param1&gt;&#34;</span>,<span class="s2">&#34;&lt;param2&gt;&#34;</span>,...<span class="o">]</span>  <span class="c1"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="通过-dockerfile-文件封装-hugo">通过 dockerfile 文件封装 hugo</h2>
<p>dokcerfile 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    FROM nginx:1.21<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    COPY public/ /usr/share/nginx/html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>docker.sh 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    <span class="c1">#/!bin/bash</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;删除旧的docker&#34;</span>
</span></span><span class="line"><span class="cl">    docker ps
</span></span><span class="line"><span class="cl">    docker stop nginx-hugo
</span></span><span class="line"><span class="cl">    docker rm nginx-hugo
</span></span><span class="line"><span class="cl">    docker rmi nginx:hugo
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;生成新的docker&#34;</span>
</span></span><span class="line"><span class="cl">    hugo -t LoveIt -D
</span></span><span class="line"><span class="cl">    docker build -t nginx:hugo .
</span></span><span class="line"><span class="cl">    docker run --name nginx-hugo -d -p 8080:80 nginx:hugo
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;显示端口&#34;</span>
</span></span><span class="line"><span class="cl">    netstat -lntp
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    sh update.sh
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
