<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>基础知识系列 - seris - 打工人日志 - jobcher</title>
        <link>https://www.jobcher.com/series/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%B3%BB%E5%88%97/</link>
        <description>基础知识系列 - seris - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Thu, 21 Sep 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.jobcher.com/series/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%B3%BB%E5%88%97/" rel="self" type="application/rss+xml" /><item>
    <title>GNU/Linux 一键更换系统软件源脚本</title>
    <link>https://www.jobcher.com/linux-mirror/</link>
    <pubDate>Thu, 21 Sep 2023 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/linux-mirror/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/gnulinux-logo-gnu-linux-logo-png.png" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>有很多小伙伴，在接受公司老项目后，想要更新服务器源时，发现镜像源失效了，手动添加也很不方便，我这里提供了一个脚本供大家使用，轻松切换镜像源。<br>
支持系统：</p>
<table align="center">
<tr>
    <td><a href="https://www.debian.org" target="_blank"></a>&nbsp;Debian</td>
    <td align="center">8.0 ~ 12</td>
</tr>
<tr>
    <td><a href="https://cn.ubuntu.com" target="_blank"></a>&nbsp;Ubuntu</td>
    <td align="center">14.04 ~ 23</td>
</tr>
<tr>
    <td><a href="https://www.kali.org" target="_blank"></a>&nbsp;Kali Linux</td>
    <td align="center">2.0 ~ 2023</td>
</tr>
<tr>
    <td><a href="https://access.redhat.com/products/red-hat-enterprise-linux" target="_blank"></a>&nbsp;Red Hat Enterprise Linux</td>
    <td align="center">7.0 ~ 9</td>
</tr>
<tr>
    <td><a href="https://fedoraproject.org/zh-Hans" target="_blank"></a>&nbsp;Fedora</td>
    <td align="center">30 ~ 38</td>
</tr>
<tr>
    <td><a href="https://www.centos.org" target="_blank"></a>&nbsp;CentOS</td>
    <td align="center">7.0 ~ 8.5 / Stream 8 ~ 9</td>
</tr>
<tr>
    <td><a href="https://rockylinux.org/zh_CN" target="_blank"></a>&nbsp;Rocky Linux</td>
    <td align="center">8 ~ 9</td>
</tr>
<tr>
    <td><a href="https://almalinux.org/zh-hans" target="_blank"></a>&nbsp;AlmaLinux</td>
    <td align="center">8 ~ 9</td>
</tr>
<tr>
    <td><a href="https://www.opencloudos.org" target="_blank"></a>&nbsp;OpenCloudOS</td>
    <td align="center">8.6 / 9.0</td>
</tr>
<tr>
    <td><a href="https://www.openeuler.org/zh" target="_blank"></a>&nbsp;openEuler</td>
    <td align="center">21.03 ~ 23</td>
</tr>
<tr>
    <td><a href="https://www.opensuse.org" target="_blank"></a>&nbsp;openSUSE</td>
    <td align="center">Leep 15 / Tumbleweed</td>
</tr>
<tr>
    <td><a href="https://archlinux.org" target="_blank"></a>&nbsp;Arch Linux</td>
    <td align="center">all</td>
</tr>
</table>
<h2 id="执行命令">执行命令</h2>
<h3 id="国内使用">国内使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bash &lt;<span class="o">(</span>curl -sSL https://www.jobcher.com/ChangeMirrors.sh<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="教育网使用">教育网使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bash &lt;<span class="o">(</span>curl -sSL https://www.jobcher.com/ChangeMirrors.sh<span class="o">)</span> --edu
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="海外使用">海外使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bash &lt;<span class="o">(</span>curl -sSL https://www.jobcher.com/ChangeMirrors.sh<span class="o">)</span> --abroad
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="注意事项">注意事项</h2>
<ol>
<li>需使用 <code>Root</code> 用户执行脚本
切换命令为 <code>sudo -i</code> 或 <code>su root</code>，不同系统环境使用的命令不一样，因为有些系统没有在初始安装时为 <code>Root</code> 用户设置固定密码所以需要使用 <code>sudo</code> 指令来提权</li>
<li>建议使用 <code>SSH</code> 远程工具
如果你使用的系统终端界面不支持 UTF-8 编码那么将无法正常显示中文内容，导致无法正确选择交互内容。大部分系统都会自动开启该服务</li>
<li>首次在新系统上执行脚本
当前执行方式依赖 <code>curl</code> 指令来获取脚本内容并执行，所以需要先通过包管理工具来安装该软件包，否则会报错 <code>Command not found</code>，若无法安装就复制源码到本地新建.sh脚本，然后通过 bash 手动执行</li>
</ol>
]]></description>
</item><item>
    <title>在windows上安装appium</title>
    <link>https://www.jobcher.com/appium/</link>
    <pubDate>Mon, 15 May 2023 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/appium/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/appium-logo-horiz.png" referrerpolicy="no-referrer">
            </div><h2 id="在windows上安装appium">在windows上安装appium</h2>
<p><code>Appium</code> 主要用于软件测试自动化领域，以帮助确定给定应用程序的功能是否按预期工作。与其他类型的软件测试相比，UI 自动化允许测试人员编写代码，在应用程序的实际 UI 中演练用户方案，尽可能模拟现实世界中发生的情况，同时实现自动化的各种好处，包括速度、规模和一致性。</p>
<h3 id="安装nodejs">安装nodejs</h3>
<p>Appium是基于Node.js构建的,所以首先需要安装Node.js<br>
<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener noreffer">下载地址：https://nodejs.org/en/download/</a><br>
下载并安装，验证是否安装成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">node -v
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装appium">安装appium</h3>
<p>安装Appium。在命令提示符下运行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">npm install -g appium
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装appium-doctor">安装appium-doctor</h3>
<p>安装appium-doctor。在命令提示符下运行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">npm install -g appium-doctor
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装appium-desktop">安装appium-desktop</h3>
<p>安装appium-desktop。在命令提示符下运行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">npm install -g appium-desktop
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装jdk">安装jdk</h3>
<p>下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener noreffer">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a>
下载并安装，验证是否安装成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">java -version
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装android-sdk">安装android-sdk</h3>
<p>下载地址：<a href="https://developer.android.com/studio" target="_blank" rel="noopener noreffer">https://developer.android.com/studio</a>
下载并安装，验证是否安装成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">adb version
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置环境变量">配置环境变量</h3>
<p>在系统环境变量中添加以下变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">ANDROID_HOME</span> <span class="o">=</span> D:<span class="se">\A</span>ndroid<span class="se">\s</span>dk
</span></span><span class="line"><span class="cl"><span class="nv">JAVA_HOME</span> <span class="o">=</span> C:<span class="se">\P</span>rogram Files<span class="se">\J</span>ava<span class="se">\j</span>dk1.8.0_311
</span></span><span class="line"><span class="cl"><span class="nv">Path</span> <span class="o">=</span> %ANDROID_HOME%<span class="se">\p</span>latform-tools<span class="p">;</span>%ANDROID_HOME%<span class="se">\t</span>ools<span class="p">;</span>%JAVA_HOME%<span class="se">\b</span>in
</span></span></code></pre></td></tr></table>
</div>
</div><p>验证是否配置成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">appium-doctor
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="启动appium">启动appium</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">appium
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="启动appium-desktop">启动appium-desktop</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">appium-desktop
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="测试脚本">测试脚本</h3>
<p>创建测试脚本test.py</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">appium</span> <span class="kn">import</span> <span class="n">webdriver</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">desired_caps</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">desired_caps</span><span class="p">[</span><span class="s1">&#39;platformName&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Android&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">desired_caps</span><span class="p">[</span><span class="s1">&#39;platformVersion&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;10&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">desired_caps</span><span class="p">[</span><span class="s1">&#39;deviceName&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Android Emulator&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">desired_caps</span><span class="p">[</span><span class="s1">&#39;appPackage&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;com.android.calculator2&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">desired_caps</span><span class="p">[</span><span class="s1">&#39;appActivity&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;.Calculator&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Remote</span><span class="p">(</span><span class="s1">&#39;http://localhost:4723/wd/hub&#39;</span><span class="p">,</span> <span class="n">desired_caps</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s2">&#34;com.android.calculator2:id/digit_2&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s2">&#34;com.android.calculator2:id/op_add&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s2">&#34;com.android.calculator2:id/digit_3&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s2">&#34;com.android.calculator2:id/eq&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">driver</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="运行测试脚本">运行测试脚本</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python test.py
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>systemd 守护命令</title>
    <link>https://www.jobcher.com/systemd/</link>
    <pubDate>Mon, 08 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/systemd/</guid>
    <description><![CDATA[<h2 id="介绍">介绍</h2>
<p>systemd 是 linux 中用来启动守护进程，Linux 最早一直采用 init 进程</p>
<p><br>
(systemd 架构图)</p>
<h2 id="systemd-命令">systemd 命令</h2>
<p>systemd 不是一个具体的命令，而是一组命令，用于系统管理的各个方面</p>
<h3 id="1systemctl">1.systemctl</h3>
<p><code>systemctl</code>是 Systemd 的主命令，用于管理系统。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 重启系统</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl reboot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭系统，切断电源</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl poweroff
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># CPU停止工作</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl halt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 暂停系统</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl <span class="nb">suspend</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 让系统进入冬眠状态</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl hibernate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 让系统进入交互式休眠状态</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl hybrid-sleep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动进入救援状态（单用户状态）</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl rescue
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2systemd-analyze">2.systemd-analyze</h3>
<p><code>systemd-analyze</code>命令用于查看启动耗时</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 查看启动耗时</span>
</span></span><span class="line"><span class="cl">systemd-analyze
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看每个服务的启动耗时</span>
</span></span><span class="line"><span class="cl">$ systemd-analyze blame
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示瀑布状的启动过程流</span>
</span></span><span class="line"><span class="cl">$ systemd-analyze critical-chain
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示指定服务的启动流</span>
</span></span><span class="line"><span class="cl">$ systemd-analyze critical-chain atd.service
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3hostnamectl">3.hostnamectl</h3>
<p><code>hostnamectl</code>命令用于查看当前主机的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 显示当前主机的信息</span>
</span></span><span class="line"><span class="cl">$ hostnamectl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置主机名。</span>
</span></span><span class="line"><span class="cl">$ sudo hostnamectl set-hostname jobcher
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4localectl">4.localectl</h3>
<p><code>localectl</code>命令用于查看本地化设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 查看本地化设置</span>
</span></span><span class="line"><span class="cl">$ localectl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置本地化参数。</span>
</span></span><span class="line"><span class="cl">$ sudo localectl set-locale <span class="nv">LANG</span><span class="o">=</span>en_GB.utf8
</span></span><span class="line"><span class="cl">$ sudo localectl set-keymap en_GB
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="5timedatectl">5.timedatectl</h3>
<p><code>timedatectl</code>命令用于查看当前时区设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 查看当前时区设置</span>
</span></span><span class="line"><span class="cl">$ timedatectl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示所有可用的时区</span>
</span></span><span class="line"><span class="cl">$ timedatectl list-timezones
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置当前时区</span>
</span></span><span class="line"><span class="cl">$ sudo timedatectl set-timezone America/New_York
</span></span><span class="line"><span class="cl">$ sudo timedatectl set-time YYYY-MM-DD
</span></span><span class="line"><span class="cl">$ sudo timedatectl set-time HH:MM:SS
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="6loginctl">6.loginctl</h3>
<p><code>loginctl</code>命令用于查看当前登录的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 列出当前session</span>
</span></span><span class="line"><span class="cl">$ loginctl list-sessions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出当前登录用户</span>
</span></span><span class="line"><span class="cl">$ loginctl list-users
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出显示指定用户的信息</span>
</span></span><span class="line"><span class="cl">$ loginctl show-user ruanyf
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="unit">Unit</h2>
<p>Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。 </p>
<table>
<thead>
<tr>
<th style="text-align:left">分类</th>
<th style="text-align:left">资源</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Service unit</td>
<td style="text-align:left">系统服务</td>
</tr>
<tr>
<td style="text-align:left">Target unit</td>
<td style="text-align:left">多个 Unit 构成的一个组</td>
</tr>
<tr>
<td style="text-align:left">Device Unit</td>
<td style="text-align:left">硬件设备</td>
</tr>
<tr>
<td style="text-align:left">Mount Unit</td>
<td style="text-align:left">文件系统的挂载点</td>
</tr>
<tr>
<td style="text-align:left">Automount Unit</td>
<td style="text-align:left">自动挂载点</td>
</tr>
<tr>
<td style="text-align:left">Path Unit</td>
<td style="text-align:left">文件或路径</td>
</tr>
<tr>
<td style="text-align:left">Scope Unit</td>
<td style="text-align:left">不是由 Systemd 启动的外部进程</td>
</tr>
<tr>
<td style="text-align:left">Slice Unit</td>
<td style="text-align:left">进程组</td>
</tr>
<tr>
<td style="text-align:left">Snapshot Unit</td>
<td style="text-align:left">Systemd 快照，可以切回某个快照</td>
</tr>
<tr>
<td style="text-align:left">Socket Unit</td>
<td style="text-align:left">进程间通信的 socket</td>
</tr>
<tr>
<td style="text-align:left">Swap Unit</td>
<td style="text-align:left">swap 文件</td>
</tr>
<tr>
<td style="text-align:left">Timer Unit</td>
<td style="text-align:left">定时器</td>
</tr>
</tbody>
</table>
<h3 id="1systemctl-list-units">1.systemctl list-units</h3>
<p><code>systemctl list-units</code>命令可以查看当前系统的所有 Unit</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 列出正在运行的 Unit</span>
</span></span><span class="line"><span class="cl">$ systemctl list-units
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span>
</span></span><span class="line"><span class="cl">$ systemctl list-units --all
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有没有运行的 Unit</span>
</span></span><span class="line"><span class="cl">$ systemctl list-units --all --state<span class="o">=</span>inactive
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有加载失败的 Unit</span>
</span></span><span class="line"><span class="cl">$ systemctl list-units --failed
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有正在运行的、类型为 service 的 Unit</span>
</span></span><span class="line"><span class="cl">$ systemctl list-units --type<span class="o">=</span>service
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2unit-的状态">2.Unit 的状态</h3>
<p><code>systemctl status</code>命令用于查看系统状态和单个 Unit 的状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 显示系统状态</span>
</span></span><span class="line"><span class="cl">$ systemctl status
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示单个 Unit 的状态</span>
</span></span><span class="line"><span class="cl">$ sysystemctl status bluetooth.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示远程主机的某个 Unit 的状态</span>
</span></span><span class="line"><span class="cl">$ systemctl -H root@rhel7.example.com status httpd.service
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了<code>status</code>命令，<code>systemctl</code>还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 显示某个 Unit 是否正在运行</span>
</span></span><span class="line"><span class="cl">$ systemctl is-active application.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个 Unit 是否处于启动失败状态</span>
</span></span><span class="line"><span class="cl">$ systemctl is-failed application.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个 Unit 服务是否建立了启动链接</span>
</span></span><span class="line"><span class="cl">$ systemctl is-enabled application.service
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3unit-管理">3.Unit 管理</h3>
<p>对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 <code>service</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 立即启动一个服务</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl start apache.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 立即停止一个服务</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl stop apache.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重启一个服务</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl restart apache.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 杀死一个服务的所有子进程</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl <span class="nb">kill</span> apache.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重新加载一个服务的配置文件</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl reload apache.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重载所有修改过的配置文件</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl daemon-reload
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个 Unit 的所有底层参数</span>
</span></span><span class="line"><span class="cl">$ systemctl show httpd.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个 Unit 的指定属性的值</span>
</span></span><span class="line"><span class="cl">$ systemctl show -p CPUShares httpd.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置某个 Unit 的指定属性</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl set-property httpd.service <span class="nv">CPUShares</span><span class="o">=</span><span class="m">500</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4依赖关系">4.依赖关系</h3>
<p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 <code>Systemd</code> 在启动 A 的时候，同时会去启动 B。<br>
<code>systemctl list-dependencies</code>命令列出一个 Unit 的所有依赖。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl list-dependencies nginx.service
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用&ndash;all 参数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl list-dependencies --all nginx.service
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="unit-的配置文件">Unit 的配置文件</h2>
<p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit<br>
Systemd 默认从目录<code>/etc/systemd/system/</code>读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录<code>/usr/lib/systemd/system/</code>，真正的配置文件存放在那个目录。<br>
<code>systemctl enable</code>命令用于在上面两个目录之间，建立符号链接关系。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ sudo systemctl <span class="nb">enable</span> jobcher.service
</span></span><span class="line"><span class="cl"><span class="c1"># 等同于</span>
</span></span><span class="line"><span class="cl">$ sudo ln -s <span class="s1">&#39;/usr/lib/systemd/system/jobcher.service&#39;</span> <span class="s1">&#39;/etc/systemd/system/multi-user.target.wants/jobcher.service&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果配置文件里面设置了开机启动，<code>systemctl enable</code>命令相当于激活开机启动。</p>
<p>与之对应的，<code>systemctl disable</code>命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。</p>
<p>配置文件的后缀名，就是该 Unit 的种类，比如<code>sshd.socket</code>。如果省略，Systemd 默认后缀名为<code>.service</code>，所以<code>sshd</code>会被理解成<code>sshd.service</code></p>
<h3 id="1配置文件的状态">1.配置文件的状态</h3>
<p><code>systemctl list-unit-files</code>命令用于列出所有配置文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 列出所有配置文件</span>
</span></span><span class="line"><span class="cl">$ systemctl list-unit-files
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出指定类型的配置文件</span>
</span></span><span class="line"><span class="cl">$ systemctl list-unit-files --type<span class="o">=</span>service
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个列表显示每个配置文件的状态，一共有四种。 </p>
<table>
<thead>
<tr>
<th style="text-align:left">状态</th>
<th style="text-align:left">连接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">enabled</td>
<td style="text-align:left">已建立启动链接</td>
</tr>
<tr>
<td style="text-align:left">disabled</td>
<td style="text-align:left">没建立启动链接</td>
</tr>
<tr>
<td style="text-align:left">static</td>
<td style="text-align:left">该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖</td>
</tr>
<tr>
<td style="text-align:left">masked</td>
<td style="text-align:left">该配置文件被禁止建立启动链接</td>
</tr>
</tbody>
</table>
<p>一旦修改配置文件，就要让 <code>SystemD</code> 重新加载配置文件，然后重新启动，否则修改不会生效。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ sudo systemctl daemon-reload
</span></span><span class="line"><span class="cl">$ sudo systemctl restart httpd.service
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="2配置文件的格式">2.配置文件的格式</h2>
<p>配置文件就是普通的文本文件，可以用文本编辑器打开。<br>
systemctl cat 命令可以查看配置文件的内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ systemctl cat atd.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>ATD daemon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>forking
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/atd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如<code>[Unit]</code>。注意，配置文件的区块名和字段名，都是大小写敏感的。</p>
<p>每个区块内部是一些等号连接的键值对。注意，键值对的等号两侧不能有空格。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span>Section<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Directive1</span><span class="o">=</span>value
</span></span><span class="line"><span class="cl"><span class="nv">Directive2</span><span class="o">=</span>value
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="3配置文件的区块">3.配置文件的区块</h2>
<p><code>[Unit]</code>区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。 </p>
<table>
<thead>
<tr>
<th style="text-align:left">区块</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Description</td>
<td style="text-align:left">简短描述</td>
</tr>
<tr>
<td style="text-align:left">Documentation</td>
<td style="text-align:left">文档地址</td>
</tr>
<tr>
<td style="text-align:left">Requires</td>
<td style="text-align:left">当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</td>
</tr>
<tr>
<td style="text-align:left">Wants</td>
<td style="text-align:left">与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</td>
</tr>
<tr>
<td style="text-align:left">BindsTo</td>
<td style="text-align:left">与 Requires 类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</td>
</tr>
<tr>
<td style="text-align:left">Before</td>
<td style="text-align:left">如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</td>
</tr>
<tr>
<td style="text-align:left">After</td>
<td style="text-align:left">如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</td>
</tr>
<tr>
<td style="text-align:left">Conflicts</td>
<td style="text-align:left">这里指定的 Unit 不能与当前 Unit 同时运行</td>
</tr>
<tr>
<td style="text-align:left">Condition&hellip;</td>
<td style="text-align:left">当前 Unit 运行必须满足的条件，否则不会运行</td>
</tr>
<tr>
<td style="text-align:left">Assert&hellip;</td>
<td style="text-align:left">当前 Unit 运行必须满足的条件，否则会报启动失败</td>
</tr>
</tbody>
</table>
<hr>
<p><code>[Install]</code>通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>
<table>
<thead>
<tr>
<th style="text-align:left">区块</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">WantedBy</td>
<td style="text-align:left">它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system 目录下面以 Target 名 + .wants 后缀构成的子目录中</td>
</tr>
<tr>
<td style="text-align:left">RequiredBy</td>
<td style="text-align:left">它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system 目录下面以 Target 名 + .required 后缀构成的子目录中</td>
</tr>
<tr>
<td style="text-align:left">Alias</td>
<td style="text-align:left">当前 Unit 可用于启动的别名</td>
</tr>
<tr>
<td style="text-align:left">Also</td>
<td style="text-align:left">当前 Unit 激活（enable）时，会被同时激活的其他 Unit</td>
</tr>
</tbody>
</table>
<hr>
<p><code>[Service]</code>区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p>
<table>
<thead>
<tr>
<th style="text-align:left">区块</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Type</td>
<td style="text-align:left">定义启动时的进程行为。它有以下几种值。</td>
</tr>
<tr>
<td style="text-align:left">Type=simple</td>
<td style="text-align:left">默认值，执行 ExecStart 指定的命令，启动主进程</td>
</tr>
<tr>
<td style="text-align:left">Type=forking</td>
<td style="text-align:left">以 fork 方式从父进程创建子进程，创建后父进程会立即退出</td>
</tr>
<tr>
<td style="text-align:left">Type=oneshot</td>
<td style="text-align:left">一次性进程，Systemd 会等当前服务退出，再继续往下执行</td>
</tr>
<tr>
<td style="text-align:left">Type=dbus</td>
<td style="text-align:left">当前服务通过 D-Bus 启动</td>
</tr>
<tr>
<td style="text-align:left">Type=notify</td>
<td style="text-align:left">当前服务启动完毕，会通知 Systemd，再继续往下执行</td>
</tr>
<tr>
<td style="text-align:left">Type=idle</td>
<td style="text-align:left">若有其他任务执行完毕，当前服务才会运行</td>
</tr>
<tr>
<td style="text-align:left">ExecStart</td>
<td style="text-align:left">启动当前服务的命令</td>
</tr>
<tr>
<td style="text-align:left">ExecStartPre</td>
<td style="text-align:left">启动当前服务之前执行的命令</td>
</tr>
<tr>
<td style="text-align:left">ExecStartPost</td>
<td style="text-align:left">启动当前服务之后执行的命令</td>
</tr>
<tr>
<td style="text-align:left">ExecReload</td>
<td style="text-align:left">重启当前服务时执行的命令</td>
</tr>
<tr>
<td style="text-align:left">ExecStop</td>
<td style="text-align:left">停止当前服务时执行的命令</td>
</tr>
<tr>
<td style="text-align:left">ExecStopPost</td>
<td style="text-align:left">停止当其服务之后执行的命令</td>
</tr>
<tr>
<td style="text-align:left">RestartSec</td>
<td style="text-align:left">自动重启当前服务间隔的秒数</td>
</tr>
<tr>
<td style="text-align:left">Restart</td>
<td style="text-align:left">定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</td>
</tr>
<tr>
<td style="text-align:left">TimeoutSec</td>
<td style="text-align:left">定义 Systemd 停止当前服务之前等待的秒数</td>
</tr>
<tr>
<td style="text-align:left">Environment</td>
<td style="text-align:left">指定环境变量</td>
</tr>
</tbody>
</table>
<h2 id="target">Target</h2>
<p>启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。</p>
<p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于&quot;状态点&quot;，启动某个 Target 就好比启动到某种状态。</p>
<p>传统的<code>init</code>启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 查看当前系统的所有 Target</span>
</span></span><span class="line"><span class="cl">$ systemctl list-unit-files --type<span class="o">=</span>target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看一个 Target 包含的所有 Unit</span>
</span></span><span class="line"><span class="cl">$ systemctl list-dependencies multi-user.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看启动时的默认 Target</span>
</span></span><span class="line"><span class="cl">$ systemctl get-default
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置启动时的默认 Target</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl set-default multi-user.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，</span>
</span></span><span class="line"><span class="cl"><span class="c1"># systemctl isolate 命令改变这种行为，</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭前一个 Target 里面所有不属于后一个 Target 的进程</span>
</span></span><span class="line"><span class="cl">$ sudo systemctl isolate multi-user.target
</span></span></code></pre></td></tr></table>
</div>
</div><p>它与 init 进程的主要差别如下：</p>
<ul>
<li>默认的 RunLevel（在<code>/etc/inittab</code>文件设置）现在被默认的 Target 取代，位置是<code>/etc/systemd/system/default.target</code>，通常符号链接到<code>graphical.target</code>（图形界面）或者<code>multi-user.target</code>（多用户命令行）。</li>
<li>启动脚本的位置，以前是<code>/etc/init.d</code>目录，符号链接到不同的 <code>RunLevel</code> 目录 （比如<code>/etc/rc3.d、/etc/rc5.d</code>等），现在则存放在<code>/lib/systemd/system</code>和<code>/etc/systemd/system</code>目录。</li>
<li>配置文件的位置，以前 init 进程的配置文件是<code>/etc/inittab</code>，各种服务的配置文件存放在<code>/etc/sysconfig</code>目录。现在的配置文件主要存放在<code>/lib/systemd</code>目录，在<code>/etc/systemd</code>目录里面的修改可以覆盖原始设置。</li>
</ul>
<h2 id="日志管理">日志管理</h2>
<p><code>Systemd</code> 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用<code>journalctl</code>一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是<code>/etc/systemd/journald.conf</code>。
<code>journalctl</code>功能强大，用法非常多。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看内核日志（不显示应用日志）</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -k
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看系统本次启动的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -b
</span></span><span class="line"><span class="cl">$ sudo journalctl -b -0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看上一次启动的日志（需更改设置）</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -b -1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看指定时间的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --since<span class="o">=</span><span class="s2">&#34;2012-10-30 18:17:16&#34;</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --since <span class="s2">&#34;20 min ago&#34;</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --since yesterday
</span></span><span class="line"><span class="cl">$ sudo journalctl --since <span class="s2">&#34;2015-01-10&#34;</span> --until <span class="s2">&#34;2015-01-11 03:00&#34;</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --since 09:00 --until <span class="s2">&#34;1 hour ago&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示尾部的最新10行日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示尾部指定行数的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -n <span class="m">20</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 实时滚动显示最新日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -f
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看指定服务的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl /usr/lib/systemd/systemd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看指定进程的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl <span class="nv">_PID</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看某个路径的脚本的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl /usr/bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看指定用户的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl <span class="nv">_UID</span><span class="o">=</span><span class="m">33</span> --since today
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看某个 Unit 的日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -u nginx.service
</span></span><span class="line"><span class="cl">$ sudo journalctl -u nginx.service --since today
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 实时滚动显示某个 Unit 的最新日志</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -u nginx.service -f
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 合并显示多个 Unit 的日志</span>
</span></span><span class="line"><span class="cl">$ journalctl -u nginx.service -u php-fpm.service --since today
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看指定优先级（及其以上级别）的日志，共有8级</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0: emerg</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1: alert</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2: crit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3: err</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4: warning</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 5: notice</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 6: info</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 7: debug</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -p err -b
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 日志默认分页输出，--no-pager 改为正常的标准输出</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --no-pager
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以 JSON 格式（单行）输出</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -b -u nginx.service -o json
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以 JSON 格式（多行）输出，可读性更好</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl -b -u nginx.serviceqq
</span></span><span class="line"><span class="cl"> -o json-pretty
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示日志占据的硬盘空间</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --disk-usage
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 指定日志文件占据的最大空间</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --vacuum-size<span class="o">=</span>1G
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 指定日志文件保存多久</span>
</span></span><span class="line"><span class="cl">$ sudo journalctl --vacuum-time<span class="o">=</span>1years
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Linux crontab 命令</title>
    <link>https://www.jobcher.com/crontab/</link>
    <pubDate>Tue, 22 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/crontab/</guid>
    <description><![CDATA[<h1 id="linux-crontab-命令">Linux crontab 命令</h1>
<p>Linux <code>crontab</code>是用来<code>定期执行程序</code>的命令。</p>
<ol>
<li><code>系统执行</code>的工作：系统周期性所要执行的工作，如<code>备份系统数据</code>、<code>清理缓存</code></li>
<li><code>个人执行</code>的工作：某个用户定期要做的工作，例如<code>每隔10分钟检查邮件服务器</code>是否有新信，这些工作可由每个用户自行设置</li>
</ol>
<h2 id="语法">语法</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">crontab <span class="o">[</span> -u user <span class="o">]</span> file
</span></span><span class="line"><span class="cl">crontab <span class="o">[</span> -u user <span class="o">]</span> <span class="o">{</span> -l <span class="p">|</span> -r <span class="p">|</span> -e <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>说明：<br>
<code>crontab</code> 是用来让使用者在<code>固定时间或固定间隔执行程序</code>之用，换句话说，也就是类似使用者的时程表。</p>
<p><code>-u user</code> 是指设定指定 <code>user</code> 的时程表，这个前提是你必须要有其<code>权限</code>(比如说是 root)才能够指定他人的时程表。如果不使用 <code>-u user</code> 的话，就是表示<code>设定自己的时程表</code>。</p>
<p>参数说明：</p>
<p><code>-e</code> : <code>执行文字编辑器来设定时程表</code>，内定的文字编辑器是 <code>VI</code>，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 <code>setenv VISUAL joe</code>)<br>
<code>-r</code> : <code>删除</code>目前的时程表<br>
<code>-l</code> : <code>列出</code>目前的时程表</p>
<p>时间格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">f1  f2   f3   f4   f5    program
</span></span><span class="line"><span class="cl">*    *    *    *    *
</span></span><span class="line"><span class="cl">-    -    -    -    -
</span></span><span class="line"><span class="cl"><span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    +----- 星期中星期几 <span class="o">(</span><span class="m">0</span> - 6<span class="o">)</span> <span class="o">(</span>星期天 为0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    +---------- 月份 <span class="o">(</span><span class="m">1</span> - 12<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>    <span class="p">|</span>    +--------------- 一个月中的第几天 <span class="o">(</span><span class="m">1</span> - 31<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>    +-------------------- 小时 <span class="o">(</span><span class="m">0</span> - 23<span class="o">)</span>
</span></span><span class="line"><span class="cl">+------------------------- 分钟 <span class="o">(</span><span class="m">0</span> - 59<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 <code>f1</code> 是表示<code>分钟</code>，<code>f2</code> 表示<code>小时</code>，<code>f3</code> 表示<code>一个月份中的第几日</code>，<code>f4</code> 表示<code>月份</code>，<code>f5</code> 表示<code>一个星期中的第几天</code>。<code>program</code> 表示<code>要执行的程序</code>。
当 <code>f1</code> 为<code> *</code> 时表示<code>每分钟都要执行</code> program，<code>f2</code> 为 <code>*</code> 时表示<code>每小时都要执行程序</code>，其馀类推
当 <code>f1</code> 为 <code>a-b</code> 时表示从<code>第 a 分钟到第 b 分钟</code>这段时间内要<code>执行</code>，<code>f2</code> 为 <code>a-b</code> 时表示从<code>第 a 到第 b 小时</code>都要执行，其馀类推
当 <code>f1</code> 为 <code>*/n</code> 时表示<code>每 n 分钟个时间间隔执行一次</code>，<code>f2</code> 为 <code>*/n</code> 表示<code>每 n 小时个时间间隔执行一次</code>，其馀类推
当 <code>f1</code> 为 <code>a, b, c,...</code> 时表示<code>第 a, b, c,...</code> 分钟要<code>执行</code>，<code>f2</code> 为 <code>a, b, c,...</code> 时表示<code>第 a, b, c...个小时要执行</code>，其馀类推</p>
]]></description>
</item><item>
    <title>linux常用命令</title>
    <link>https://www.jobcher.com/linux1/</link>
    <pubDate>Sat, 12 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/linux1/</guid>
    <description><![CDATA[<h1 id="linux-常用命令">linux 常用命令</h1>
<h2 id="软件操作命令">软件操作命令</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1">#软件包管理器</span>
</span></span><span class="line"><span class="cl">yum
</span></span><span class="line"><span class="cl"><span class="c1"># 安装软件</span>
</span></span><span class="line"><span class="cl">yum install xxxx
</span></span><span class="line"><span class="cl"><span class="c1"># 卸载软件</span>
</span></span><span class="line"><span class="cl">yum remove xxx
</span></span><span class="line"><span class="cl"><span class="c1"># 搜索软件</span>
</span></span><span class="line"><span class="cl">yum search xxx
</span></span><span class="line"><span class="cl"><span class="c1"># 清理缓存</span>
</span></span><span class="line"><span class="cl">yum clean packages
</span></span><span class="line"><span class="cl"><span class="c1"># 列出已安装</span>
</span></span><span class="line"><span class="cl">yum list
</span></span><span class="line"><span class="cl"><span class="c1"># 软件包信息</span>
</span></span><span class="line"><span class="cl">yum info
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="服务器硬件资源和磁盘操作">服务器硬件资源和磁盘操作</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 内存</span>
</span></span><span class="line"><span class="cl">free -h
</span></span><span class="line"><span class="cl"><span class="c1"># 硬盘</span>
</span></span><span class="line"><span class="cl">df -h
</span></span><span class="line"><span class="cl"><span class="c1"># 负载</span>
</span></span><span class="line"><span class="cl">w/top/htop
</span></span><span class="line"><span class="cl"><span class="c1"># 查看cpu</span>
</span></span><span class="line"><span class="cl">cat /proc/cpuinfo
</span></span><span class="line"><span class="cl"><span class="c1"># 查看磁盘</span>
</span></span><span class="line"><span class="cl">fdisk -l
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="文件和文件夹操作命令">文件和文件夹操作命令</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ls</td>
<td style="text-align:left">查看目录下的文件</td>
</tr>
<tr>
<td style="text-align:left">touch</td>
<td style="text-align:left">新建文件</td>
</tr>
<tr>
<td style="text-align:left">mkdir</td>
<td style="text-align:left">新建目录</td>
</tr>
<tr>
<td style="text-align:left">cd</td>
<td style="text-align:left">进入目录</td>
</tr>
<tr>
<td style="text-align:left">rm</td>
<td style="text-align:left">删除文件和目录</td>
</tr>
<tr>
<td style="text-align:left">cp</td>
<td style="text-align:left">复制</td>
</tr>
<tr>
<td style="text-align:left">mv</td>
<td style="text-align:left">移动</td>
</tr>
<tr>
<td style="text-align:left">pwd</td>
<td style="text-align:left">显示路径</td>
</tr>
</tbody>
</table>
<h2 id="系统用户操作命令">系统用户操作命令</h2>
<h2 id="防火墙相关设置">防火墙相关设置</h2>
<h2 id="提权操作-sudo-和文件传输">提权操作 sudo 和文件传输</h2>
]]></description>
</item><item>
    <title>linux基础知识</title>
    <link>https://www.jobcher.com/linux/</link>
    <pubDate>Fri, 11 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/linux/</guid>
    <description><![CDATA[<h1 id="linux-基础知识">linux 基础知识</h1>
<h2 id="1简述-linux-权限划分原则">1、简述 Linux 权限划分原则。</h2>
<ol>
<li>给文件或目录分配权限时，先考虑所有者和所属组</li>
<li>遵循最小化权限，用啥权限给啥权限</li>
<li>修改目录和子文件归属权限，注意递归</li>
<li>文件权限分配是最常用的安全防护手段</li>
</ol>
<h2 id="2当用户-user1对testdir-目录有写和执行权限时该目录下的只读文件-file1-是否可修改和删除">2、当用户 user1，对/testdir 目录有写和执行权限时，该目录下的只读文件 file1 是否可修改和删除？</h2>
<p>对 file1 不能修改也不能删除。（如果对目录有写权限和执行权限，则对 file1 不能修改可以删除）</p>
<h2 id="3如果一个系统没有任何的备份策略请写出一个较为全面合理的备份方案">3、如果一个系统没有任何的备份策略，请写出一个较为全面合理的备份方案！</h2>
<p>增量备份：将相较于前一天增加的内容备份，适合每天改变量较大的数据。<br>
差异备份：将相较于第一天改变的内容备份，适合原始数据量比较大，但是之后改变的比较小，即使中间哪一天的丢了也没事，只要最后一天，和第一天的在就行。</p>
<h2 id="4网站服务器每天产生的日志数量较大请问如何备份">4、网站服务器每天产生的日志数量较大，请问如何备份?</h2>
<ol>
<li>使用 logrotate 滚动日志</li>
<li>split 大文件切分处理</li>
<li>shell 脚本处理日志</li>
</ol>
<h2 id="5简述-raid-0raid-1raid-5-的特点与原理">5、简述 Raid 0、Raid 1、Raid 5 的特点与原理。</h2>
<table>
<thead>
<tr>
<th style="text-align:left">RAID 等级</th>
<th style="text-align:left">最少硬盘</th>
<th style="text-align:left">最大容错</th>
<th style="text-align:left">可用容量</th>
<th style="text-align:left">读取性能</th>
<th style="text-align:left">写入性能</th>
<th style="text-align:left">安全性</th>
<th style="text-align:left">目的</th>
<th style="text-align:left">应用产业</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单一硬盘</td>
<td style="text-align:left">(参考)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">无</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">JBOD</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">n</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">无（同 RAID 0）</td>
<td style="text-align:left">增加容量</td>
<td style="text-align:left">个人（暂时）</td>
<td>存储备份</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">2</td>
<td style="text-align:left">0</td>
<td style="text-align:left">n</td>
<td style="text-align:left">n</td>
<td style="text-align:left">n</td>
<td style="text-align:left">一个硬盘异常，全部硬盘都会异常</td>
<td style="text-align:left">追求最大容量、速度</td>
<td style="text-align:left">视频剪接缓存用途</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">n-1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">n</td>
<td style="text-align:left">1</td>
<td style="text-align:left">高，一个正常即可</td>
<td style="text-align:left">追求最大安全性</td>
<td style="text-align:left">个人、企业备份</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">3</td>
<td style="text-align:left">1</td>
<td style="text-align:left">n-1</td>
<td style="text-align:left">n-1</td>
<td style="text-align:left">n-1</td>
<td style="text-align:left">中下至中</td>
<td style="text-align:left">追求最大容量、最小预算</td>
<td style="text-align:left">个人、小型企业备份</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">4</td>
<td style="text-align:left">2</td>
<td style="text-align:left">n-2</td>
<td style="text-align:left">n-2</td>
<td style="text-align:left">n-2</td>
<td style="text-align:left">中至中高,仅安全性较 RAID 5 高</td>
<td style="text-align:left">同 RAID 5，但较安全</td>
<td style="text-align:left">个人、企业备份</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">4</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">高</td>
<td style="text-align:left">综合 RAID 0/1 优点，理论速度较快</td>
<td style="text-align:left">大型数据库、服务器</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">50</td>
<td style="text-align:left">6</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">高</td>
<td style="text-align:left">提升资料安全</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">60</td>
<td style="text-align:left">8</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">高</td>
<td style="text-align:left">提升资料安全</td>
<td style="text-align:left"></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="6简述-raid6raid-10-的特点与原理">6、简述 Raid6、Raid 10 的特点与原理。</h2>
<p>与 RAID 5 相比，<code>RAID 6</code>增加第二个独立的奇偶校验信息块。两个独立的奇偶系统使用不同的算法，数据的可靠性非常高，<code>任意两块磁盘同时失效时不会影响数据完整性。</code>RAID 6 需要分配给奇偶校验信息更大的磁盘空间和额外的校验计算，相对于 RAID 5 有更大的 IO 操作量和计算量，其“写性能”强烈取决于具体的实现方案，因此<code>RAID 6</code>通常不会通过软件方式来实现，而更可能通过硬件方式实现。<br>
<code>RAID 10</code>是先分割资料再镜像，再将所有硬盘分为两组，<code>视为以RAID 1作为最低组合</code>，然后将每组 RAID 1 视为一个“硬盘”组合为 RAID 0 运作。当<code>RAID 10</code>有一个硬盘受损，其余硬盘会继续运作</p>
<h2 id="7软-raid-与硬-raid-的区别">7、软 Raid 与硬 Raid 的区别？</h2>
<p><code>硬RAID</code>：通过用<code>硬件</code>来实现 RAID 功能的就是硬 RAID，比如：各种 RAID 卡，还有主板集成能够做的 RAID 都是硬 RAID。</p>
<p><code>软RAID</code>：通过用<code>操作系统</code>来完成 RAID 功能的就是软 RAID，比如：在 Linux 操作系统下，用 3 块硬盘做的 RAID5.</p>
<h2 id="8linux-中有许多系统资源需要监管请问有哪些命令可以查看">8、Linux 中有许多系统资源需要监管，请问有哪些命令可以查看？</h2>
<p><code>htop</code> 查看系统信息<br>
<code>free -h</code> 查看内存</p>
<h2 id="9简述-centos-6x-的启动过程">9、简述 CentOS 6.x 的启动过程？</h2>
<ol>
<li>
<p>加电自检，得到<code>BIOS</code>的硬件信息，获取第一个启动设备</p>
</li>
<li>
<p>读取第一个启动设备 MBR 的引导加载程序<code>（grub）</code>的启动信息</p>
</li>
<li>
<p>加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备</p>
</li>
<li>
<p>运行 init 程序</p>
</li>
<li>
<p>运行系统初始化脚本  <code>/etc/rc.d/rc.sysinit</code></p>
</li>
<li>
<p>启动核心的外挂模块</p>
</li>
<li>
<p>init 执行运行各个批处理文件</p>
</li>
<li>
<p>init 执行<code>/etc/rc.d/rc.local</code></p>
</li>
<li>
<p>执行<code>/bin/login</code>程序，等待用户登录</p>
</li>
<li>
<p>登陆之后，打印登陆提示符，并开始 shell 控制主机</p>
</li>
</ol>
<h2 id="10简述-centos-7x-的启动过程">10、简述 CentOS 7.x 的启动过程？</h2>
<ol>
<li>加电后系统固件<code>（system firmware）</code>,也就是 BIOS 或者 UEFI 进行加电测试，初始化部分硬件设备。</li>
<li>系统固件寻找可启动设备。</li>
<li>系统固件从<code>disk</code>上读取<code>boot loader</code>，CentOS7 中的 boot loader 是<code>grub2</code>，之后系统固件把控制权交给<code>boot loader</code>。</li>
<li><code>boot loader</code>从硬盘装载配置文件，向用户显示一个启动选择菜单。</li>
<li>用户选择启动项后，<code>boot loader</code>从硬盘加载选定的内核<code>（kernel）</code>和<code>initramfs</code>到内存中。initramfs 中包括了在启动过程中所需的所有硬件的内核模块（modules）。它的配置文件是 <code>/etc/dracut.conf</code> 。</li>
<li><code>boot loader</code>把启动时传入的参数如<code>rd.break</code>, 还有<code>initramfs</code>在内存中的地址，以及系统的控制权都移交给 kernel。</li>
<li><code>kernel</code>初始化所有硬件，然后从<code>initramfs</code>中执行 <code>/sbin/init</code> 把它作为<code>PID 1</code>. CentOS7 中的<code>init</code>就是<code>systemd</code>。</li>
<li>来自<code>initramfs</code>中的<code>systemd</code>执行所有<code>initrd.target</code>中的<code>unit</code>。把根文件系统 <code>/ 挂载（mount）到 /sysroot</code>.</li>
<li>内核的根文件系统从 initramfs 切换到刚才挂载的<code>/sysroot</code>上后，sysroot 中的 systemd 会重新再执行一次。</li>
<li>systemd 执行<code>default.target</code>, 系统启动完成。</li>
</ol>
<h2 id="11如何进行-linux-系统优化">11、如何进行 Linux 系统优化？</h2>
<p>永久关闭<code>selinux</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">vim /etc/selinux/config
</span></span></code></pre></td></tr></table>
</div>
</div><p>将 SELINUX=enforcing 改为 SELINUX=disabled，保存后退出,重启生效</p>
<p>设定系统<code>runlevel</code>为 3<br>
节约系统资源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">grep 3:initdefault /etc/inittab
</span></span><span class="line"><span class="cl">id:3:initdefault:
</span></span><span class="line"><span class="cl">init <span class="m">3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="12大文件如何删除">12、大文件如何删除？</h2>
<ol>
<li>查看磁盘使用情况，查看是否需要扩容</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">df -h
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>查找大文件，使用 du 定位大文件位置</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 在根目录查找，展示第一层级的目录和文件，倒叙排列 ，展示前10名</span>
</span></span><span class="line"><span class="cl">du -h / --max-depth<span class="o">=</span><span class="m">1</span> <span class="p">|</span> sort -hr <span class="p">|</span> head -n <span class="m">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>删除文件</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 删除文件可以直接用rm -rf 删除</span>
</span></span><span class="line"><span class="cl">rm -rf &lt;文件或目录&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 按时间和名称删除 :找到目录下，超过10天的文件 删除名字后缀为.gz的文件</span>
</span></span><span class="line"><span class="cl">find /目录/* -mtime +10 -name <span class="s2">&#34;*.gz&#34;</span> -exec rm -rf <span class="o">{}</span> <span class="se">\
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="kill-的几种格式有什么区别">kill 的几种格式有什么区别？</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">参数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</td>
</tr>
<tr>
<td style="text-align:left">-a</td>
<td style="text-align:left">当处理当前进程时，不限制命令名和进程号的对应关系</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">指定 kill 命令只打印相关进程的进程号，而不发送任何信号</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">指定发送信号</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">指定用户</td>
</tr>
</tbody>
</table>
<p>列出所有信号名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">kill</span> -l
</span></span></code></pre></td></tr></table>
</div>
</div><p>常用信号</p>
<table>
<thead>
<tr>
<th style="text-align:left">信号</th>
<th style="text-align:left">数字</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HUP</td>
<td style="text-align:left">1</td>
<td style="text-align:left">终端断线</td>
</tr>
<tr>
<td style="text-align:left">INT</td>
<td style="text-align:left">2</td>
<td style="text-align:left">中断（同 Ctrl + C）</td>
</tr>
<tr>
<td style="text-align:left">QUIT</td>
<td style="text-align:left">3</td>
<td style="text-align:left">退出（同 Ctrl + \）</td>
</tr>
<tr>
<td style="text-align:left">TERM</td>
<td style="text-align:left">15</td>
<td style="text-align:left">终止</td>
</tr>
<tr>
<td style="text-align:left">KILL</td>
<td style="text-align:left">9</td>
<td style="text-align:left">强制终止</td>
</tr>
<tr>
<td style="text-align:left">CONT</td>
<td style="text-align:left">18</td>
<td style="text-align:left">继续（与 STOP 相反， fg/bg 命令）</td>
</tr>
<tr>
<td style="text-align:left">STOP</td>
<td style="text-align:left">19</td>
<td style="text-align:left">暂停（同 Ctrl + Z）</td>
</tr>
</tbody>
</table>
<p><code>kill命令</code>可以带信号号码选项，也可以不带。如果没有信号号码，kill 命令就会发出<code>终止信号(15)</code>，这个信号可以被<code>进程捕获</code>，使得进程在<code>退出</code>之前可以<code>清理并释放资源</code>。</p>
]]></description>
</item><item>
    <title>yaml 语法</title>
    <link>https://www.jobcher.com/yaml/</link>
    <pubDate>Thu, 30 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/yaml/</guid>
    <description><![CDATA[<h1 id="yaml-语法">yaml 语法</h1>
<p>我们使用 YAML 是因为它像 XML 或 JSON 是一种利于人们读写的数据格式. 此外在大多数变成语言中有使用 YAML 的库.YAML 语法的基本概述, 它被用来描述一个 playbooks(我们的配置管理语言).</p>
<h1 id="基本的-yaml">基本的 YAML</h1>
<p>对于 Ansible, 每一个 YAML 文件都是从一个列表开始. 列表中的每一项都是一个键值对, 通常它们被称为一个 “哈希” 或 “字典”. 所以, 我们需要知道如何在 YAML 中编写列表和字典.<br>
YAML 还有一个小的怪癖. 所有的 YAML 文件(无论和 Ansible 有没有关系)开始行都应该是 &mdash;. 这是 YAML 格式的一部分, 表明一个文件的开始.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 一个美味水果的列表</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">Apple</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">Orange</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">Strawberry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">Mango</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>iptables 基础知识</title>
    <link>https://www.jobcher.com/iptable/</link>
    <pubDate>Mon, 27 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/iptable/</guid>
    <description><![CDATA[<h1 id="iptables-基础知识">iptables 基础知识</h1>
<p>内核包过滤与 NAT 管理工具.是 linux 系统中在用户空间中运行的运来配置内核防火墙的工具。它可以设置，维护和检查 linux 内核中的 ipv4 包过滤规则和管理网络地址转换（NAT）。<br>
ipatbles 命令仅支持 ipv4，如果使用的 IP 协议是 ipv6 则需要使用专门的管理工具 ip6tables。</p>
<h2 id="常用参数">常用参数</h2>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-t&lt;表&gt;</td>
<td style="text-align:left">指定要操纵的表</td>
</tr>
<tr>
<td style="text-align:left">-A</td>
<td style="text-align:left">向规则链中追加条目</td>
</tr>
<tr>
<td style="text-align:left">-D</td>
<td style="text-align:left">从规则链中删除条目</td>
</tr>
<tr>
<td style="text-align:left">-I</td>
<td style="text-align:left">向规则链中插入条目</td>
</tr>
<tr>
<td style="text-align:left">-R</td>
<td style="text-align:left">替换规则链中的相应条目</td>
</tr>
<tr>
<td style="text-align:left">-L</td>
<td style="text-align:left">显示规则链中的已有条目</td>
</tr>
<tr>
<td style="text-align:left">-F</td>
<td style="text-align:left">清除规则链中的现有条目。不改变规则链的默认目标策略</td>
</tr>
<tr>
<td style="text-align:left">-Z</td>
<td style="text-align:left">清空规则链中的数据包计数器和字节计数器</td>
</tr>
<tr>
<td style="text-align:left">-N</td>
<td style="text-align:left">创建新的用户自定义规则链</td>
</tr>
<tr>
<td style="text-align:left">-P</td>
<td style="text-align:left">定义规则链中的默认目标（策略）</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">显示帮助信息</td>
</tr>
<tr>
<td style="text-align:left">-p&lt;协议&gt;</td>
<td style="text-align:left">指定要匹配的数据包的协议类型</td>
</tr>
<tr>
<td style="text-align:left">-s&lt;源地址&gt;</td>
<td style="text-align:left">指定要匹配的数据包的源 IP 地址</td>
</tr>
<tr>
<td style="text-align:left">-j&lt;目标&gt;</td>
<td style="text-align:left">指定要跳转的目标</td>
</tr>
<tr>
<td style="text-align:left">-i&lt;网络接口&gt;</td>
<td style="text-align:left">指定数据包进入本机的网络接口</td>
</tr>
<tr>
<td style="text-align:left">-o&lt;网络接口&gt;</td>
<td style="text-align:left">指定数据包离开本机做使用的网络接口</td>
</tr>
<tr>
<td style="text-align:left">-c&lt;包计数&gt;</td>
<td style="text-align:left">在执行插入、追加和替换操作时初始化包计数器和字节计数器</td>
</tr>
</tbody>
</table>
<h2 id="参考实例">参考实例</h2>
<p>显示内核当前的 filter 表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">iptables -L
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示内核当前的 nat 表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">iptables -L -t nat
</span></span></code></pre></td></tr></table>
</div>
</div><p>禁止本机对 192.168.20.20 地址的访问：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">iptables -t filter -A OUTPUT -d 192.168.20.20 -j DROP
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示 filter 表的 OUTPUT 链：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">iptables -L OUTPUT -t filter
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>网络基础知识</title>
    <link>https://www.jobcher.com/network/</link>
    <pubDate>Thu, 23 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/network/</guid>
    <description><![CDATA[<h1 id="网络基础知识">网络基础知识</h1>
<h2 id="1简述-isoosi-七层模型的分层与作用">1、简述 ISO/OSI 七层模型的分层与作用</h2>
<table>
<thead>
<tr>
<th style="text-align:left">分层</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">应用层</td>
<td style="text-align:left">应用系统，提供用户服务 例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3</td>
</tr>
<tr>
<td style="text-align:left">表示层</td>
<td style="text-align:left">把数据转换为能与接收者的系统格式兼容并适合传输的格式，数据表示，加密，压缩</td>
</tr>
<tr>
<td style="text-align:left">会话层</td>
<td style="text-align:left">负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。确定数据是否需要进行网络传递 分流网络传递还是本地保存</td>
</tr>
<tr>
<td style="text-align:left">传输层</td>
<td style="text-align:left">对数据分组，对报文进行分组(发送时)、组装(接收时)提供传输协议的选择：TCP (传输控制协议) :可靠的，面向连接的传输协议 (可靠，准确) (慢)UDP (用户数据报协议) :不可靠的，面向无连接的传输协议 (快) (不可靠)。端口封装，差错校验，滑动窗口，留空</td>
</tr>
<tr>
<td style="text-align:left">网络层</td>
<td style="text-align:left">网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成分组。网络表头包含了网络资料。例如:互联网协议（IP）等。1.IP 地址编址 2.路由选择 3.静态路由 4.动态路由</td>
</tr>
<tr>
<td style="text-align:left">数据链路层</td>
<td style="text-align:left">数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。1.MAC 地址编址 2.MAC 地址寻址 3.差错校验</td>
</tr>
<tr>
<td style="text-align:left">物理层</td>
<td style="text-align:left">物理层（Physical Layer）在局域网上发送数据帧（Data Frame）1.数据实际传输 2.电气特性定义</td>
</tr>
</tbody>
</table>
<h2 id="2tcpip-四层模型与作用">2、TCP/IP 四层模型与作用？</h2>
<table>
<thead>
<tr>
<th style="text-align:left">分层</th>
<th style="text-align:left">协议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">应用层</td>
<td style="text-align:left">HTTP、HTTPS、FTP、Telnet、SSH、SMTP、DNS</td>
</tr>
<tr>
<td style="text-align:left">传输层</td>
<td style="text-align:left">TCP、UDP</td>
</tr>
<tr>
<td style="text-align:left">网络层</td>
<td style="text-align:left">ICMP、IGMP、IP、ARP、RARP</td>
</tr>
<tr>
<td style="text-align:left">数据链路层、物理层</td>
<td style="text-align:left">PPP、PPPOE</td>
</tr>
</tbody>
</table>
<h2 id="3tcp-协议与-udp-协议工作在哪一层作用是什么">3、TCP 协议与 UDP 协议工作在哪一层，作用是什么？</h2>
<p>传输层，对报文进行分组(发送时)、组装(接收时)提供<br>
当进程需要传输可靠的数据时应使用 TCP，当进程需要高效传输数据，可以忽略可靠性时应使用 UDP 协议。</p>
<h2 id="4简述-tcp-三次握手的过程">4、简述 TCP 三次握手的过程。</h2>
<p></p>
<ol>
<li>第一次握手：Client 将标志位 SYN 置为 1，随机产生一个值 seq=J，并将该数据包发送给 Server，Client 进入 SYN_SENT 状态，等待 Server 确认。</li>
<li>第二次握手：Server 收到数据包后由标志位 SYN=1 知道 Client 请求建立连接，Server 将标志位 SYN 和 ACK 都置为 1，ack=J+1，随机产生一个值 seq=K，并将该数据包发送给 Client 以确认连接请求，Server 进入 SYN_RCVD 状态。</li>
<li>第三次握手：Client 收到确认后，检查 ack 是否为 J+1，ACK 是否为 1，如果正确则将标志位 ACK 置为 1，ack=K+1，并将该数据包发送给 Server，Server 检查 ack 是否为 K+1，ACK 是否为 1，如果正确则连接建立成功，Client 和 Server 进入 ESTABLISHED 状态，完成三次握手，随后 Client 与 Server 之间可以开始传输数据了。</li>
</ol>
<h2 id="5简述-tcp-包头的内容">5、简述 TCP 包头的内容。</h2>
<p></p>
<ol>
<li>
<p>源端口和目的端口：各占 2 个字节，分别写入源端口和目的端口。IP 地址 + 端口号就可以确定一个进程地址</p>
</li>
<li>
<p>序号/序列号（Sequense Number，SN）：在一个 TCP 连接中传送的字节流中的每一个字节都按顺序编号。该字段表示本报文段所发送的数据的第一个字节的序号。初始序号称为 Init Sequense Number, ISN（序号/序列号这个字段很重要，大家留个印象，下文会详细讲解）
例如，一报文段的序号是 101，共有 100 字节的数据。这就表明：本报文段的数据的第一个字节的序号是 101，最后一个字节的序号是 200。显然，下一个报文段的数据序号应当从 201 开始，即下一个报文段的序号字段值应为 201。</p>
</li>
<li>
<p>确认号 ack：期望收到对方下一个报文段的第一个数据字节的序号。若确认号为 N，则表明：到序号 N-1 为止的所有数据都已正确收到。</p>
</li>
<li>
<p>数据偏移（首部长度）：它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。这个字段实际上是指出 TCP 报文段的首部长度。</p>
</li>
<li>
<p>保留：占 6 位，应置为 0，保留为今后使用。</p>
</li>
<li>
<p>标志位：</p>
<table>
<thead>
<tr>
<th style="text-align:left">标志位</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">URG</td>
<td style="text-align:left">紧急指针（urgent pointer）有效。</td>
</tr>
<tr>
<td style="text-align:left">ACK</td>
<td style="text-align:left">确认序号有效</td>
</tr>
<tr>
<td style="text-align:left">PSH</td>
<td style="text-align:left">接收方应该尽快将这个报文交给应用层。</td>
</tr>
<tr>
<td style="text-align:left">RST</td>
<td style="text-align:left">重置连接。</td>
</tr>
<tr>
<td style="text-align:left">SYN</td>
<td style="text-align:left">发起一个新连接。</td>
</tr>
<tr>
<td style="text-align:left">FIN</td>
<td style="text-align:left">释放一个连接。</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p>不要将确认序号 Ack 与标志位中的 ACK 搞混了。<br>
确认方 Ack=发起方 Req+1，两端配对。</p>
<h2 id="6简述-tcp-四次挥手的过程">6、简述 TCP 四次挥手的过程。</h2>
<p></p>
<ol>
<li>第一次挥手：Client 发送一个 FIN，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。</li>
<li>第二次挥手：Server 收到 FIN 后，发送一个 ACK 给 Client，确认序号为收到序号+1（与 SYN 相同，一个 FIN 占用一个序号），Server 进入 CLOSE_WAIT 状态。</li>
<li>第三次挥手：Server 发送一个 FIN，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。</li>
<li>第四次挥手：Client 收到 FIN 后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给 Server，确认序号为收到序号+1，Server 进入 CLOSED 状态，完成四次挥手。</li>
</ol>
<h2 id="71722214123126该-ip-位于哪个网段该网段拥有多少可用-ip-地址广播地址是什么">7、172.22.141.231/26，该 IP 位于哪个网段？该网段拥有多少可用 IP 地址？广播地址是什么？</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">A类IP 10.1.1.1    标准子网掩码: 255.0.0.0
</span></span><span class="line"><span class="cl">子网掩码二进制: 1111111.00000000.00000000.00000000
</span></span><span class="line"><span class="cl">IP地址前8位是网络地址,后24位是主机地址
</span></span><span class="line"><span class="cl">10.0.0.0-10.255.255.255
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">B类IP 172.16.1.1    标准子网掩码: 255.255.0.0
</span></span><span class="line"><span class="cl">子网掩码二进制: 1111111.11111111.00000000.00000000
</span></span><span class="line"><span class="cl">IP地址前16位是网络地址,后16位是主机地址
</span></span><span class="line"><span class="cl">172.16.0.0-172.31.255.255
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">C类IP 192.168.1.1    标准子网掩码: 255.255.255.0
</span></span><span class="line"><span class="cl">子网掩码二进制:   11111111.1111111.11111111.00000000
</span></span><span class="line"><span class="cl">IP地址前24位是网络地址，后8位是主机地址
</span></span><span class="line"><span class="cl">192.168.0.0-192.168.255.255
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="8简述-ip-地址的分类">8、简述 IP 地址的分类。</h2>
<p>A 类：（1.0.0.0-126.0.0.0）（默认子网掩码：255.0.0.0 或 0xFF000000）</p>
<p>第一个字节为网络号，后三个字节为主机号。该类 IP 地址的最前面为“0”，所以地址的网络号取值于 1~126 之间。</p>
<p>一般用于大型网络。</p>
<p>B 类：（128.1.0.0-191.255.0.0）（默认子网掩码：255.255.0.0 或 0xFFFF0000）</p>
<p>前两个字节为网络号，后两个字节为主机号。该类 IP 地址的最前面为“10”，所以地址的网络号取值于 128~191 之间。</p>
<p>一般用于中等规模网络。</p>
<p>C 类：（192.0.1.0-223.255.255.0）（子网掩码：255.255.255.0 或 0xFFFFFF00</p>
<p>前三个字节为网络号，最后一个字节为主机号。该类 IP 地址的最前面为“110”，所以地址的网络号取值于 192~223 之间。</p>
<p>一般用于小型网络。</p>
<p>D 类：是多播地址。该类 IP 地址的最前面为“1110”，所以地址的网络号取值于 224~239 之间。一般用于多路广播用户[1] 。</p>
<p>E 类：是保留地址。该类 IP 地址的最前面为“1111”，所以地址的网络号取值于 240~255 之间。</p>
<h2 id="9简述私有-ip-地址的作用">9、简述私有 IP 地址的作用。</h2>
<ol>
<li>在全球范围内不具有唯一性，因此不能唯一标识一台联网的计算机。无需担心私有 IP 地址在全球范围内的冲突问题。</li>
<li>私有 IP 地址的路由信息不能对外发布，外部的 IP 数据包无法路由到私有 IP 地址的计算机上。</li>
<li>IP 数据包中的源地址和目的地址是私有 IP 地址的, 不能在 Internet 上的路由器间进行存储转发的操作。</li>
</ol>
]]></description>
</item><item>
    <title>linux服务基础知识</title>
    <link>https://www.jobcher.com/service/</link>
    <pubDate>Wed, 15 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/service/</guid>
    <description><![CDATA[<h1 id="linux-服务基础知识">linux 服务基础知识</h1>
<h2 id="1哪些设置能够提升-ssh-远程管理的安全等级">1、哪些设置能够提升 SSH 远程管理的安全等级</h2>
<h2 id="2ssh-连接时认证时间过长如何解决">2、ssh 连接时认证时间过长如何解决？</h2>
<h2 id="3scp-和-rsync-进行远程文件复制有什么区别">3、scp 和 rsync 进行远程文件复制有什么区别？</h2>
<h2 id="4请描述通过-dhcp-服务器获取-ip-地址的过程">4、请描述通过 DHCP 服务器获取 IP 地址的过程。</h2>
<h2 id="5简单描述-ftp-的主动模式和被动模式的区别">5、简单描述 FTP 的主动模式和被动模式的区别？</h2>
<h2 id="6集群环境中如何保证所有服务器之间的时间误差较小">6、集群环境中，如何保证所有服务器之间的时间误差较小。</h2>
<h2 id="7请描述用户访问网站时-dns-的解析过程">7、请描述用户访问网站时 DNS 的解析过程。</h2>
<h2 id="8解释权威-dns-和递归-dns-的含义并描述智能-dns-的实现原理">8、解释权威 DNS 和递归 DNS 的含义，并描述智能 DNS 的实现原理。</h2>
<h2 id="9公司里有一台服务器需要在上面跑两个网站并且其中一个网站需要更换新域名请问如何处理">9、公司里有一台服务器，需要在上面跑两个网站，并且其中一个网站需要更换新域名，请问如何处理？</h2>
<pre><code>网站1：www.a.com
网站2：www.b.com（旧）
www.d.com（新）
</code></pre>
<h1 id="10简述-apache-的三种工作模式">10、简述 Apache 的三种工作模式？</h1>
<h1 id="11请写出工作中常见的-apache-优化策略">11、请写出工作中常见的 Apache 优化策略。</h1>
<h1 id="12有哪些技术可以提高网站的安全和效率">12、有哪些技术可以提高网站的安全和效率？</h1>
<h1 id="13apache-和-nginx-各有什么优缺点应该如何选择">13、Apache 和 Nginx 各有什么优缺点，应该如何选择？</h1>
<h1 id="14为什么-nginx-的并发能力强资源消耗低">14、为什么 Nginx 的并发能力强，资源消耗低？</h1>
<h1 id="15写出几个-nginx-的常用模块并描述其功能">15、写出几个 Nginx 的常用模块，并描述其功能。</h1>
<h1 id="16请解释-nginx-是如何连接-php-进行页面解析的">16、请解释 Nginx 是如何连接 PHP 进行页面解析的？</h1>
<h1 id="17请描述-nginx-和-tomcat-之间的数据传输过程">17、请描述 Nginx 和 Tomcat 之间的数据传输过程？</h1>
<h1 id="18请写出几个常见的-http-状态码并解释出现原因">18、请写出几个常见的 HTTP 状态码，并解释出现原因。</h1>
]]></description>
</item></channel>
</rss>
