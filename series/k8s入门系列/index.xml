<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>k8s入门系列 - seris - 打工人日志 - jobcher</title>
        <link>https://www.jobcher.com/series/k8s%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97/</link>
        <description>k8s入门系列 - seris - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Tue, 18 Jul 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.jobcher.com/series/k8s%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97/" rel="self" type="application/rss+xml" /><item>
    <title>Ansible部署ceph集群</title>
    <link>https://www.jobcher.com/ansible-ceph/</link>
    <pubDate>Tue, 18 Jul 2023 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/ansible-ceph/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/ceph-logo.png" referrerpolicy="no-referrer">
            </div><h2 id="基础配置">基础配置</h2>
<p>三台环境为centos7.9，以下配置需要在每台机器上执行</p>
<h3 id="配置hosts解析">配置hosts解析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">cat &gt;&gt; /etc/hosts <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">192.168.2.23 node1
</span></span></span><span class="line"><span class="cl"><span class="s">192.168.2.24 node2
</span></span></span><span class="line"><span class="cl"><span class="s">192.168.2.25 node3
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="关闭防火墙和selinux">关闭防火墙和selinux</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl stop firewalld <span class="o">&amp;&amp;</span> systemctl disable firewalld
</span></span><span class="line"><span class="cl">setenforce <span class="m">0</span> <span class="o">&amp;&amp;</span> sed -i <span class="s1">&#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39;</span> /etc/selinux/config
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="分别在三个节点设置主机名">分别在三个节点设置主机名</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hostnamectl set-hostname node1
</span></span><span class="line"><span class="cl">hostnamectl set-hostname node2
</span></span><span class="line"><span class="cl">hostnamectl set-hostname node3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置主机时间同步">配置主机时间同步</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl restart chronyd.service <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable</span> chronyd.service
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置免密登录">配置免密登录</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ssh-keygen
</span></span><span class="line"><span class="cl">ssh-copy-id -i .ssh/id_rsa.pub node1
</span></span><span class="line"><span class="cl">ssh-copy-id -i .ssh/id_rsa.pub node2
</span></span><span class="line"><span class="cl">ssh-copy-id -i .ssh/id_rsa.pub node3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装pip和ansiblegit">安装pip和ansible、git</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install python-pip ansible git -y
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="部署ceph集群">部署ceph集群</h2>
<h3 id="克隆存储库">克隆存储库</h3>
<p>这里我选择安装的是ceph nautilus版本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/ceph/ceph-ansible.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ceph-ansible
</span></span><span class="line"><span class="cl">git checkout stable-4.0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装ansible依赖包">安装ansible依赖包</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip install --upgrade pip
</span></span><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改hosts文件添加安装的节点">修改hosts文件，添加安装的节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">cat &gt;&gt; /etc/ansible/hosts <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">[mons]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">node2
</span></span></span><span class="line"><span class="cl"><span class="s">node3
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[osds]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">node2
</span></span></span><span class="line"><span class="cl"><span class="s">node3
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[mgrs]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[mdss]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">node2
</span></span></span><span class="line"><span class="cl"><span class="s">node3
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[clients]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">node2
</span></span></span><span class="line"><span class="cl"><span class="s">node3
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[rgws]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">node2
</span></span></span><span class="line"><span class="cl"><span class="s">node3
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[grafana-server]
</span></span></span><span class="line"><span class="cl"><span class="s">node1
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="备份group_vars下的yml文件">备份group_vars下的yml文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">cd</span> ceph-ansible/group_vars
</span></span><span class="line"><span class="cl"><span class="k">for</span> file in *<span class="p">;</span><span class="k">do</span> cp <span class="nv">$file</span> <span class="si">${</span><span class="nv">file</span><span class="p">%.*</span><span class="si">}</span><span class="p">;</span><span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改group_varsallyml配置">修改group_vars/all.yml配置</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dummy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">mon_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">mons</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">osd_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">osds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rgw_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">rgws</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">mds_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">mdss</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">client_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">clients</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">mgr_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">mgrs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">grafana_server_group_name</span><span class="p">:</span><span class="w"> </span><span class="l">grafana-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">configure_firewall</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_origin</span><span class="p">:</span><span class="w"> </span><span class="l">repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_origin</span><span class="p">:</span><span class="w"> </span><span class="l">repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_repository</span><span class="p">:</span><span class="w"> </span><span class="l">community</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_mirror</span><span class="p">:</span><span class="w"> </span><span class="l">http://mirrors.aliyun.com/ceph</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_stable_key</span><span class="p">:</span><span class="w"> </span><span class="l">http://mirrors.aliyun.com/ceph/keys/release.asc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_stable_release</span><span class="p">:</span><span class="w"> </span><span class="l">nautilus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ceph_stable_repo</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ ceph_mirror }}/rpm-{{ ceph_stable_release }}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">public_network</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;192.168.2.0/24&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cluster_network</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;192.168.2.0/24&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">monitor_interface</span><span class="p">:</span><span class="w"> </span><span class="l">ens33</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">osd_auto_discovery</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">osd_objectstore</span><span class="p">:</span><span class="w"> </span><span class="l">filestore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">radosgw_interface</span><span class="p">:</span><span class="w"> </span><span class="l">ens33</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dashboard_admin_password</span><span class="p">:</span><span class="w"> </span><span class="l">asd123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">grafana_admin_password</span><span class="p">:</span><span class="w"> </span><span class="l">admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">pg_autoscale_mode</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改group_varsosdsyml配置">修改group_vars/osds.yml配置</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">devices</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">/dev/sdb</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>修改site.yml配置<br>
</p>
<h2 id="开始进行安装">开始进行安装</h2>
<p>剩下的交给时间吧，十分钟左右就装好了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ansible-playbook -i /etc/ansible/hosts site.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看安装状态，发现有一个警告，这是因为在之前的all.yml配置没有开启允许自动调整pool中的pg数 <code>pg_autoscale_mode: False</code> ，手动设置下即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ceph osd pool <span class="nb">set</span> &lt;pool-name&gt; pg_autoscale_mode on
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Kubernetes — 更新证书</title>
    <link>https://www.jobcher.com/k8s16/</link>
    <pubDate>Tue, 15 Nov 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s16/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/k8s.png" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>使用 <code>kubeadm</code> 安装 <code>kubernetes</code> 集群非常方便，但是也有一个比较烦人的问题就是默认的证书有效期只有<code>一年</code>时间，所以需要考虑<code>证书升级</code>的问题</p>
<h2 id="检查证书">检查证书</h2>
<p>由 kubeadm 生成的客户端证书默认只有一年有效期，我们可以通过 check-expiration 命令来检查证书是否过期：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubeadm alpha certs check-expiration
</span></span></code></pre></td></tr></table>
</div>
</div><p>该命令显示 <code>/etc/kubernetes/pki</code> 文件夹中的客户端证书以及 <code>kubeadm</code> 使用的 <code>KUBECONFIG</code> 文件中嵌入的客户端证书的<code>到期时间</code>/<code>剩余时间</code>。</p>
<h2 id="手动更新">手动更新</h2>
<blockquote>
<p>kubeadm alpha certs renew<br>
这个命令用 CA（或者 front-proxy-CA ）证书和存储在 <code>/etc/kubernetes/pki</code> 中的密钥执行更新。<br>
高可用的集群，这个命令需要在所有控制面板节点上执行</p>
</blockquote>
<h3 id="具体执行">具体执行</h3>
<p>接下来我们来更新我们的集群证书，下面的操作都是在 master 节点上进行</p>
<ol>
<li>备份节点</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ mkdir /etc/kubernetes.bak
</span></span><span class="line"><span class="cl">$ cp -r /etc/kubernetes/pki/ /etc/kubernetes.bak
</span></span><span class="line"><span class="cl">$ cp /etc/kubernetes/*.conf /etc/kubernetes.bak
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>备份 etcd 数据目录</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ cp -r /var/lib/etcd /var/lib/etcd.bak
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>执行更新证书的命令</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubeadm alpha certs renew all --config<span class="o">=</span>kubeadm.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>检查更新</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubeadm alpha certs check-expiration
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>更新下 kubeconfig 文件</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubeadm init phase kubeconfig all --config kubeadm.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>覆盖掉原本的 admin 文件</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ mv <span class="nv">$HOME</span>/.kube/config <span class="nv">$HOME</span>/.kube/config.old
</span></span><span class="line"><span class="cl">$ cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">$ chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="7">
<li>重启 kube-apiserver、kube-controller、kube-scheduler、etcd ,查看 apiserver 的证书的有效期</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="p">|</span> openssl s_client -showcerts -connect 127.0.0.1:6443 -servername api 2&gt;/dev/null <span class="p">|</span> openssl x509 -noout -enddate
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>可以看到现在的有效期是一年过后的，证明已经更新成功了。</p>
]]></description>
</item><item>
    <title>Kubernetes — Rook云存储介绍和部署</title>
    <link>https://www.jobcher.com/k8s14/</link>
    <pubDate>Tue, 11 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s14/</guid>
    <description><![CDATA[<h1 id="rook-云存储介绍和部署">Rook 云存储介绍和部署</h1>
<p><code>Rook </code>将<code>分布式存储软件</code>转变为<code>自我管理</code>，<code>自我缩放</code>和<code>自我修复</code>的<code>存储服务</code>。它通过自动化部署，引导、配置、供应、扩展、升级、迁移、灾难恢复、监控和资源管理来实现。 <code>Rook</code> 使用基础的云原生容器管理、调度和编排平台提供的功能来履行其职责。</p>
<p><code>Rook</code> 利用扩展点深入融入<code>云原生环境</code>，为调度、生命周期管理、资源管理、安全性、监控和用户体验提供无缝体验。</p>
<h2 id="部署">部署</h2>
<h3 id="使用-helm-部署">使用 helm 部署</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">helm init -i jimmysong/kubernetes-helm-tiller:v2.8.1
</span></span><span class="line"><span class="cl">helm repo add rook-alpha https://charts.rook.io/alpha
</span></span><span class="line"><span class="cl">helm install rook-alpha/rook --name rook --namespace rook-system
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="直接使用-yaml-文件部署">直接使用 yaml 文件部署</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl apply -f rook-operator.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>不论使用那种方式部署的 rook operator，都会在 rook-agent 中看到 rook-agent 用户无法列出集群中某些资源的错误，可以通过为 rook-agent 的分配 cluster-admin 权限临时解决，详见 <a href="https://github.com/rook/rook/issues/1472" target="_blank" rel="noopener noreffer">Issue 1472</a>。</p>
<p>使用如下 yaml 文件创建一个 <code>ClusterRoleBinding</code> 并应用到集群中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rookagent-clusterrolebinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook-agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">rook-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cluster-admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="部署-rook-cluster">部署 rook cluster</h3>
<p>创建完 <code>rook operator</code> 后，我们再部署 <code>rook cluster</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rook.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">versionTag</span><span class="p">:</span><span class="w"> </span><span class="l">v0.6.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dataDirHostPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">useAllNodes</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">useAllDevices</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storeConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storeType</span><span class="p">:</span><span class="w"> </span><span class="l">bluestore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">databaseSizeMB</span><span class="p">:</span><span class="w"> </span><span class="m">1024</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">journalSizeMB</span><span class="p">:</span><span class="w"> </span><span class="m">1024</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>注意</code>：需要手动指定 <code>versionTag</code>，因为该镜像 <code>repo</code> 中没有 <code>latest</code> 标签，如不指定的话 Pod 将出现镜像拉取错误。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl apply -f rook-cluster.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>rook 集群运行在<code>rook</code> namespace 下，查看 rook 集群中的 pod：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ kubectl -n rook get pod
</span></span><span class="line"><span class="cl">NAME                             READY     STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">rook-api-848df956bf-q6zf2        1/1       Running   <span class="m">0</span>          4m
</span></span><span class="line"><span class="cl">rook-ceph-mgr0-cfccfd6b8-cpk5p   1/1       Running   <span class="m">0</span>          4m
</span></span><span class="line"><span class="cl">rook-ceph-mon0-t496l             1/1       Running   <span class="m">0</span>          6m
</span></span><span class="line"><span class="cl">rook-ceph-mon1-zcn7v             1/1       Running   <span class="m">0</span>          5m
</span></span><span class="line"><span class="cl">rook-ceph-mon3-h97qx             1/1       Running   <span class="m">0</span>          3m
</span></span><span class="line"><span class="cl">rook-ceph-osd-557tn              1/1       Running   <span class="m">0</span>          4m
</span></span><span class="line"><span class="cl">rook-ceph-osd-74frb              1/1       Running   <span class="m">0</span>          4m
</span></span><span class="line"><span class="cl">rook-ceph-osd-zf7rg              1/1       Running   <span class="m">1</span>          4m
</span></span><span class="line"><span class="cl">rook-tools                       1/1       Running   <span class="m">0</span>          2m
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="部署-storageclass">部署 StorageClass</h3>
<p>StorageClass <code>rook-block</code> 的 yaml 文件（rook-storage.yaml）如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rook.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">replicapool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicated</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For an erasure-coded pool, comment out the replication size above and uncomment the following settings.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Make sure you have enough OSDs to support the replica size or erasure code chunks.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#erasureCoded:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  dataChunks: 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  codingChunks: 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">storage.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">StorageClass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook-block</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">provisioner</span><span class="p">:</span><span class="w"> </span><span class="l">rook.io/block</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pool</span><span class="p">:</span><span class="w"> </span><span class="l">replicapool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Specify the Rook cluster from which to create volumes.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># If not specified, it will use `rook` as the name of the cluster.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This is also the namespace where the cluster will be</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clusterName</span><span class="p">:</span><span class="w"> </span><span class="l">rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Specify the filesystem type of the volume. If not specified, it will use `ext4`.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># fstype: ext4</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="工具">工具</h2>
<p>部署 <code>Rook</code> 操作工具 pod，该工具 pod 的 yaml 文件（<code>rook-tools.yaml</code>）如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook-tools</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">rook-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterFirstWithHostNet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">rook-operator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook-tools</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">rook/toolbox:master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ROOK_ADMIN_SECRET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook-ceph-mon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">admin-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/sys/bus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sysbus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/lib/modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">libmodules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mon-endpoint-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/rook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sysbus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/sys/bus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">libmodules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/lib/modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mon-endpoint-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rook-ceph-mon-endpoints</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">endpoint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">mon-endpoints</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>ConfigMap</code> 和 <code>Secret</code> 中的配置项内容是自定义的。
使用下面的命令部署工具 <code>pod</code>：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl apply -f rook-tools.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这是一个独立的 pod，没有使用其他高级的 <code>controller</code> 来管理，我们将它部署在 <code>rook-system</code> 的 <code>namespace</code> 下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl -n rook <span class="nb">exec</span> -it rook-tools bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用下面的命令查看 <code>rook</code> 集群状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ rookctl status
</span></span><span class="line"><span class="cl">OVERALL STATUS: OK
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">USAGE:
</span></span><span class="line"><span class="cl">TOTAL       USED       DATA      AVAILABLE
</span></span><span class="line"><span class="cl">37.95 GiB   1.50 GiB   <span class="m">0</span> B       36.45 GiB
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MONITORS:
</span></span><span class="line"><span class="cl">NAME             ADDRESS                IN QUORUM   STATUS
</span></span><span class="line"><span class="cl">rook-ceph-mon0   10.254.162.99:6790/0   <span class="nb">true</span>        UNKNOWN
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MGRs:
</span></span><span class="line"><span class="cl">NAME             STATUS
</span></span><span class="line"><span class="cl">rook-ceph-mgr0   Active
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">OSDs:
</span></span><span class="line"><span class="cl">TOTAL     UP        IN        FULL      NEAR FULL
</span></span><span class="line"><span class="cl"><span class="m">1</span>         <span class="m">1</span>         <span class="m">1</span>         <span class="nb">false</span>     <span class="nb">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PLACEMENT GROUPS <span class="o">(</span><span class="m">0</span> total<span class="o">)</span>:
</span></span><span class="line"><span class="cl">STATE     COUNT
</span></span><span class="line"><span class="cl">none
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ceph df
</span></span><span class="line"><span class="cl">GLOBAL:
</span></span><span class="line"><span class="cl">    SIZE       AVAIL      RAW USED     %RAW USED
</span></span><span class="line"><span class="cl">    38861M     37323M        1537M          3.96
</span></span><span class="line"><span class="cl">POOLS:
</span></span><span class="line"><span class="cl">    NAME     ID     USED     %USED     MAX AVAIL     OBJECTS
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="示例">示例</h2>
<p>官方提供了使用 Rook 作为典型的 LAMP（<code>Linux + Apache + MySQL + PHP</code>）应用 Wordpress 的存储后端的示例的 yaml 文件 <code>mysql.yaml</code> 和 <code>wordpress.yaml</code>，使用下面的命令创建。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl apply -f mysql.yaml
</span></span><span class="line"><span class="cl">kubectl apply -f wordpress.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="清理">清理</h2>
<p>如果使用 <code>helm</code> 部署，则执行下面的命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">helm delete --purge rook
</span></span><span class="line"><span class="cl">helm delete daemonset rook-agent
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果使用 <code>yaml</code> 文件直接部署，则使用 <code>kubectl delete -f</code> 加当初使用的 <code>yaml</code> 文件即可删除集群。</p>
]]></description>
</item><item>
    <title>Kubernetes — 基于K8S搭建Ceph分布式存储</title>
    <link>https://www.jobcher.com/k8s15/</link>
    <pubDate>Tue, 11 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s15/</guid>
    <description><![CDATA[<h1 id="基于-k8s-搭建-ceph-分布式存储">基于 K8S 搭建 Ceph 分布式存储</h1>
<h2 id="前提">前提</h2>
<ul>
<li>正常运行的多节点 K8S 集群，可以是两个节点也可以是更多。</li>
<li>每一个节点需要一个<code>没有被分区</code>的<code>硬盘</code>，最好大小一致不然会浪费。
没错其实就是一个要求，必须有集群才能进行容器管理，必须有硬盘才能做存储这些都是基础。</li>
</ul>
<h2 id="添加硬盘">添加硬盘</h2>
<table>
<thead>
<tr>
<th style="text-align:left">主机</th>
<th style="text-align:left">IP</th>
<th style="text-align:left">磁盘</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">master01</td>
<td style="text-align:left">10.12.12.51</td>
<td style="text-align:left">SATA 20G</td>
</tr>
<tr>
<td style="text-align:left">master02</td>
<td style="text-align:left">10.12.12.52</td>
<td style="text-align:left">SATA 20G</td>
</tr>
<tr>
<td style="text-align:left">master03</td>
<td style="text-align:left">10.12.12.53</td>
<td style="text-align:left">SATA 20G</td>
</tr>
<tr>
<td style="text-align:left">worker01</td>
<td style="text-align:left">10.12.12.54</td>
<td style="text-align:left">SATA 20G</td>
</tr>
<tr>
<td style="text-align:left">worker02</td>
<td style="text-align:left">10.12.12.55</td>
<td style="text-align:left">SATA 20G</td>
</tr>
</tbody>
</table>
<p></p>
<blockquote>
<p>在 5 个节点都加 20g 存储</p>
</blockquote>
<h3 id="重启-k8s-节点">重启 k8s 节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl cordon &lt;节点&gt;
</span></span><span class="line"><span class="cl">kubectl drain &lt;节点&gt; --ignore-daemonsets --delete-emptydir-data
</span></span><span class="line"><span class="cl"><span class="c1"># 虚拟机重启后</span>
</span></span><span class="line"><span class="cl">kubectl uncordon &lt;节点&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看新增存储">查看新增存储</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">fdisk -l
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>看到新增 20g 存储,不要格式化分区硬盘！！！</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Disk /dev/sdb: <span class="m">20</span> GiB, <span class="m">21474836480</span> bytes, <span class="m">41943040</span> sectors
</span></span><span class="line"><span class="cl">Disk model: QEMU HARDDISK
</span></span><span class="line"><span class="cl">Units: sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
</span></span><span class="line"><span class="cl">Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
</span></span><span class="line"><span class="cl">I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rook-自动创建">ROOK 自动创建</h2>
<p></p>
<ul>
<li>Rook 是一个开源的<code>cloud-native storage</code>编排, 提供平台和框架；为各种存储解决方案提供平台、框架和支持，以便与云原生环境本地集成。</li>
<li>Rook 将存储软件转变为自我管理、自我扩展和自我修复的存储服务，它通过自动化部署、引导、配置、置备、扩展、升级、迁移、灾难恢复、监控和资源管理来实现此目的。</li>
<li>Rook 使用底层云本机容器管理、调度和编排平台提供的工具来实现它自身的功能。</li>
<li>Rook 目前支持<code>Ceph</code>、<code>NFS</code>、<code>Minio Object Store</code>和<code>CockroachDB</code>。</li>
<li>Rook 使用<code>Kubernetes</code>原语使<code>Ceph存储系统</code>能够在<code>Kubernetes</code>上运行。</li>
</ul>
<h3 id="下载">下载</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/rook/rook.git
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装">安装</h3>
]]></description>
</item><item>
    <title>Kubernetes — 探针和生命周期</title>
    <link>https://www.jobcher.com/k8s13/</link>
    <pubDate>Sat, 08 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s13/</guid>
    <description><![CDATA[<h1 id="kubernetes--探针和生命周期">Kubernetes — 探针和生命周期</h1>
<p>用于判断容器内应用程序是否已经启动。</p>
<ul>
<li>存活（Liveness）探针
<ul>
<li>用于探测容器是否运行，如果探测失败，kubelet 会根据配置的重启策略进行相应的处理，若没有配置探针该返回值默认为 success</li>
</ul>
</li>
<li>就绪（Readiness）探针
<ul>
<li>用于探测容器内的程序是否健康，如果返回值为 success，那么代表这个容器已经完全启动，并且程序已经是可以接受流量的状态</li>
</ul>
</li>
<li>启动（Startup）探针
<ul>
<li>用于探测容器是否启动，如果配置了 startup 就会先禁止其他探测，直到它成功，成功后将不在运行探测</li>
</ul>
</li>
</ul>
<h2 id="pod-检测方式">Pod 检测方式</h2>
<ul>
<li>ExecAction：在容器执行一个命令，返回值为 0，则认为容器健康</li>
<li>TCPSocketAction：通过 TCP 连接检查容器是否联通，通的话，则认为容器正常</li>
<li>HTTPGetAction：通过应用程序暴露的 API 地址来检查程序是否正常的，如果状态码为 200-400 之间，则认为容器健康</li>
<li>gRPCAction：通过 gRPC 的检查机制，判断容器是不是正常</li>
</ul>
<h2 id="startupprobe-启动探针">StartupProbe 启动探针</h2>
<p>有时候，会有一些现有的应用在启动时需要<code>较长的初始化时间</code>。 要这种情况下，若要不影响对<code>死锁</code>作出快速响应的探测，设置存活探测参数是要技巧的。 技巧就是使用相同的命令来设置启动探测，针对 HTTP 或 TCP 检测，可以通过将 <code>failureThreshold * periodSeconds</code> 参数设置为足够长的时间来应对糟糕情况下的启动时间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">liveness-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">liveness-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">startupProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="l">liveness-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>幸亏有启动探测，应用程序将会有最多 <code>5 分钟（30 * 10 = 300s）</code>的时间来完成其启动过程。 一旦启动探测成功一次，存活探测任务就会接管对容器的探测，对容器死锁作出快速响应。 如果启动探测一直没有成功，容器会在 300 秒后被杀死，并且根据<code>restartPolicy</code>来执行进一步处置。</p>
<h2 id="livenessprobe-存活探针">LivenessProbe 存活探针</h2>
<h3 id="execaction">ExecAction</h3>
<p>许多长时间运行的应用最终会进入损坏状态，除非重新启动，否则无法被恢复。 <code>Kubernetes</code> 提供了存活探针来发现并处理这种情况。<br>
在本练习中，你会创建一个 <code>Pod</code>，其中运行一个基于 <code>registry.k8s.io/busybox</code> 镜像的容器。 下面是这个 <code>Pod</code> 的配置文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">test</span><span class="p">:</span><span class="w"> </span><span class="l">liveness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">liveness-exec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">liveness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">/bin/sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- -<span class="l">c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">cat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">/tmp/healthy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这个配置文件中，可以看到 <code>Pod</code> 中只有一个 <code>Container</code>。 <code>periodSeconds</code> 字段指定了 <code>kubelet</code> 应该每 <code>5</code> 秒执行一次存活探测。 <code>initialDelaySeconds</code> 字段告诉 <code>kubelet</code> 在执行第一次探测前应该等待 <code>5</code> 秒。 kubelet 在容器内执行命令 <code>cat /tmp/healthy</code> 来进行探测。 如果命令执行成功并且返回值为 <code>0</code>，<code>kubelet</code> 就会认为这个容器是健康存活的。 如果这个命令返回<code>非 0</code> 值，<code>kubelet</code> 会杀死这个容器并重新启动它。</p>
<p>当容器启动时，执行如下的命令：</p>
<blockquote>
<p>/bin/sh -c &ldquo;touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600&rdquo;</p>
</blockquote>
<p>这个容器生命的前 30 秒，<code>/tmp/healthy</code> 文件是存在的。 所以在这最开始的 30 秒内，执行命令 <code>cat /tmp/healthy</code> 会返回成功代码。 30 秒之后，执行命令 <code>cat /tmp/healthy</code> 就会返回失败代码。<br>
在 30 秒内，查看 Pod 的事件：</p>
<blockquote>
<p>kubectl describe pod liveness-exec</p>
</blockquote>
<h3 id="httpgetaction">HTTPGetAction</h3>
<p>另外一种类型的存活探测方式是使用 <code>HTTP GET</code> 请求。 下面是一个 <code>Pod</code> 的配置文件，其中运行一个基于 <code>registry.k8s.io/liveness</code> 镜像的容器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">test</span><span class="p">:</span><span class="w"> </span><span class="l">liveness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">liveness-http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">liveness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/liveness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">/server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpHeaders</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Custom-Header</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">Awesome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这个配置文件中，你可以看到 <code>Pod</code> 也只有一个容器。 <code>periodSeconds</code> 字段指定了 <code>kubelet</code> 每隔 3 秒执行一次存活探测。 <code>initialDelaySeconds</code> 字段告诉 <code>kubelet</code> 在执行第一次探测前应该等待 3 秒。 <code>kubelet</code> 会向容器内运行的服务（服务在监听 <code>8080 端口</code>）发送一个 <code>HTTP GET</code> 请求来执行探测。 如果服务器上 <code>/healthz</code> 路径下的处理程序返回成功代码，则 <code>kubelet</code> 认为容器是健康存活的。 如果处理程序返回失败代码，则 <code>kubelet</code> 会杀死这个容器并将其重启。</p>
<p>返回大于或等于 <code>200</code> 并且小于 <code>400</code> 的任何代码都标示成功，其它返回代码都标示失败。</p>
<p>你可以访问 <code>server.go</code>。 阅读服务的源码。 容器存活期间的最开始 <code>10 秒中</code>，<code>/healthz</code> 处理程序返回 <code>200</code> 的状态码。 之后处理程序返回 <code>500</code> 的状态码。</p>
<h3 id="tcpsocketaction">TCPSocketAction</h3>
<p>第三种类型的存活探测是使用 <code>TCP 套接字</code>。 使用这种配置时，<code>kubelet</code> 会尝试在指定端口和容器建立套接字链接。 如果<code>能建立连接</code>，这个容器就被看作是<code>健康</code>的，如果<code>不能</code>则这个容器就被看作是<code>有问题</code>的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">goproxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">goproxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">goproxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/goproxy:0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tcpSocket</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tcpSocket</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如是汝闻，<code>TCP 检测</code>的配置和 <code>HTTP 检测</code>非常相似。 下面这个例子同时使用就绪和存活探针。<code>kubelet</code> 会在容器启动 <code>5 秒</code>后发送第一个就绪探针。 探针会尝试连接 <code>goproxy</code> 容器的 8080 端口。 如果探测成功，这个 <code>Pod</code> 会被标记为就绪状态，kubelet 将继续每隔 <code>10 秒</code>运行一次探测。</p>
<p>除了就绪探针，这个配置包括了一个存活探针。 <code>kubelet</code> 会在容器启动 <code>15 秒</code>后进行第一次存活探测。 与就绪探针类似，存活探针会尝试连接 <code>goproxy 容器</code>的 <code>8080 端口</code>。 如果存活探测失败，容器会被重新启动。</p>
<h3 id="grpcaction">gRPCAction</h3>
<p>如果你的应用实现了 gRPC 健康检查协议， <code>kubelet</code> 可以配置为使用该协议来执行应用存活性检查。 你必须启用 <code>GRPCContainerProbe</code> 特性门控 才能配置依赖于 <code>gRPC 的检查机制</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">etcd-with-grpc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">etcd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/etcd:3.5.1-0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;/usr/local/bin/etcd&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;--data-dir&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;/var/lib/etcd&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;--listen-client-urls&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;http://0.0.0.0:2379&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;--advertise-client-urls&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;http://127.0.0.1:2379&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;--log-level&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="s2">&#34;debug&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>要使用 <code>gRPC 探针</code>，必须<code>配置 port 属性</code>。如果健康状态端点配置在非默认服务之上， 你还必须设置 <code>service 属性</code>。</p>
<p>在 <code>Kubernetes 1.23</code> 之前，<code>gRPC 健康探测</code>通常使用 <code>grpc-health-probe</code> 来实现，如博客 <code>Health checking gRPC servers on Kubernetes</code>（对 <code>Kubernetes</code> 上的 <code>gRPC 服务器</code>执行健康检查）所描述。 内置的 <code>gRPC 探针</code>行为与 <code>grpc-health-probe</code> 所实现的行为类似。 从 <code>grpc-health-probe</code> 迁移到内置探针时，请注意以下差异：</p>
<p>内置探针运行时针对的是 Pod 的 IP 地址，不像 <code>grpc-health-probe</code> 那样通常针对 127.0.0.1 执行探测； 请一定配置你的 gRPC 端点使之监听于 Pod 的 IP 地址之上。
内置探针不支持任何身份认证参数（例如 -tls）。
对于内置的探针而言，不存在错误代码。所有错误都被视作探测失败。
如果 <code>ExecProbeTimeout</code> 特性门控被设置为 <code>false</code>，则 <code>grpc-health-probe</code> 不会考虑 <code>timeoutSeconds</code> 设置状态（默认值为 1s）， 而内置探针则会在超时时返回失败。</p>
<h2 id="readinessprobe-就绪探针">ReadinessProbe 就绪探针</h2>
<p>有时候，应用会暂时性地无法为请求提供服务。 例如，应用在启动时可能需要加载大量的数据或配置文件，或是启动后要依赖等待外部服务。 在这种情况下，<code>既不想杀死应用</code>，也不想给它发送请求。 <code>Kubernetes</code> 提供了就绪探针来发现并缓解这些情况。 容器所在 Pod 上报还未就绪的信息，并且不接受通过 <code>Kubernetes Service</code> 的流量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">cat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/tmp/healthy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Kubernetes — 开放标准（OCI、CRI、CNI、CSI、SMI、CPI）概述</title>
    <link>https://www.jobcher.com/k8s12/</link>
    <pubDate>Fri, 07 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s12/</guid>
    <description><![CDATA[<h1 id="kubernetes--开放标准ocicricnicsismicpi概述">Kubernetes — 开放标准（OCI、CRI、CNI、CSI、SMI、CPI）概述</h1>
<p>什么是 Kubernetes 开放标准？— K8s 开放标准简介<br>
<code>开放标准</code>有助于和补充像 <code>Kubernetes</code> 这样的系统，Kubernetes 是用于<code>编排容器</code>的事实上的标准平台。开放标准定义了实施 <code>Kubernetes</code> 的<code>最佳实践</code>，并在支持此实施方面发挥着至关重要的作用。开放标准由开源 <code>Kubernetes 社区</code>而非某个特定供应商制定，以确保更高的效率、避免供应商锁定以及更轻松地将其他软件集成到技术堆栈中。<br>
</p>
<h2 id="oci">OCI</h2>
<p>容器开放接口规范，由多家公司共同组成于 2015 年 6 月成立的项目（Docker, Google, CoreOS 等公司），并由 Linux 基金会运行管理，旨在围绕容器格式和运行时制定一个开放的工业化标准，目前主要有两个标准文档：容器运行时标准 （runtime spec）和 容器镜像标准（image spec）</p>
<ul>
<li><code>OCI</code> 是一个开放的治理结构，其明确目的是围绕容器格式和运行时创建开放的行业标准。</li>
<li>它提供了必须由容器运行时引擎实现的规范。两个重要的规格是：
<ul>
<li><code>runC</code>：种子容器运行时引擎。大多数现代容器运行时环境都使用 <code>runC</code> 并围绕这个种子引擎开发附加功能。</li>
<li>这种低级运行时用于启动容器的各种工具，包括 <code>Docker</code> 本身。</li>
</ul>
</li>
<li><code>OCI 规范</code>：关于如何运行、构建和分发容器的映像、运行时和分发规范。</li>
<li>虽然 <code>Docker</code> 经常与容器技术同步使用，但社区一直致力于 OCI 的开放行业标准。</li>
</ul>
<h3 id="image-spec">Image-Spec</h3>
<ul>
<li>image-spec 定义了如何构建和打包容器镜像。</li>
<li>本规范的目标是创建可互操作的工具，用于构建、传输和准备要运行的容器映像。</li>
</ul>
<h3 id="runtime-spec">Runtime-Spec</h3>
<ul>
<li><code>runtime-spec</code> 指定容器的配置、执行环境和生命周期。</li>
<li>这概述了如何运行在磁盘上解压的“文件系统包(filesystem bundle)”。概括地说，OCI 实现会下载一个 OCI 映像，然后将该映像解压缩到一个 OCI 运行时文件系统包中。</li>
</ul>
<h3 id="distribution-spec">Distribution-Spec</h3>
<p><code>Distribution-Spec</code> 提供了一个标准，用于一般内容的分发，特别是容器图像的分发。它是 OCI 项目的<code>最新补充</code>。
实现分发规范的容器注册表为容器映像提供可靠、高度可扩展、安全的存储服务。
客户要么使用云提供商实施、供应商实施，要么使用分发的开源实施。</p>
<h2 id="cri">CRI</h2>
<p><code>CRI</code>（Container Runtime Interface）：容器运行时接口，提供计算资源。​ ​kubernetes1.5​​ 版本之后，kubernetes 项目推出了自己的运行时接口 api–CRI(container runtime interface)。</p>
<ul>
<li><code>CRI</code> 是关于如何在容器编排系统中实现容器运行时的规范。它在容器运行时的集成之上提供了一个抽象层。</li>
<li>它是一个插件接口，使 <code>kubelet</code> 能够使用各种容器运行时。 CRI 的核心机制是每个容器项目都可以自己实现一个 <code>CRI shim</code> 并自己处理 CRI 请求。
<blockquote>
<p>为了允许使用 Docker 以外的其他容器运行时，Kubernetes 在 2016 年引入了 CRI。</p>
</blockquote>
</li>
</ul>
<h3 id="docker">Docker</h3>
<ul>
<li><code>Docker</code> 长期以来一直是标准，但从未真正为容器编排而生。</li>
<li>它是数百万正在构建容器化应用程序的开发人员的首选。
<blockquote>
<p>使用 Docker 作为 Kubernetes 的运行时已被弃用，并将在 Kubernetes 1.23 中删除。</p>
</blockquote>
</li>
</ul>
<h3 id="containerd">containerd</h3>
<ul>
<li><code>containerd</code> 是运行容器的轻量级和高性能实现。</li>
<li>它被所有主要的云提供商用于 <code>Kubernetes</code> 即服务产品。</li>
<li>使用 <code>containerd</code> 创建容器比使用 Docker 简单得多。它最近越来越受欢迎。</li>
</ul>
<h3 id="cri-o">CRI-O</h3>
<ul>
<li><code>CRI-O</code> 是 <code>Kubernetes CRI</code> 的一种实现，可以使用 <code>OCI</code> 兼容的运行时。它是使用 <code>Docker</code> 作为 <code>Kubernetes</code> 运行时的轻量级替代方案。</li>
<li>它由 <code>Red Hat</code> 创建，并具有与 <code>podman</code> 和 <code>buildah</code> 密切相关的类似代码库。
<blockquote>
<p><code>containerd</code> 和 <code>CRI-O</code> 的想法非常简单：提供一个只包含运行容器的绝对必需品的运行时。</p>
</blockquote>
</li>
</ul>
<h2 id="cni">CNI</h2>
<p><code>CNI</code>（Container Network Interface）：容器网络接口，提供网络资源。是和 CoreOS 主导制定的容器网络标准，它本身并不是实现或者代码，可以理解成一个协议。CNI 旨在为容器平台提供网络的标准化。容器平台可以从 CNI 获取到满足网络互通条件的网络参数(如 IP 地址、网关、路由、DNS 等)。</p>
<ul>
<li><code>CNI</code> 是关于如何<code>为容器实现网络的标准</code>，可用于编写或配置网络插件，并且可以很容易地在各种容器编排平台中交换不同的插件。</li>
<li>每个 <code>CNI 插件</code>都必须实现为由<code>容器管理系统</code>调用的可执行文件。 CNI 插件负责将网络接口插入容器网络命名空间并在主机上进行任何必要的更改。然后它应该将 IP 分配给接口，并通过调用适当的 IPAM 插件来设置与 IP 地址管理部分一致的路由。</li>
<li><code>Kubernetes</code> 支持各种不同的网络解决方案和插件，可以在各种不同的环境中实现 Kubernetes 网络。请参阅下面的一些 CNI 实现：</li>
</ul>
<h3 id="calico">Calico</h3>
<ul>
<li><code>Calico</code> 是另一个可用于 Kubernetes 生态系统的流行开源 CNI 插件。 <code>Calico</code> 由 Tigera 维护，定位于网络性能、灵活性和功率等因素至关重要的环境。</li>
<li>与 <code>Flannel</code> 不同，<code>Calico</code> 提供高级网络管理安全功能，同时提供主机和 Pod 之间连接的整体概览。</li>
<li>在标准的 Kubernetes 集群上，<code>Calico</code> 可以很容易地部署为每个节点上的 <code>DaemonSet</code>。集群中的每个节点都将安装三个 <code>Calico</code> 组件：<code>Felix</code>、<code>BIRD</code> 和 <code>confd</code>，用于管理多个网络任务。</li>
</ul>
<h3 id="flannel">Flannel</h3>
<ul>
<li><code>Flannel</code> 是一种为容器配置第 3 层网络结构的简单方法，专为 Kubernetes 设计。</li>
<li><code>Flannel</code> 由 CoreOS 开发，是可用于 Kubernetes 的最成熟的开源 CNI 项目之一。</li>
<li>它在每台主机上运行一个名为 <code>flanneld</code> 的小型单一二进制<code>代理</code>，并负责从更大的预配置地址空间中为每台主机分配子网租约。</li>
</ul>
<h3 id="cilium">Cilium</h3>
<ul>
<li><code>Cilium</code> 是由 Linux 内核开发人员开发的开源、高度可扩展的 <code>Kubernetes CNI</code> 解决方案。</li>
<li>它作为守护进程 <code>cilium-agent</code> 部署在 <code>Kubernetes</code> 集群的每个节点上，以管理操作并将网络定义转换为 <code>eBPF 程序</code>。</li>
<li><code>Pod</code> 之间的通信通过覆盖网络或使用路由协议进行。案例支持 IPv4 和 IPv6 地址。它还通过 HTTP 请求过滤器支持 Kubernetes 网络策略。</li>
</ul>
<h3 id="weavenet">WeaveNet</h3>
<ul>
<li><code>Weavescope</code> 开发的 <code>Weave Net</code> 是一个支持 CNI 的网络解决方案，允许在 Kubernetes 集群中进行灵活的网络连接。</li>
<li>它可以在 <code>Kubernetes</code> 集群上轻松安装和配置为守护程序集，在每个节点上安装必要的网络组件。</li>
<li>它利用内核系统在节点之间传输数据包。内核利用的协议被称为<code>快速数据路径</code>，它将数据包直接传输到目标 pod，而无需多次进出用户空间。</li>
</ul>
<h2 id="csi">CSI</h2>
<p><code>CSI</code>（Container Storage Interface）：容器存储接口，提供存储资源。由 kubernetes、Mesos、Docker 等社区成员联合制定的一个行业标准接口规范，旨在将任意存储系统暴露给容器化应用程序。</p>
<ul>
<li><code>CSI</code> 是关于如何在容器编排系统中实现存储的规范。</li>
<li>它是一种标准，用于将任意块和文件存储系统暴露给 <code>Kubernetes</code> 等容器编排系统上的容器化工作负载。</li>
<li>第三方存储提供商使用 <code>CSI</code> 公开他们的新存储系统变得非常可扩展，而无需实际接触 <code>Kubernetes</code> 代码。</li>
</ul>
<h3 id="请参阅下面的一些-csi-实现">请参阅下面的一些 CSI 实现：</h3>
<ul>
<li>Rook</li>
<li>Ceph</li>
<li>OpenEBS</li>
</ul>
<h2 id="smi">SMI</h2>
<ul>
<li><code>SMI</code>(Service Mesh Interface) : 是关于如何在容器编排系统中实现 Service Mesh 的应用规范，重点关注 Kubernetes 和最常见的服务网格用例的基本功能集，而无需担心锁定。它涵盖了最常见的服务网格功能：</li>
<li>流量策略——跨服务应用身份和传输加密等策略</li>
<li>流量遥测——捕获关键指标，如错误率和服务之间的延迟</li>
<li>流量管理——在不同服务之间转移流量</li>
</ul>
<h3 id="istio">Istio</h3>
<ul>
<li><code>Istio</code> 是一个开源服务网格，它透明地分层到现有的分布式应用程序上。它提供了一种统一且更有效的方式来保护、连接和监控服务。</li>
<li>它是负载平衡、服务到服务身份验证和监控的途径——几乎不需要更改服务代码。</li>
<li><code>Istio</code> 通过<code>分布式</code>或<code>微服务架构</code>解决了开发人员和运营商面临的挑战。</li>
</ul>
<h3 id="linkerd">Linkerd</h3>
<ul>
<li><code>Linkerd</code> 是 <code>Kubernetes</code>的服务网格，它通过为您提供运行时调试、可观察性、可靠性和安全性，使运行服务更容易、更安全——所有这些都不需要对代码进行任何更改。</li>
<li>它通过在每个服务实例旁边安装一组超轻、透明的<code>代理</code>来工作。这些代理会自动处理进出服务的所有流量。</li>
</ul>
<h2 id="cpi">CPI</h2>
<ul>
<li><code>CPI</code> (Cloud Provider Interface) :是关于如何实现 Kubernetes 集群的规范。它将底层云基础设施功能的智能与核心 <code>Kubernetes</code> 分离。</li>
</ul>
<h3 id="请参阅下面的一些-cpi-实现">请参阅下面的一些 CPI 实现：</h3>
<ul>
<li>AWS</li>
<li>Azure</li>
<li>GCP</li>
</ul>
]]></description>
</item><item>
    <title>kubernetes 部署插件 (Flannel、Web UI、CoreDNS、Ingress Controller)</title>
    <link>https://www.jobcher.com/k8s11/</link>
    <pubDate>Fri, 07 Oct 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s11/</guid>
    <description><![CDATA[<h1 id="k8s-部署插件">k8s 部署插件</h1>
<p><code>Kubernetes</code> 是高度可配置且可扩展的。因此，大多数情况下， 你不需要派生自己的 Kubernetes 副本或者向项目代码提交补丁，本文会介绍几种常用的 k8s 插件，如果大家喜欢的话，希望大家点赞支持。</p>
<h2 id="1-flannel-网络插件">1. Flannel 网络插件</h2>
<p><code>Flannel</code>是由 go 语言开发，是一种基于 Overlay 网络的<code>跨主机容器网络解决方案</code>，也就是将<code>TCP数据包</code>封装在另一种网络包里面进行<code>路由转发和通信</code>，Flannel 是 CoreOS 开发，专门用于 docker 多主机互联的一个工具，简单来说，它的功能是<code>让集群中的不同节点主机创建的容器都具有全局唯一的虚拟IP地址</code><br>
主要功能：</p>
<ul>
<li>为每个 node 分配 subnet，容器将自动从该子网中获取 IP 地址</li>
<li>当有 node 加入到网络中时，为每个 node 增加路由配置</li>
</ul>
<p></p>
<h3 id="下载并安装">下载并安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
</span></span><span class="line"><span class="cl">kubectl apply -f kube-flannel.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果 yml 中的&quot;Network&quot;: <code>10.244.0.0/16</code>和<code>kubeadm init xxx --pod-network-cidr</code>不一样，就需要修改成一样的。不然可能会使得<code>Node</code>间<code>Cluster IP</code>不通。</p>
<h2 id="2-ingress-controller">2. Ingress Controller</h2>
<p><code>Ingress</code> 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。<br>
<code>Ingress</code> 可以提供负载均衡、SSL 终结和基于名称的虚拟托管<br>
下面是一个将所有流量都发送到同一 Service 的简单 Ingress 示例：<br>
</p>
<p><code>Ingress</code> 可为 <code>Service</code> 提供外部可访问的 URL、负载均衡流量、终止 SSL/TLS，以及基于名称的虚拟托管。 <code>Ingress 控制器</code> 通常负责通过负载均衡器来实现 Ingress，尽管它也可以配置边缘路由器或其他前端来帮助处理流量。</p>
<p><code>Ingress 不会公开</code>任意端口或协议。 将 <code>HTTP</code> 和 <code>HTTPS</code> 以外的服务公开到 <code>Internet</code> 时，通常使用 <code>Service</code>.<code>Type=NodePort</code> 或 Service.<code>Type=LoadBalancer</code> 类型的 Service</p>
<h3 id="其他">其他</h3>
<p>为了让 <code>Ingress</code> 资源工作，集群必须有一个正在运行的 <code>Ingress 控制器</code>。</p>
<p>与作为 <code>kube-controller-manager</code> 可执行文件的一部分运行的其他类型的控制器不同， Ingress 控制器不是随集群自动启动的。 基于此页面，你可选择最适合你的集群的 ingress 控制器实现。</p>
<h2 id="3-coredns">3. CoreDNS</h2>
<p><code>CoreDNS</code> 是一个灵活可扩展的 <code>DNS 服务器</code>，可以作为 <code>Kubernetes 集群 DNS</code>。 与 Kubernetes 一样，CoreDNS 项目由 CNCF 托管。<br>
在 <code>Kubernetes 1.21</code> 版本中，<code>kubeadm</code> 移除了对将 <code>kube-dns</code> 作为 DNS 应用的支持。 对于 <code>kubeadm v1.25</code>，所支持的唯一的集群 DNS 应用是 <code>CoreDNS</code>。</p>
<p>当你使用 <code>kubeadm</code> 升级使用 <code>kube-dns</code> 的集群时，你还可以执行到 <code>CoreDNS</code> 的迁移。 在这种场景中，<code>kubeadm</code> 将基于 <code>kube-dns ConfigMap</code> 生成 <code>CoreDNS</code> 配置<code>（&quot;Corefile&quot;）</code>， 保存存根域和上游名称服务器的配置。</p>
<p>通过替换现有集群部署中的 <code>kube-dns</code>，或者使用 kubeadm 等工具来为你部署和升级集群， 可以在你的集群中使用 CoreDNS 而非 kube-dns
你必须拥有一个 <code>Kubernetes 的集群</code>，同时你的 Kubernetes 集群必须带有 <code>kubectl 命令行工具</code>。 建议在至少有两个节点的集群上运行本教程，且这些节点不作为控制平面主机。</p>
<h2 id="4-web-ui">4. Web UI</h2>
<p><code>Dashboard</code> 是基于网页的 <code>Kubernetes</code> 用户界面。 你可以使用 <code>Dashboard</code> 将容器应用部署到 <code>Kubernetes</code> 集群中，也可以对容器应用排错，还能管理集群资源。 你可以使用 <code>Dashboard</code> 获取运行在集群中的应用的概览信息，也可以创建或者修改 <code>Kubernetes</code> 资源 （如 <code>Deployment，Job，DaemonSet</code> 等等）。 例如，你可以对 <code>Deployment</code> 实现弹性伸缩、发起滚动升级、重启 <code>Pod</code> 或者使用向导创建新的应用<br>
</p>
<h3 id="安装">安装</h3>
<p>默认情况下不会部署 <code>Dashboard</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1">#https 方式</span>
</span></span><span class="line"><span class="cl">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/recommended.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者 http方式</span>
</span></span><span class="line"><span class="cl">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/alternative.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="暴露外部连接">暴露外部连接</h3>
<p>创建 <code>webUIservice.yaml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">vim webUIservice.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 loadBalancer</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lb.kubesphere.io/v1alpha1</span><span class="p">:</span><span class="w"> </span><span class="l">openelb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol.openelb.kubesphere.io/v1alpha1</span><span class="p">:</span><span class="w"> </span><span class="l">layer2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">eip.openelb.kubesphere.io/v1alpha2</span><span class="p">:</span><span class="w"> </span><span class="l">layer2-eip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">LoadBalancer</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>kubectl apply -f webUIservice.yaml</p>
</blockquote>
<h3 id="创建并获取-token">创建并获取 token</h3>
<p>创建管理员</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl create serviceaccount dashboard-admin -n kube-system
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl create clusterrolebinding dashboard-admin --clusterrole<span class="o">=</span>cluster-admin --serviceaccount<span class="o">=</span>kube-system:dashboard-admin
</span></span></code></pre></td></tr></table>
</div>
</div><p>获取 token</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl describe secrets -n kube-system <span class="k">$(</span>kubectl -n kube-system get secret <span class="p">|</span> grep dashboard-admin <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>kubernetes 存储</title>
    <link>https://www.jobcher.com/k8s10/</link>
    <pubDate>Mon, 01 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s10/</guid>
    <description><![CDATA[<h1 id="kubernetes-存储">kubernetes 存储</h1>
<p>k8s 支持多种途径的多种类型的存储。例如 iSCSI,SMB,NFS，以及对象存储。都是不同类型的部署在云上或者自建数据中心的外部存储系统。k8s 上的所有存储都被称作<code>卷</code></p>
<h2 id="csi-容器存储接口">CSI 容器存储接口</h2>
<p>CSI 是 k8s 存储体系中一部分，是一个开源项目，定义了一套基于标准的接口，从而使容器能够以一种统一的方式被不同的容器编排的工具使用。可以将插件称为<code>provisioner</code></p>
<h2 id="持久化">持久化</h2>
<ul>
<li>持久化卷 （pv）</li>
<li>持久化卷申请 （pvc）</li>
<li>存储类 （sv）</li>
</ul>
<p>PV 代表 k8s 的存储，pvc 代表的是许可证，赋予 pod 访问 pv 的权限。cs 使分配过程是动态的。</p>
<h2 id="使用-iscsi-操作存储">使用 iSCSI 操作存储</h2>
<p><code>iscsi</code> 卷能将 iSCSI (基于 IP 的 SCSI) 卷挂载到你的 Pod 中。 不像 emptyDir 那样会在删除 Pod 的同时也会被删除，iscsi 卷的内容在删除 Pod 时会被保留，卷只是被卸载。 这意味着 iscsi 卷可以被预先填充数据，并且这些数据可以在 Pod 之间共享。<br>
<code>iSCSI</code> 的一个特点是它可以同时被多个用户以只读方式挂载。 这意味着你可以用数据集预先填充卷，然后根据需要在尽可能多的 Pod 上使用它。 不幸的是，iSCSI 卷只能由单个使用者以读写模式挂载。不允许同时写入。</p>
<h3 id="创建-iscsi-pvyaml-iscsi-pvcyaml">创建 iscsi-pv.yaml iscsi-pvc.yaml</h3>
<p>iscsi-pv.yaml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">iscsi-pv</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">capacity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">500Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">iscsi</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPortal</span><span class="p">:</span><span class="w"> </span><span class="m">10.12.12</span><span class="l">.xxx:3260</span><span class="w"> </span><span class="c"># 修改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">iqn</span><span class="p">:</span><span class="w"> </span><span class="l">iqn.2000-01.com.synology:xxx.Target-1.21xxxxx344</span><span class="w"> </span><span class="c"># 修改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lun</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>iscsi-pvc.yaml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">iscsi-pv</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">capacity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">500Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">iscsi</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPortal</span><span class="p">:</span><span class="w"> </span><span class="m">10.12.12</span><span class="l">.xxx:3260</span><span class="w"> </span><span class="c"># 修改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">iqn</span><span class="p">:</span><span class="w"> </span><span class="l">iqn.2000-01.com.synology:xxx.Target-1.21xxxxx344</span><span class="w"> </span><span class="c"># 修改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lun</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="hostpath">hostPath</h2>
<p><code>hostPath</code> 卷能将主机节点文件系统上的文件或目录挂载到你的 <code>Pod</code> 中。 虽然这不是大多数 <code>Pod</code> 需要的，但是它为一些应用程序提供了强大的逃生舱。</p>
<ul>
<li>运行一个需要访问 Docker 内部机制的容器；可使用 <code>hostPath</code> 挂载 <code>/var/lib/docker</code> 路径。</li>
<li>在容器中运行 <code>cAdvisor</code> 时，以 <code>hostPath</code> 方式挂载 <code>/sys</code>。</li>
<li>允许 <code>Pod</code> 指定给定的 <code>hostPath</code> 在运行 <code>Pod</code> 之前是否应该存在，是否应该创建以及应该以什么方式存在。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-pd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/test-webserver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-container</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/test-pd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 宿主上目录位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 此字段为可选</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Directory</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意： <code>FileOrCreate</code> 模式不会负责创建文件的父目录。 如果欲挂载的文件的父目录不存在，Pod 启动会失败。 为了确保这种模式能够工作，可以尝试把文件和它对应的目录分开挂载，如 <code>FileOrCreate</code> 配置 所示。</p>
</blockquote>
<h3 id="hostpath-fileorcreate-配置示例">hostPath FileOrCreate 配置示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-webserver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-webserver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/test-webserver:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/local/aaa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mydir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/local/aaa/1.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">myfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mydir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 确保文件所在目录成功创建。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/var/local/aaa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">DirectoryOrCreate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">myfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/var/local/aaa/1.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">FileOrCreate</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>kubernetes 从1.23.x 升级到 1.24.x</title>
    <link>https://www.jobcher.com/k8s9/</link>
    <pubDate>Wed, 29 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s9/</guid>
    <description><![CDATA[<h1 id="kubernetes-从123x-升级到-124x">kubernetes 从<code>1.23.x</code> 升级到 <code>1.24.x</code></h1>
<p>k8s 在<code>1.24.x</code>之后的版本放弃了和 docker 的兼容，使用 containerd 作为底层的容器，直接参照官方文档的资料进行更新就会报错。因为你没有安装 containerd，所以要安装 containerd 并配置才能正确的升级 k8s<br>
我用的是<code>CentOS7.9</code>的版本，因此以下操作都是在<code>CentOS</code>下操作。</p>
<h2 id="master-节点操作">Master 节点操作</h2>
<h3 id="1升级-kubeadm">1.升级 kubeadm</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install -y kubeadm-1.24.2-0 --disableexcludes<span class="o">=</span>kubernetes
</span></span><span class="line"><span class="cl">kubeadm version
</span></span><span class="line"><span class="cl">kubeadm upgrade plan
</span></span><span class="line"><span class="cl">sudo kubeadm upgrade apply v1.24.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2安装-containerd">2.安装 containerd</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install containerd.io -y
</span></span><span class="line"><span class="cl">containerd config default &gt; /etc/containerd/config.toml
</span></span><span class="line"><span class="cl">vim /var/lib/kubelet/kubeadm-flags.env
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改 kubeadm-flags.env 变量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">KUBELET_KUBEADM_ARGS</span><span class="o">=</span><span class="s2">&#34;--pod-infra-container-image=k8s.gcr.io/pause:3.6 --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3升级-kubelet">3.升级 kubelet</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install -y kubelet-1.24.2-0 kubectl-1.24.2-0 --disableexcludes<span class="o">=</span>kubernetes
</span></span><span class="line"><span class="cl">systemctl daemon-reload <span class="o">&amp;&amp;</span> systemctl restart containerd  <span class="o">&amp;&amp;</span> systemctl restart kubelet
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看状态：</p>
<blockquote>
<p>kubectl get nodes<br>
systemctl status kubelet</p>
</blockquote>
<h2 id="worker-节点操作">Worker 节点操作</h2>
<h3 id="1升级-kubeadm-1">1.升级 kubeadm</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install -y kubeadm-1.24.2-0 --disableexcludes<span class="o">=</span>kubernetes
</span></span><span class="line"><span class="cl">kubeadm version
</span></span><span class="line"><span class="cl">kubeadm upgrade plan
</span></span><span class="line"><span class="cl">sudo kubeadm upgrade node
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2安装-containerd-1">2.安装 containerd</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install containerd.io -y
</span></span><span class="line"><span class="cl">containerd config default &gt; /etc/containerd/config.toml
</span></span><span class="line"><span class="cl">vim /var/lib/kubelet/kubeadm-flags.env
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改 kubeadm-flags.env 变量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">KUBELET_KUBEADM_ARGS</span><span class="o">=</span><span class="s2">&#34;--pod-infra-container-image=k8s.gcr.io/pause:3.6 --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3升级-kubelet-1">3.升级 kubelet</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yum install -y kubelet-1.24.2-0 kubectl-1.24.2-0 --disableexcludes<span class="o">=</span>kubernetes
</span></span><span class="line"><span class="cl">systemctl daemon-reload <span class="o">&amp;&amp;</span> systemctl restart containerd  <span class="o">&amp;&amp;</span> systemctl restart kubelet
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看状态：</p>
<blockquote>
<p>systemctl status kubelet</p>
</blockquote>
<h3 id="4优化的维护节点">4.优化的维护节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 设置为不可调度</span>
</span></span><span class="line"><span class="cl">kubectl cordon &lt;nodename&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 优雅排出容器</span>
</span></span><span class="line"><span class="cl">kubectl drain &lt;nodename&gt; --ignore-daemonsets --delete-emptydir-data
</span></span><span class="line"><span class="cl"><span class="c1"># 确认维护完成之后，恢复正常</span>
</span></span><span class="line"><span class="cl">kubectl uncordon &lt;nodename&gt;
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>编写 kubernetes 资源描述文件</title>
    <link>https://www.jobcher.com/k8s8/</link>
    <pubDate>Mon, 27 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/k8s8/</guid>
    <description><![CDATA[<h1 id="编写-kubernetes-资源描述文件">编写 kubernetes 资源描述文件</h1>
<h3 id="1-部署一个应用">1. 部署一个应用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w"> </span><span class="c">#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w"> </span><span class="c">#该配置的类型，我们使用的是 Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w"> </span><span class="c">#译名为元数据，即 Deployment 的一些基本属性和信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-deployment</span><span class="w"> </span><span class="c">#Deployment 的名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w"> </span><span class="c">#标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w"> </span><span class="c">#为该Deployment设置key为app，value为nginx的标签</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c">#这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c">#使用该Deployment创建一个应用程序实例</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w"> </span><span class="c">#标签选择器，与上面的标签共同作用，目前不需要理解</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w"> </span><span class="c">#选择包含标签app:nginx的资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="c">#这是选择或创建的Pod的模板</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w"> </span><span class="c">#Pod的元数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w"> </span><span class="c">#Pod的标签，上面的selector即选择包含标签app:nginx的Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c">#期望Pod实现的功能（即在pod中部署）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w"> </span><span class="c">#生成container，与docker中的container是同一种</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w"> </span><span class="c">#container的名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:1.7.9</span><span class="w"> </span><span class="c">#使用镜像nginx:1.7.9创建container，该container默认80端口可访问</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>kubectl apply -f xxx.yaml</p>
</blockquote>
<h3 id="2暴露应用">2、暴露应用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-service</span><span class="w"> </span><span class="c">#Service 的名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w"> </span><span class="c">#Service 自己的标签</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w"> </span><span class="c">#为该 Service 设置 key 为 app，value 为 nginx 的标签</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w"> </span><span class="c">#这是关于该 Service 的定义，描述了 Service 如何选择 Pod，如何被访问</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w"> </span><span class="c">#标签选择器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w"> </span><span class="c">#选择包含标签 app:nginx 的 Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-port</span><span class="w"> </span><span class="c">#端口的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w"> </span><span class="c">#协议类型 TCP/UDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w"> </span><span class="c">#集群内的其他容器组可通过 80 端口访问 Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">32600</span><span class="w"> </span><span class="c">#通过任意节点的 32600 端口访问 Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w"> </span><span class="c">#将请求转发到匹配 Pod 的 80 端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w"> </span><span class="c">#Serive的类型，ClusterIP/NodePort/LoaderBalancer</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3扩缩容">3、扩缩容</h3>
<p>修改 deployment.yaml 中的 replicas 属性即可</p>
<p>完成后运行 <code>kubectl apply -f xxx.yaml</code></p>
<h3 id="4滚动升级">4、滚动升级</h3>
<p>修改 deployment.yaml 中的 imageName 属性等</p>
<p>完成后运行 <code>kubectl apply -f xxx.yaml</code></p>
]]></description>
</item></channel>
</rss>
