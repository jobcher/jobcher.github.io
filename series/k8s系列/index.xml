<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>k8s系列 - seris - 打工人日志 - jobcher</title>
        <link>https://www.jobcher.com/series/k8s%E7%B3%BB%E5%88%97/</link>
        <description>k8s系列 - seris - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Wed, 13 Dec 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.jobcher.com/series/k8s%E7%B3%BB%E5%88%97/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes — kubecost 分析 Kubernetes 成本</title>
    <link>https://www.jobcher.com/container/</link>
    <pubDate>Wed, 13 Dec 2023 00:00:00 &#43;0000</pubDate>
    <author>jobcher</author>
    <guid>https://www.jobcher.com/container/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/containerd-horizontal-color.png" referrerpolicy="no-referrer">
            </div><h1 id="containerd">containerd</h1>
<p>现在很多人说起容器都会说到docker，docker凭借镜像（images）快捷的部署，占领了极大的技术市场，docker公司将自己的核心依赖 Contanerd 捐给了 CNCF，这个就是contanerd的由来，containerd 在kubernetes在 v1.24之后的版本作为底层核心进行使用。</p>
<h2 id="containerd架构">Containerd架构</h2>
<p><br>
可以看到 Containerd 仍然采用标准的 <code>C/S</code> 架构，服务端通过 <code>GRPC</code> 协议提供稳定的 <code>API</code>，客户端通过调用服务端的 API 进行高级的操作。
为了解耦，Containerd 将不同的职责划分给不同的组件，每个组件就相当于一个<code>子系统（subsystem）</code>。连接不同子系统的组件被称为模块。
总体上 Containerd 被划分为两个子系统：</p>
<ul>
<li><strong>Bundle</strong> : 在 Containerd 中，Bundle 包含了配置、元数据和根文件系统数据，你可以理解为容器的文件系统。而 Bundle 子系统允许用户从镜像中提取和打包 Bundles。</li>
<li><strong>Runtime</strong> : Runtime 子系统用来执行 Bundles，比如创建容器。</li>
</ul>
<p>其中，每一个子系统的行为都由一个或多个模块协作完成（架构图中的 Core 部分）。每一种类型的模块都以插件的形式集成到 Containerd 中，而且插件之间是相互依赖的。例如，上图中的每一个长虚线的方框都表示一种类型的插件，包括 <code>Service Plugin</code>、<code>Metadata Plugin</code>、<code>GC Plugin</code>、<code>Runtime Plugin</code> 等，其中 Service Plugin 又会依赖 <code>Metadata Plugin</code>、<code>GC Plugin</code> 和 <code>Runtime Plugin</code>。每一个小方框都表示一个细分的插件，例如 Metadata Plugin 依赖 Containers Plugin、Content Plugin 等。 总之，万物皆插件，插件就是模块，模块就是插件。</p>
<h3 id="常用插件">常用插件</h3>
<ul>
<li><strong>Content Plugin</strong> : 提供对镜像中可寻址内容的访问，所有不可变的内容都被存储在这里。</li>
<li><strong>Snapshot Plugin</strong> : 用来管理容器镜像的文件系统快照。镜像中的每一个 layer 都会被解压成文件系统快照，类似于 Docker 中的 graphdriver。</li>
<li><strong>Metrics</strong> : 暴露各个组件的监控指标。</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="卸载docker">卸载docker</h3>
<p>首先要保证环境干净整洁，如果你有安装docker服务，需要先卸载docker，如果没有安装可以跳过</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt-get remove docker docker-engine docker.io containerd runc
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo rm -rf /var/lib/docker
</span></span><span class="line"><span class="cl">sudo rm -rf /var/lib/containerd
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备包环境">准备包环境</h3>
<p>更换软件源，可以参考这篇文章 <a href="https://www.jobcher.com/linux-mirror/" target="_blank" rel="noopener noreffer ">GNU/Linux 一键更换系统软件源脚本</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">bash &lt;<span class="o">(</span>curl -sSL https://www.jobcher.com/ChangeMirrors.sh<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更新apt，允许使用https</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo apt-get updates
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> sudo apt-get install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ca-certificates <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gnupg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    lsb-release
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加docker官方GPG key</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo mkdir -p /etc/apt/keyrings
</span></span><span class="line"><span class="cl">curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span></code></pre></td></tr></table>
</div>
</div><p>设置软件仓库源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装containerd">安装containerd</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 安装containerd</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install -y containerd.io
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 如果是安装docker则执行：</span>
</span></span><span class="line"><span class="cl">sudo apt-get install docker-ce docker-ce-cli containerd.io
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看运行状态</span>
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> containerd
</span></span><span class="line"><span class="cl">systemctl status containerd
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="检查安装">检查安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr version
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="命令">命令</h2>
<p>containerd 相比于docker , 多了namespace概念, 每个image和container 都会在各自的namespace下可见, 目前k8s会使用k8s.io 作为命名空间</p>
<h3 id="查看-images">查看 images</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr image list
</span></span><span class="line"><span class="cl"><span class="c1"># 缩写</span>
</span></span><span class="line"><span class="cl">ctr i list
</span></span><span class="line"><span class="cl">ctr i ls
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="images-打tag">images 打tag</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io i tag pause:3.2 k8s.gcr.io/pause:3.2
</span></span><span class="line"><span class="cl"><span class="c1">#注意: 若新镜像reference 已存在, 需要先删除新reference, 或者如下方式强制替换</span>
</span></span><span class="line"><span class="cl">ctr -n k8s.io i tag --force pause:3.2 k8s.gcr.io/pause:3.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除镜像">删除镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io i rm k8s.gcr.io/pause:3.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拉取镜像">拉取镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io i pull -k k8s.gcr.io/pause:3.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="推送镜像">推送镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io i push -k k8s.gcr.io/pause:3.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="导出镜像">导出镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io i <span class="nb">export</span> pause.tar k8s.gcr.io/pause:3.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="导入镜像">导入镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io i import pause.tar
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看容器相关操作">查看容器相关操作</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr c
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="运行容器">运行容器</h3>
<ul>
<li>–null-io: 将容器内标准输出重定向到/dev/null</li>
<li>–net-host: 主机网络</li>
<li>-d: 当task执行后就进行下一步shell命令,如没有选项,则会等待用户输入,并定向到容器内</li>
<li>–mount 挂载本地目录或文件到容器</li>
<li>–env 环境变量</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io run --null-io --net-host -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>–env <span class="nv">PASSWORD</span><span class="o">=</span><span class="s2">&#34;123456&#34;</span>
</span></span><span class="line"><span class="cl">–mount <span class="nv">type</span><span class="o">=</span>bind,src<span class="o">=</span>/etc,dst<span class="o">=</span>/host-etc,options<span class="o">=</span>rbind:rw
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看日志">查看日志</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr -n k8s.io run --log-uri file:///var/log/xx.log
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ctr和docker比较">ctr和docker比较</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Containerd命令</th>
<th style="text-align:left">Docker命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ctr task ls</td>
<td style="text-align:left">docker ps</td>
<td style="text-align:left">查看运行容器</td>
</tr>
<tr>
<td style="text-align:left">ctr image ls</td>
<td style="text-align:left">docker images</td>
<td style="text-align:left">获取image信息</td>
</tr>
<tr>
<td style="text-align:left">ctr image pull pause</td>
<td style="text-align:left">docker pull pause	pull</td>
<td style="text-align:left">应该pause镜像</td>
</tr>
<tr>
<td style="text-align:left">ctr image push pause-test</td>
<td style="text-align:left">docker push pause-test</td>
<td style="text-align:left">改名</td>
</tr>
<tr>
<td style="text-align:left">ctr image import pause.tar</td>
<td style="text-align:left">docker load 镜像</td>
<td style="text-align:left">导入本地镜像</td>
</tr>
<tr>
<td style="text-align:left">ctr run -d pause-test pause</td>
<td style="text-align:left">docker run -d &ndash;name=pause pause-test</td>
<td style="text-align:left">运行容器</td>
</tr>
<tr>
<td style="text-align:left">ctr image tag pause pause-test</td>
<td style="text-align:left">docker tag pause pause-test</td>
<td style="text-align:left">tag应该pause镜像</td>
</tr>
</tbody>
</table>
<h3 id="crictl-命令">crictl 命令</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 通过在配置文件中设置端点 --config=/etc/crictl.yaml</span>
</span></span><span class="line"><span class="cl">root@k8s-node-0001:~$ cat /etc/crictl.yaml
</span></span><span class="line"><span class="cl">runtime-endpoint: unix:///run/containerd/containerd.sock
</span></span></code></pre></td></tr></table>
</div>
</div><p>列出业务容器状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">crictl inspect ee20ec2346fc5
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看运行中容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl pods
</span></span><span class="line"><span class="cl">POD ID              CREATED             STATE               NAME                                                     NAMESPACE           ATTEMPT             RUNTIME
</span></span><span class="line"><span class="cl">b39a7883a433d       <span class="m">10</span> minutes ago      Ready               canal-server-quark-b477b5d79-ql5l5                       mbz-alpha           <span class="m">0</span>                   <span class="o">(</span>default<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>打印某个固定pod</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl pods --name canal-server-quark-b477b5d79-ql5l5
</span></span><span class="line"><span class="cl">POD ID              CREATED             STATE               NAME                                 NAMESPACE           ATTEMPT             RUNTIME
</span></span><span class="line"><span class="cl">b39a7883a433d       <span class="m">12</span> minutes ago      Ready               canal-server-quark-b477b5d79-ql5l5   mbz-alpha           <span class="m">0</span>                   <span class="o">(</span>default<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>打印镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl images
</span></span><span class="line"><span class="cl">IMAGE                                                          TAG                             IMAGE ID            SIZE
</span></span><span class="line"><span class="cl">ccr.ccs.tencentyun.com/koderover-public/library-docker         stable-dind                     a6e51fd179fb8       74.6MB
</span></span><span class="line"><span class="cl">ccr.ccs.tencentyun.com/koderover-public/library-nginx          stable                          588bb5d559c28       51MB
</span></span><span class="line"><span class="cl">ccr.ccs.tencentyun.com/koderover-public/nsqio-nsq              v1.0.0-compat                   2714222e1b39d       22MB
</span></span></code></pre></td></tr></table>
</div>
</div><p>只打印镜像 ID</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl images -q
</span></span><span class="line"><span class="cl">sha256:a6e51fd179fb849f4ec6faee318101d32830103f5615215716bd686c56afaea1
</span></span><span class="line"><span class="cl">sha256:588bb5d559c2813834104ecfca000c9192e795ff3af473431497176b9cb5f2c3
</span></span><span class="line"><span class="cl">sha256:2714222e1b39d8bd6300da72b0805061cabeca3b24def12ffddf47abd47e2263
</span></span></code></pre></td></tr></table>
</div>
</div><p>打印容器清单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl ps -a
</span></span><span class="line"><span class="cl">CONTAINER           IMAGE               CREATED             STATE               NAME                     ATTEMPT             POD ID
</span></span><span class="line"><span class="cl">ee20ec2346fc5       c769a1937d035       <span class="m">13</span> minutes ago      Running             canal-server             <span class="m">0</span>                   b39a7883a433d
</span></span><span class="line"><span class="cl">76226ddb736be       cc0c524d64c18       <span class="m">34</span> minutes ago      Running             mbz-rescue-manager       <span class="m">0</span>                   2f9d48c49e891
</span></span><span class="line"><span class="cl">e2a19ff0591b4       eb40a52eb437d       About an hour ago   Running             <span class="nb">export</span>                   <span class="m">0</span>                   9844b5ea5fdbc
</span></span></code></pre></td></tr></table>
</div>
</div><p>打印正在运行的容器清单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl ps
</span></span><span class="line"><span class="cl">CONTAINER           IMAGE               CREATED             STATE               NAME                   ATTEMPT             POD ID
</span></span><span class="line"><span class="cl">ee20ec2346fc5       c769a1937d035       <span class="m">13</span> minutes ago      Running             canal-server           <span class="m">0</span>                   b39a7883a433d
</span></span></code></pre></td></tr></table>
</div>
</div><p>容器上执行命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl <span class="nb">exec</span> -i -t ee20ec2346fc5 ls
</span></span><span class="line"><span class="cl">app.sh  bin  canal-server  health.sh  node_exporter  node_exporter-0.18.1.linux-arm64
</span></span></code></pre></td></tr></table>
</div>
</div><p>获取容器的所有日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl logs ee20ec2346fc5
</span></span><span class="line"><span class="cl"><span class="nv">DOCKER_DEPLOY_TYPE</span><span class="o">=</span><span class="nv">VM</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span>&gt; INIT /alidata/init/02init-sshd.sh
</span></span><span class="line"><span class="cl"><span class="o">==</span>&gt; EXIT CODE: <span class="nv">0</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span>&gt; INIT /alidata/init/fix-hosts.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>获取最近的 N 行日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">root@k8s-node-0001:~$ crictl logs --tail<span class="o">=</span><span class="m">2</span> ee20ec2346fc5
</span></span><span class="line"><span class="cl">start canal <span class="nv">successful</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span>&gt; START SUCCESSFUL ...
</span></span></code></pre></td></tr></table>
</div>
</div><p>拉取镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">crictl pull busybox
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置">配置</h2>
<h3 id="生成配置文件">生成配置文件</h3>
<p><code>Containerd</code> 的默认配置文件为 <code>/etc/containerd/config.toml</code>，我们可以通过命令来生成一个默认的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir /etc/containerd
</span></span><span class="line"><span class="cl">containerd config default &gt; /etc/containerd/config.toml
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="镜像加速">镜像加速</h3>
<p>由于某些不可描述的因素，在国内拉取公共镜像仓库的速度是极慢的，为了节约拉取时间，需要为Containerd 配置镜像仓库的 mirror。Containerd 的镜像仓库 mirror 与 Docker 相比有两个区别：</p>
<ul>
<li><code>Containerd</code> 只支持通过 CRI 拉取镜像的 mirror，也就是说，只有通过 crictl 或者 Kubernetes 调用时 mirror 才会生效，通过 ctr 拉取是不会生效的。</li>
<li><code>Docker</code> 只支持为 Docker Hub 配置 mirror，而 Containerd 支持为任意镜像仓库配置 mirror。</li>
</ul>
<h4 id="containerd-的配置结构">Containerd 的配置结构</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[plugins]
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.gc.v1.scheduler&#34;]
</span></span><span class="line"><span class="cl">    pause_threshold = 0.02
</span></span><span class="line"><span class="cl">    deletion_threshold = 0
</span></span><span class="line"><span class="cl">    mutation_threshold = 100
</span></span><span class="line"><span class="cl">    schedule_delay = &#34;0s&#34;
</span></span><span class="line"><span class="cl">    startup_delay = &#34;100ms&#34;
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.grpc.v1.cri&#34;]
</span></span><span class="line"><span class="cl">    disable_tcp_service = true
</span></span><span class="line"><span class="cl">    stream_server_address = &#34;127.0.0.1&#34;
</span></span><span class="line"><span class="cl">    stream_server_port = &#34;0&#34;
</span></span><span class="line"><span class="cl">    stream_idle_timeout = &#34;4h0m0s&#34;
</span></span><span class="line"><span class="cl">    enable_selinux = false
</span></span><span class="line"><span class="cl">    sandbox_image = &#34;k8s.gcr.io/pause:3.1&#34;
</span></span><span class="line"><span class="cl">    stats_collect_period = 10
</span></span><span class="line"><span class="cl">    systemd_cgroup = false
</span></span><span class="line"><span class="cl">    enable_tls_streaming = false
</span></span><span class="line"><span class="cl">    max_container_log_line_size = 16384
</span></span><span class="line"><span class="cl">    disable_cgroup = false
</span></span><span class="line"><span class="cl">    disable_apparmor = false
</span></span><span class="line"><span class="cl">    restrict_oom_score_adj = false
</span></span><span class="line"><span class="cl">    max_concurrent_downloads = 3
</span></span><span class="line"><span class="cl">    disable_proc_mount = false
</span></span><span class="line"><span class="cl">    [plugins.&#34;io.containerd.grpc.v1.cri&#34;.containerd]
</span></span><span class="line"><span class="cl">      snapshotter = &#34;overlayfs&#34;
</span></span><span class="line"><span class="cl">      default_runtime_name = &#34;runc&#34;
</span></span><span class="line"><span class="cl">      no_pivot = false
</span></span><span class="line"><span class="cl">      [plugins.&#34;io.containerd.grpc.v1.cri&#34;.containerd.default_runtime]
</span></span><span class="line"><span class="cl">        runtime_type = &#34;&#34;
</span></span><span class="line"><span class="cl">        runtime_engine = &#34;&#34;
</span></span><span class="line"><span class="cl">        runtime_root = &#34;&#34;
</span></span><span class="line"><span class="cl">        privileged_without_host_devices = false
</span></span><span class="line"><span class="cl">      [plugins.&#34;io.containerd.grpc.v1.cri&#34;.containerd.untrusted_workload_runtime]
</span></span><span class="line"><span class="cl">        runtime_type = &#34;&#34;
</span></span><span class="line"><span class="cl">        runtime_engine = &#34;&#34;
</span></span><span class="line"><span class="cl">        runtime_root = &#34;&#34;
</span></span><span class="line"><span class="cl">        privileged_without_host_devices = false
</span></span><span class="line"><span class="cl">      [plugins.&#34;io.containerd.grpc.v1.cri&#34;.containerd.runtimes]
</span></span><span class="line"><span class="cl">        [plugins.&#34;io.containerd.grpc.v1.cri&#34;.containerd.runtimes.runc]
</span></span><span class="line"><span class="cl">          runtime_type = &#34;io.containerd.runc.v1&#34;
</span></span><span class="line"><span class="cl">          runtime_engine = &#34;&#34;
</span></span><span class="line"><span class="cl">          runtime_root = &#34;&#34;
</span></span><span class="line"><span class="cl">          privileged_without_host_devices = false
</span></span><span class="line"><span class="cl">    [plugins.&#34;io.containerd.grpc.v1.cri&#34;.cni]
</span></span><span class="line"><span class="cl">      bin_dir = &#34;/opt/cni/bin&#34;
</span></span><span class="line"><span class="cl">      conf_dir = &#34;/etc/cni/net.d&#34;
</span></span><span class="line"><span class="cl">      max_conf_num = 1
</span></span><span class="line"><span class="cl">      conf_template = &#34;&#34;
</span></span><span class="line"><span class="cl">    [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry]
</span></span><span class="line"><span class="cl">      [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors]
</span></span><span class="line"><span class="cl">        [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors.&#34;docker.io&#34;]
</span></span><span class="line"><span class="cl">          endpoint = [&#34;https://registry-1.docker.io&#34;]
</span></span><span class="line"><span class="cl">    [plugins.&#34;io.containerd.grpc.v1.cri&#34;.x509_key_pair_streaming]
</span></span><span class="line"><span class="cl">      tls_cert_file = &#34;&#34;
</span></span><span class="line"><span class="cl">      tls_key_file = &#34;&#34;
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.internal.v1.opt&#34;]
</span></span><span class="line"><span class="cl">    path = &#34;/opt/containerd&#34;
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.internal.v1.restart&#34;]
</span></span><span class="line"><span class="cl">    interval = &#34;10s&#34;
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.metadata.v1.bolt&#34;]
</span></span><span class="line"><span class="cl">    content_sharing_policy = &#34;shared&#34;
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.monitor.v1.cgroups&#34;]
</span></span><span class="line"><span class="cl">    no_prometheus = false
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.runtime.v1.linux&#34;]
</span></span><span class="line"><span class="cl">    shim = &#34;containerd-shim&#34;
</span></span><span class="line"><span class="cl">    runtime = &#34;runc&#34;
</span></span><span class="line"><span class="cl">    runtime_root = &#34;&#34;
</span></span><span class="line"><span class="cl">    no_shim = false
</span></span><span class="line"><span class="cl">    shim_debug = false
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.runtime.v2.task&#34;]
</span></span><span class="line"><span class="cl">    platforms = [&#34;linux/amd64&#34;]
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.service.v1.diff-service&#34;]
</span></span><span class="line"><span class="cl">    default = [&#34;walking&#34;]
</span></span><span class="line"><span class="cl">  [plugins.&#34;io.containerd.snapshotter.v1.devmapper&#34;]
</span></span><span class="line"><span class="cl">    root_path = &#34;&#34;
</span></span><span class="line"><span class="cl">    pool_name = &#34;&#34;
</span></span><span class="line"><span class="cl">    base_image_size = &#34;&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>每一个顶级配置块的命名都是 <code>plugins.&quot;io.containerd.xxx.vx.xxx&quot;</code> 这种形式，其实每一个顶级配置块都代表一个插件，其中 <code>io.containerd.xxx.vx</code> 表示插件的类型，<code>vx</code> 后面的 <code>xxx</code> 表示插件的 <code>ID</code>。可以通过 <code>ctr</code> 一览无余：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ctr plugin ls
</span></span></code></pre></td></tr></table>
</div>
</div><p>镜像加速的配置就在 cri 插件配置块下面的 registry 配置块，所以需要修改的部分如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">    [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry]
</span></span><span class="line"><span class="cl">      [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors]
</span></span><span class="line"><span class="cl">        [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors.&#34;docker.io&#34;]
</span></span><span class="line"><span class="cl">          endpoint = [&#34;https://dockerhub.mirrors.nwafu.edu.cn&#34;]
</span></span><span class="line"><span class="cl">        [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors.&#34;k8s.gcr.io&#34;]
</span></span><span class="line"><span class="cl">          endpoint = [&#34;https://registry.aliyuncs.com/k8sxio&#34;]
</span></span><span class="line"><span class="cl">        [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors.&#34;gcr.io&#34;]
</span></span><span class="line"><span class="cl">          endpoint = [&#34;xxx&#34;]
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>registry.mirrors.“xxx”</code> : 表示需要配置 mirror 的镜像仓库。例如，registry.mirrors.&ldquo;docker.io&rdquo; 表示配置 docker.io 的 mirror。</li>
<li><code>endpoint</code> : 表示提供 mirror 的镜像加速服务。例如，这里推荐使用西北农林科技大学提供的镜像加速服务作为 docker.io 的 mirror。</li>
</ul>
<blockquote>
<p>gcr.io 暂时没有公共加速服务，各位可以自己搭建或者找个公共服务</p>
</blockquote>
<h3 id="存储配置">存储配置</h3>
<p>Containerd 有两个不同的存储路径，一个用来保存持久化数据，一个用来保存运行时状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">root</span> <span class="o">=</span> <span class="s2">&#34;/var/lib/containerd&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">state</span> <span class="o">=</span> <span class="s2">&#34;/run/containerd&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>root用来保存持久化数据，包括 Snapshots, Content, Metadata 以及各种插件的数据。每一个插件都有自己单独的目录，Containerd 本身不存储任何数据，它的所有功能都来自于已加载的插件，真是太机智了。</li>
<li>state 用来保存临时数据，包括 sockets、pid、挂载点、运行时状态以及不需要持久化保存的插件数据。</li>
</ul>
<h3 id="oom配置">OOM配置</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nv">oom_score</span> <span class="o">=</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Containerd 是容器的守护者，一旦发生内存不足的情况，理想的情况应该是先杀死容器，而不是杀死 Containerd。所以需要调整 Containerd 的 <code>OOM 权重</code>，减少其被 <code>OOM Kill</code> 的几率。最好是将 oom_score 的值调整为比其他守护进程略低的值。这里的 oom_socre 其实对应的是 <code>/proc/&lt;pid&gt;/oom_socre_adj</code>，在早期的 Linux 内核版本里使用 <code>oom_adj</code> 来调整权重, 后来改用 <code>oom_socre_adj</code> 了<br>
在计算最终的 <code>badness score</code> 时，会在计算结果是中加上 <code>oom_score_adj</code> ,这样用户就可以通过该在值来保护某个进程不被杀死或者每次都杀某个进程。其取值范围为 <code>-1000</code> 到 <code>1000</code>。<br>
如果将该值设置为 <code>-1000</code>，则进程永远不会被杀死，因为此时 <code>badness score</code> 永远返回0。<br>
建议 Containerd 将该值设置为<code>-999</code> 到 <code>0</code>之间。如果作为 Kubernetes 的 Worker 节点，可以考虑设置为 <code>-999</code></p>
<h2 id="nerdctlbuildkitd编译docker镜像">nerdctl+buildkitd编译docker镜像</h2>
<p>Containerd不存在编译镜像的命令，因此我们要找其他工具代替，我们使用nerdctl代替镜像编译</p>
<h3 id="下载">下载</h3>
<p><a href="https://github.com/containerd/nerdctl/releases" target="_blank" rel="noopener noreffer ">代码地址</a><br>
这里我们下载完整版(完整版不仅有 netdctl 命令，还包含了 buildkitd、 buildctl、ctr、runc 等 containerd 相关的命令,如果嫌臃肿可以单独下载安装buildkitd)，amd版，各位可以根据需求下载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">wget https://github.jobcher.com/gh/https://github.com/containerd/nerdctl/releases/download/v1.7.2/nerdctl-full-1.7.2-linux-amd64.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tar -zxvf nerdctl-full-1.7.2-linux-amd64.tar.gz
</span></span><span class="line"><span class="cl">mv nerdctl /usr/bin/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置-1">配置</h3>
<p>完整版的 lib 目录下有现成的 <code>buildkit.service</code> 文件，不过需要注意 <code>buildkitd</code> 命令的路径，文件内默认的路径是 <code>/usr/local/bin/buildkitd</code>，需要把二进制文件放到指定路径下，或者修改文件的默认路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">cp lib/systemd/system/buildkit.service /lib/systemd/system/
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>执行 nerdctl build 需要保证 buildctl 命令在系统 PATH 环境变量中可查</p>
</blockquote>
<h3 id="启动-buildkit">启动 buildkit</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl <span class="nb">enable</span> buildkit.service --now
</span></span></code></pre></td></tr></table>
</div>
</div><p>Dockerfile 测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> alpine:3.16.3</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">TZ</span><span class="o">=</span><span class="s2">&#34;Asia/Shanghai&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;/bin/sleep 315360000&#39;</span> &gt; start.sh<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;sh&#34;</span><span class="p">,</span><span class="s2">&#34;start.sh&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>构建</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">nerdctl build -t alpine:3.16.3-test .
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="登录到私有harbor">登录到私有harbor</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">nerdctl login harbor.dev.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="推送镜像-1">推送镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">nerdctl push harbor.dev.com/test/alpine:3.16.3-test
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
