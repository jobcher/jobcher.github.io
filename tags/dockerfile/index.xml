<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>dockerfile - 标签 - 打工人日志 - jobcher</title>
        <link>http://www.jobcher.com/tags/dockerfile/</link>
        <description>dockerfile - 标签 - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Thu, 09 Dec 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://www.jobcher.com/tags/dockerfile/" rel="self" type="application/rss+xml" /><item>
    <title>docker进阶使用</title>
    <link>http://www.jobcher.com/docker01/</link>
    <pubDate>Thu, 09 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://www.jobcher.com/docker01/</guid>
    <description><![CDATA[<h1 id="docker-进阶使用">docker 进阶使用</h1>
<p>dockerfile和docker compose的配置</p>
<h1 id="dockerfile-使用">Dockerfile 使用</h1>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p>例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    FROM nginx<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    RUN <span class="nb">echo</span> <span class="s1">&#39;这是一个本地构建的nginx镜像&#39;</span> &gt; /usr/share/nginx/html/index.html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>保存Dockerfile文件并在本地路径执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    docker build -t nginx:v1-test .
</span></span><span class="line"><span class="cl">    docker run -name docker run --name nginx-test -d  -p 8080:80 nginx:v1-test
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览nginx页面确认更新内容</p>
<pre><code>curl 127.0.0.1:8080
输出：
这是一个本地构建的nginx镜像
</code></pre>
<h2 id="docker命令详解">Docker命令详解</h2>
<h3 id="copy">COPY</h3>
<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> &lt;源路径1&gt;...  &lt;目标路径&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    COPY <span class="o">[</span>--chown<span class="o">=</span>&lt;user&gt;:&lt;group&gt;<span class="o">]</span> <span class="o">[</span><span class="s2">&#34;&lt;源路径1&gt;&#34;</span>,...  <span class="s2">&#34;&lt;目标路径&gt;&#34;</span><span class="o">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>&lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    COPY hom* /mydir/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    COPY hom?.txt /mydir/<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="from">FROM</h3>
<p>FROM：定制的镜像都是基于 FROM 的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    FROM nginx<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="run">RUN</h3>
<p>RUN：用于执行后面跟着的命令行命令</p>
<p>shell：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    RUN &lt;命令行命令&gt;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c1"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>exec：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    RUN <span class="o">[</span><span class="s2">&#34;可执行文件&#34;</span>, <span class="s2">&#34;参数1&#34;</span>, <span class="s2">&#34;参数2&#34;</span><span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c1"># 例如：</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c1"># RUN [&#34;./test.php&#34;, &#34;dev&#34;, &#34;offline&#34;] 等价于 RUN ./test.php dev offline</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add">ADD</h3>
<p>ADD 指令和 COPY 的使用格类似</p>
<p>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</p>
<p>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</p>
<h3 id="cmd">CMD</h3>
<p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>
<ol>
<li>CMD 在docker run 时运行。</li>
<li>RUN 是在 docker build。</li>
</ol>
<p>Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    CMD &lt;shell 命令&gt; <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    CMD <span class="o">[</span><span class="s2">&#34;&lt;可执行文件或命令&gt;&#34;</span>,<span class="s2">&#34;&lt;param1&gt;&#34;</span>,<span class="s2">&#34;&lt;param2&gt;&#34;</span>,...<span class="o">]</span> <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    CMD <span class="o">[</span><span class="s2">&#34;&lt;param1&gt;&#34;</span>,<span class="s2">&#34;&lt;param2&gt;&#34;</span>,...<span class="o">]</span>  <span class="c1"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="通过dockerfile文件封装hugo">通过dockerfile文件封装hugo</h2>
<p>dokcerfile文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">    FROM nginx:1.21<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    COPY public/ /usr/share/nginx/html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>docker.sh文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    <span class="c1">#/!bin/bash</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;删除旧的docker&#34;</span>
</span></span><span class="line"><span class="cl">    docker ps
</span></span><span class="line"><span class="cl">    docker stop nginx-hugo
</span></span><span class="line"><span class="cl">    docker rm nginx-hugo
</span></span><span class="line"><span class="cl">    docker rmi nginx:hugo
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;生成新的docker&#34;</span>
</span></span><span class="line"><span class="cl">    hugo -t LoveIt -D
</span></span><span class="line"><span class="cl">    docker build -t nginx:hugo .
</span></span><span class="line"><span class="cl">    docker run --name nginx-hugo -d -p 8080:80 nginx:hugo
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;显示端口&#34;</span>
</span></span><span class="line"><span class="cl">    netstat -lntp
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    sh update.sh
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
