<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>gitlab - 标签 - 打工人日志 - jobcher</title>
        <link>https://www.jobcher.com/tags/gitlab/</link>
        <description>gitlab - 标签 - 打工人日志 - jobcher</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>nb@nbtyfood.com (jobcher)</managingEditor>
            <webMaster>nb@nbtyfood.com (jobcher)</webMaster><lastBuildDate>Wed, 10 Aug 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.jobcher.com/tags/gitlab/" rel="self" type="application/rss+xml" /><item>
    <title>Argo cd 安装和部署</title>
    <link>https://www.jobcher.com/argocd/</link>
    <pubDate>Wed, 10 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/argocd/</guid>
    <description><![CDATA[<h1 id="argo-cd-安装和部署">Argo cd 安装和部署</h1>
<p>Argo CD 是一个为 Kubernetes 而生的，遵循声明式 GitOps 理念的持续部署（CD）工具。Argo CD 可在 Git 存储库更改时自动同步和部署应用程序
</p>
<h2 id="安装">安装</h2>
<p>k8s 快速安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">k3s kubectl create namespace argocd
</span></span><span class="line"><span class="cl">k3s kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装-argo-cd-cli">安装 Argo CD CLI</h3>
<p>Argo CD CLI 是用于管理 Argo CD 的命令行工具,Mac 系统可以直接使用 brew install 进行安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install argocd
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="发布-argo-cd-服务">发布 Argo CD 服务</h3>
<p>默认情况下， Argo CD 服务不对外暴露服务，可以通过 LoadBalancer 或者 NodePort 类型的 Service、Ingress、Kubectl 端口转发等方式将 Argo CD 服务发布到 Kubernetes 集群外部。<br>
通过 NodePort 服务的方式暴露 Argo CD 到集群外部</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl patch svc argocd-server -n argocd -p <span class="s1">&#39;{&#34;spec&#34;: {&#34;type&#34;: &#34;NodePort&#34;}}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看端口">查看端口</h3>
<blockquote>
<p>kubectl get svc -n argocd</p>
</blockquote>
<h2 id="使用">使用</h2>
<p></p>
<h3 id="获取-argo-cd-密码">获取 Argo CD 密码</h3>
<p>默认情况下 <code>admin</code><br>
帐号的初始密码是自动生成的，会以明文的形式存储在 <code>Argo CD</code> 安装的命名空间中<code>argocd-initial-admin-secret</code> 的 <code>Secret </code>对象下的 <code>password</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">kubectl -n argocd get secret <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>argocd-initial-admin-secret <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.data.password}&#34;</span> <span class="p">|</span> base64 -d
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="命令行可以使用以下方式登录">命令行可以使用以下方式登录</h3>
<blockquote>
<p>argocd login &lt;节点 IP&gt;:&lt;端口&gt;</p>
</blockquote>
]]></description>
</item><item>
    <title>Git 规则</title>
    <link>https://www.jobcher.com/git3/</link>
    <pubDate>Thu, 24 Mar 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/git3/</guid>
    <description><![CDATA[<h1 id="git-飞行规则flight-rules">Git 飞行规则(Flight Rules)</h1>
<ul>
<li><a href="#%E7%BC%96%E8%BE%91%E6%8F%90%E4%BA%A4editting-commits" rel="">编辑提交(editting commits)</a>
<ul>
<li><a href="#%E6%88%91%E5%88%9A%E6%89%8D%E6%8F%90%E4%BA%A4%E4%BA%86%E4%BB%80%E4%B9%88" rel="">我刚才提交了什么?</a></li>
<li><a href="#%E6%88%91%E7%9A%84%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AFcommit-message%E5%86%99%E9%94%99%E4%BA%86" rel="">我的提交信息(commit message)写错了</a></li>
<li><a href="#%E6%88%91%E6%8F%90%E4%BA%A4commit%E9%87%8C%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E4%B8%8D%E5%AF%B9" rel="">我提交(commit)里的用户名和邮箱不对</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4commit%E9%87%8C%E7%A7%BB%E9%99%A4%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6" rel="">我想从一个提交(commit)里移除一个文件</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E5%88%A0%E9%99%A4%E6%88%91%E7%9A%84%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4commit" rel="">我想删除我的的最后一次提交(commit)</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E4%BB%BB%E6%84%8F%E6%8F%90%E4%BA%A4commit" rel="">删除任意提交(commit)</a></li>
<li><a href="#%E6%88%91%E5%B0%9D%E8%AF%95%E6%8E%A8%E4%B8%80%E4%B8%AA%E4%BF%AE%E6%AD%A3%E5%90%8E%E7%9A%84%E6%8F%90%E4%BA%A4amended-commit%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BD%86%E6%98%AF%E6%8A%A5%E9%94%99" rel="">我尝试推一个修正后的提交(amended commit)到远程，但是报错：</a></li>
<li><a href="#%E6%88%91%E6%84%8F%E5%A4%96%E7%9A%84%E5%81%9A%E4%BA%86%E4%B8%80%E6%AC%A1%E7%A1%AC%E9%87%8D%E7%BD%AEhard-reset%E6%88%91%E6%83%B3%E6%89%BE%E5%9B%9E%E6%88%91%E7%9A%84%E5%86%85%E5%AE%B9" rel="">我意外的做了一次硬重置(hard reset)，我想找回我的内容</a></li>
</ul>
</li>
<li><a href="#%E6%9A%82%E5%AD%98staging" rel="">暂存(Staging)</a>
<ul>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E6%8A%8A%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E6%B7%BB%E5%8A%A0%E5%88%B0%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E6%8F%90%E4%BA%A4commit" rel="">我需要把暂存的内容添加到上一次的提交(commit)</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E8%A6%81%E6%9A%82%E5%AD%98%E4%B8%80%E4%B8%AA%E6%96%B0%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%A8%E9%83%A8" rel="">我想要暂存一个新文件的一部分，而不是这个文件的全部</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E9%87%8C%E7%9A%84%E5%8F%98%E5%8C%96changes%E5%8A%A0%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%8F%90%E4%BA%A4commit%E9%87%8C" rel="">我想把在一个文件里的变化(changes)加到两个提交(commit)里</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%98%E6%88%90%E6%9C%AA%E6%9A%82%E5%AD%98%E6%8A%8A%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E6%9A%82%E5%AD%98%E8%B5%B7%E6%9D%A5" rel="">我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</a></li>
</ul>
</li>
<li><a href="#%E6%9C%AA%E6%9A%82%E5%AD%98unstaged%E7%9A%84%E5%86%85%E5%AE%B9" rel="">未暂存(Unstaged)的内容</a>
<ul>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E7%A7%BB%E5%8A%A8%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E5%88%86%E6%94%AF" rel="">我想把未暂存的内容移动到一个新分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E5%88%86%E6%94%AF" rel="">我想把未暂存的内容移动到另一个已存在的分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%B8%A2%E5%BC%83%E6%9C%AC%E5%9C%B0%E6%9C%AA%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8F%98%E5%8C%96uncommitted-changes" rel="">我想丢弃本地未提交的变化(uncommitted changes)</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%B8%A2%E5%BC%83%E6%9F%90%E4%BA%9B%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9" rel="">我想丢弃某些未暂存的内容</a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E6%94%AFbranches" rel="">分支(Branches)</a>
<ul>
<li><a href="#%E6%88%91%E4%BB%8E%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E6%94%AF%E6%8B%89%E5%8F%96%E4%BA%86%E5%86%85%E5%AE%B9%E6%88%96%E6%8A%8A%E5%86%85%E5%AE%B9%E6%8B%89%E5%8F%96%E5%88%B0%E4%BA%86%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E6%94%AF" rel="">我从错误的分支拉取了内容，或把内容拉取到了错误的分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%89%94%E6%8E%89%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%8F%90%E4%BA%A4commit%E4%BB%A5%E4%BE%BF%E6%88%91%E7%9A%84%E5%88%86%E6%94%AF%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%9A%84%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4" rel="">我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</a></li>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E5%88%86%E6%94%AF%E4%BD%86%E9%94%99%E8%AF%AF%E7%9A%84%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BA%86main" rel="">我需要提交到一个新分支，但错误的提交到了 main</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BF%9D%E7%95%99%E6%9D%A5%E8%87%AA%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AAref-ish%E7%9A%84%E6%95%B4%E4%B8%AA%E6%96%87%E4%BB%B6" rel="">我想保留来自另外一个 ref-ish 的整个文件</a></li>
<li><a href="#%E6%88%91%E6%8A%8A%E5%87%A0%E4%B8%AA%E6%8F%90%E4%BA%A4commit%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BA%86%E5%90%8C%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E8%80%8C%E8%BF%99%E4%BA%9B%E6%8F%90%E4%BA%A4%E5%BA%94%E8%AF%A5%E5%88%86%E5%B8%83%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E5%88%86%E6%94%AF%E9%87%8C" rel="">我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E5%88%A0%E9%99%A4%E4%B8%8A%E6%B8%B8upstream%E5%88%86%E6%94%AF%E8%A2%AB%E5%88%A0%E9%99%A4%E4%BA%86%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF" rel="">我想删除上游(upstream)分支被删除了的本地分支</a></li>
<li><a href="#%E6%88%91%E4%B8%8D%E5%B0%8F%E5%BF%83%E5%88%A0%E9%99%A4%E4%BA%86%E6%88%91%E7%9A%84%E5%88%86%E6%94%AF" rel="">我不小心删除了我的分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF" rel="">我想删除一个分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BB%8E%E5%88%AB%E4%BA%BA%E6%AD%A3%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%AD%BE%E5%87%BAcheckout%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF" rel="">我想从别人正在工作的远程分支签出(checkout)一个分支</a></li>
</ul>
</li>
<li><a href="#rebasing-%E5%92%8C%E5%90%88%E5%B9%B6merging" rel="">Rebasing 和合并(Merging)</a>
<ul>
<li><a href="#%E6%88%91%E6%83%B3%E6%92%A4%E9%94%80rebasemerge" rel="">我想撤销 rebase/merge</a></li>
<li><a href="#%E6%88%91%E5%B7%B2%E7%BB%8Frebase%E8%BF%87-%E4%BD%86%E6%98%AF%E6%88%91%E4%B8%8D%E6%83%B3%E5%BC%BA%E6%8E%A8force-push" rel="">我已经 rebase 过, 但是我不想强推(force push)</a></li>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E7%BB%84%E5%90%88combine%E5%87%A0%E4%B8%AA%E6%8F%90%E4%BA%A4commit" rel="">我需要组合(combine)几个提交(commit)</a>
<ul>
<li><a href="#%E5%AE%89%E5%85%A8%E5%90%88%E5%B9%B6merging%E7%AD%96%E7%95%A5" rel="">安全合并(merging)策略</a></li>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E5%B0%86%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4commit" rel="">我需要将一个分支合并成一个提交(commit)</a></li>
<li><a href="#%E6%88%91%E5%8F%AA%E6%83%B3%E7%BB%84%E5%90%88combine%E6%9C%AA%E6%8E%A8%E7%9A%84%E6%8F%90%E4%BA%A4unpushed-commit" rel="">我只想组合(combine)未推的提交(unpushed commit)</a></li>
</ul>
</li>
<li><a href="#%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%88%86%E6%94%AF%E4%B8%8A%E7%9A%84%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4commit%E9%83%BD%E5%90%88%E5%B9%B6merge%E8%BF%87%E4%BA%86" rel="">检查是否分支上的所有提交(commit)都合并(merge)过了</a></li>
<li><a href="#%E4%BA%A4%E4%BA%92%E5%BC%8Frebaseinteractive-rebase%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98" rel="">交互式 rebase(interactive rebase)可能出现的问题</a>
<ul>
<li><a href="#%E8%BF%99%E4%B8%AArebase-%E7%BC%96%E8%BE%91%E5%B1%8F%E5%B9%95%E5%87%BA%E7%8E%B0noop" rel="">这个 rebase 编辑屏幕出现&rsquo;noop&rsquo;</a></li>
<li><a href="#%E6%9C%89%E5%86%B2%E7%AA%81%E7%9A%84%E6%83%85%E5%86%B5" rel="">有冲突的情况</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#stash" rel="">Stash</a>
<ul>
<li><a href="#%E6%9A%82%E5%AD%98%E6%89%80%E6%9C%89%E6%94%B9%E5%8A%A8" rel="">暂存所有改动</a></li>
<li><a href="#%E6%9A%82%E5%AD%98%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6" rel="">暂存指定文件</a></li>
<li><a href="#%E6%9A%82%E5%AD%98%E6%97%B6%E8%AE%B0%E5%BD%95%E6%B6%88%E6%81%AF" rel="">暂存时记录消息</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%9F%90%E4%B8%AA%E6%8C%87%E5%AE%9A%E6%9A%82%E5%AD%98" rel="">使用某个指定暂存</a></li>
<li><a href="#%E6%9A%82%E5%AD%98%E6%97%B6%E4%BF%9D%E7%95%99%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9" rel="">暂存时保留未暂存的内容</a></li>
</ul>
</li>
<li><a href="#%E6%9D%82%E9%A1%B9miscellaneous-objects" rel="">杂项(Miscellaneous Objects)</a>
<ul>
<li><a href="#%E5%85%8B%E9%9A%86%E6%89%80%E6%9C%89%E5%AD%90%E6%A8%A1%E5%9D%97" rel="">克隆所有子模块</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%A0%87%E7%AD%BEtag" rel="">删除标签(tag)</a></li>
<li><a href="#%E6%81%A2%E5%A4%8D%E5%B7%B2%E5%88%A0%E9%99%A4%E6%A0%87%E7%AD%BEtag" rel="">恢复已删除标签(tag)</a></li>
<li><a href="#%E5%B7%B2%E5%88%A0%E9%99%A4%E8%A1%A5%E4%B8%81patch" rel="">已删除补丁(patch)</a></li>
</ul>
</li>
<li><a href="#%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6tracking-files" rel="">跟踪文件(Tracking Files)</a>
<ul>
<li><a href="#%E6%88%91%E5%8F%AA%E6%83%B3%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%90%8D%E5%AD%97%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E8%80%8C%E4%B8%8D%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9" rel="">我只想改变一个文件名字的大小写，而不修改内容</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BB%8Egit%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%86%E4%BF%9D%E7%95%99%E8%AF%A5%E6%96%87%E4%BB%B6" rel="">我想从 Git 删除一个文件，但保留该文件</a></li>
</ul>
</li>
<li><a href="#%E9%85%8D%E7%BD%AEconfiguration" rel="">配置(Configuration)</a>
<ul>
<li><a href="#%E6%88%91%E6%83%B3%E7%BB%99%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E5%88%AB%E5%90%8Dalias" rel="">我想给一些 Git 命令添加别名(alias)</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E7%BC%93%E5%AD%98%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93repository%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81" rel="">我想缓存一个仓库(repository)的用户名和密码</a></li>
</ul>
</li>
<li><a href="#%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E6%88%91%E5%81%9A%E9%94%99%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88" rel="">我不知道我做错了些什么</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E8%B5%84%E6%BA%90other-resources" rel="">其它资源(Other Resources)</a>
<ul>
<li><a href="#%E4%B9%A6books" rel="">书(Books)</a></li>
<li><a href="#%E6%95%99%E7%A8%8Btutorials" rel="">教程(Tutorials)</a></li>
<li><a href="#%E8%84%9A%E6%9C%AC%E5%92%8C%E5%B7%A5%E5%85%B7scripts-and-tools" rel="">脚本和工具(Scripts and Tools)</a></li>
<li><a href="#gui%E5%AE%A2%E6%88%B7%E7%AB%AFgui-clients" rel="">GUI 客户端(GUI Clients)</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="编辑提交editting-commits">编辑提交(editting commits)</h2>
<p><a name="diff-last"></a></p>
<h3 id="我刚才提交了什么">我刚才提交了什么?</h3>
<p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。 你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git show
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git log -n1 -p
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="#i-wrote-the-wrong-thing-in-a-commit-message"></a></p>
<h3 id="我的提交信息commit-message写错了">我的提交信息(commit message)写错了</h3>
<p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git commit --amend --only
</span></span></code></pre></td></tr></table>
</div>
</div><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git commit --amend --only -m <span class="s1">&#39;xxxxxxx&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>
<p><a name="commit-wrong-author"></a></p>
<h3 id="我提交commit里的用户名和邮箱不对">我提交(commit)里的用户名和邮箱不对</h3>
<p>如果这只是单个提交(commit)，修改它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git commit --amend --author <span class="s2">&#34;New Authorname &lt;authoremail@mydomain.com&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你需要修改所有历史, 参考 &lsquo;git filter-branch&rsquo;的指南页.</p>
<p><a href="#i-want-to-remove-a-file-from-a-commit"></a></p>
<h3 id="我想从一个提交commit里移除一个文件">我想从一个提交(commit)里移除一个文件</h3>
<p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git checkout HEAD^ myfile
</span></span><span class="line"><span class="cl">$ git add -A
</span></span><span class="line"><span class="cl">$ git commit --amend
</span></span></code></pre></td></tr></table>
</div>
</div><p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>
<p><a name="delete-pushed-commit"></a></p>
<h3 id="我想删除我的的最后一次提交commit">我想删除我的的最后一次提交(commit)</h3>
<p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git reset HEAD^ --hard
</span></span><span class="line"><span class="cl">$ git push -f <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>branch<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你还没有推到远程, 把 Git 重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(my-branch*)$ git reset --soft HEAD@{1}
</span></span></code></pre></td></tr></table>
</div>
</div><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是 rebase-safe 的 (例如： 其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>； 更多, 请参考 <a href="#deleteremove-last-pushed-commit" rel="">the above section</a>。</p>
<p><a name="delete-any-commit"></a></p>
<h3 id="删除任意提交commit">删除任意提交(commit)</h3>
<p>同样的警告：不到万不得已的时候不要这么做.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT
</span></span><span class="line"><span class="cl">$ git push -f <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>branch<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者做一个 <a href="#interactive-rebase" rel="">交互式 rebase</a> 删除那些你想要删除的提交(commit)里所对应的行。</p>
<p><a name="#force-push"></a></p>
<h3 id="我尝试推一个修正后的提交amended-commit到远程但是报错">我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">To https://github.com/yourusername/repo.git
</span></span><span class="line"><span class="cl">! <span class="o">[</span>rejected<span class="o">]</span>        mybranch -&gt; mybranch <span class="o">(</span>non-fast-forward<span class="o">)</span>
</span></span><span class="line"><span class="cl">error: failed to push some refs to <span class="s1">&#39;https://github.com/tanay1337/webmaker.org.git&#39;</span>
</span></span><span class="line"><span class="cl">hint: Updates were rejected because the tip of your current branch is behind
</span></span><span class="line"><span class="cl">hint: its remote counterpart. Integrate the remote changes <span class="o">(</span>e.g.
</span></span><span class="line"><span class="cl">hint: <span class="s1">&#39;git pull ...&#39;</span><span class="o">)</span> before pushing again.
</span></span><span class="line"><span class="cl">hint: See the <span class="s1">&#39;Note about fast-forwards&#39;</span> in <span class="s1">&#39;git push --help&#39;</span> <span class="k">for</span> details.
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。 注意 – <em>总是</em> 确保你指明一个分支!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git push origin mybranch -f
</span></span></code></pre></td></tr></table>
</div>
</div><p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>
<p><a href="undo-git-reset-hard"></a></p>
<h3 id="我意外的做了一次硬重置hard-reset我想找回我的内容">我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3>
<p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为 Git 对每件事都会有日志，且都会保存几天。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reflog
</span></span></code></pre></td></tr></table>
</div>
</div><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的 SHA，再重置一次:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reset --hard SHA1234
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就完成了。</p>
<h2 id="暂存staging">暂存(Staging)</h2>
<p><a href="#i-need-to-add-staged-changes-to-the-previous-commit"></a></p>
<h3 id="我需要把暂存的内容添加到上一次的提交commit">我需要把暂存的内容添加到上一次的提交(commit)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch*<span class="o">)</span>$ git commit --amend
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="commit-partial-new-file"></a></p>
<h3 id="我想要暂存一个新文件的一部分而不是这个文件的全部">我想要暂存一个新文件的一部分，而不是这个文件的全部</h3>
<p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git add --patch filename.x
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)； 然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git add -N filename.x
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>
<p><a href="stage-in-two-commits"></a></p>
<h3 id="我想把在一个文件里的变化changes加到两个提交commit里">我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3>
<p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>
<p><a href="unstaging-edits-and-staging-the-unstaged"></a></p>
<h3 id="我想把暂存的内容变成未暂存把未暂存的内容暂存起来">我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3>
<p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行 commit。
但假定你就是想要这么做，这里你可以创建一个临时的 commit 来保存你已暂存的内容，然后暂存你的未暂存的内容并进行 stash。然后 reset 最后一个 commit 将原本暂存的内容变为未暂存，最后 stash pop 回来。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;WIP&#34;</span>
</span></span><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">$ git stash
</span></span><span class="line"><span class="cl">$ git reset HEAD^
</span></span><span class="line"><span class="cl">$ git stash pop --index <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意 1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。
注意 2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储.这个<a href="https://stackoverflow.com/questions/31595873/git-stash-with-staged-files-does-stash-convert-staged-files-to-unstaged?answertab=active#tab-top" target="_blank" rel="noopener noreffer">链接</a> 解释得比较清楚。（不过是英文的，其大意是说，这是一个较为底层的问题，stash 时会做 2 个 commit，其中一个会记录 index 状态，staged 的文件等东西，另一个记录 worktree 和其他的一些东西，如果你不在 apply 时加 index，git 会把两个一起销毁，所以 staged 里就空了）。</p>
<h2 id="未暂存unstaged的内容">未暂存(Unstaged)的内容</h2>
<p><a href="move-unstaged-edits-to-new-branch"></a></p>
<h3 id="我想把未暂存的内容移动到一个新分支">我想把未暂存的内容移动到一个新分支</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git checkout -b my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="move-unstaged-edits-to-old-branch"></a></p>
<h3 id="我想把未暂存的内容移动到另一个已存在的分支">我想把未暂存的内容移动到另一个已存在的分支</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash
</span></span><span class="line"><span class="cl">$ git checkout my-branch
</span></span><span class="line"><span class="cl">$ git stash pop
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="i-want-to-discard-my-local-uncommitted-changes"></a></p>
<h3 id="我想丢弃本地未提交的变化uncommitted-changes">我想丢弃本地未提交的变化(uncommitted changes)</h3>
<p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># one commit</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git reset --hard HEAD^
</span></span><span class="line"><span class="cl"><span class="c1"># two commits</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git reset --hard HEAD^^
</span></span><span class="line"><span class="cl"><span class="c1"># four commits</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git reset --hard HEAD~4
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout -f
</span></span></code></pre></td></tr></table>
</div>
</div><p>重置某个特殊的文件, 你可以用文件名做为参数:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git reset filename
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="i-want-to-discard-specific-unstaged-changes"></a></p>
<h3 id="我想丢弃某些未暂存的内容">我想丢弃某些未暂存的内容</h3>
<p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>
<p>签出(checkout)不需要的内容，保留需要的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git checkout -p
</span></span><span class="line"><span class="cl"><span class="c1"># Answer y to all of the snippets you want to drop</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外一个方法是使用 <code>stash</code>， Stash 所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash -p
</span></span><span class="line"><span class="cl"><span class="c1"># Select all of the snippets you want to save</span>
</span></span><span class="line"><span class="cl">$ git reset --hard
</span></span><span class="line"><span class="cl">$ git stash pop
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者, stash 你不需要的部分, 然后 stash drop。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash -p
</span></span><span class="line"><span class="cl"><span class="c1"># Select all of the snippets you don&#39;t want to save</span>
</span></span><span class="line"><span class="cl">$ git stash drop
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="分支branches">分支(Branches)</h2>
<p><a name="pull-wrong-branch"></a></p>
<h3 id="我从错误的分支拉取了内容或把内容拉取到了错误的分支">我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3>
<p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前 HEAD 的指向。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reflog
</span></span><span class="line"><span class="cl">ab7555f HEAD@<span class="o">{</span>0<span class="o">}</span>: pull origin wrong-branch: Fast-forward
</span></span><span class="line"><span class="cl">c5bc55a HEAD@<span class="o">{</span>1<span class="o">}</span>: checkout: checkout message goes here
</span></span></code></pre></td></tr></table>
</div>
</div><p>重置分支到你所需的提交(desired commit):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git reset --hard c5bc55a
</span></span></code></pre></td></tr></table>
</div>
</div><p>完成。</p>
<p><a href="discard-local-commits"></a></p>
<h3 id="我想扔掉本地的提交commit以便我的分支与远程的保持一致">我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3>
<p>先确认你没有推(push)你的内容到远程。</p>
<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git status
</span></span><span class="line"><span class="cl"><span class="c1"># On branch my-branch</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Your branch is ahead of &#39;origin/my-branch&#39; by 2 commits.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   (use &#34;git push&#34; to publish your local commits)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一种方法是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reset --hard origin/my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="commit-wrong-branch"></a></p>
<h3 id="我需要提交到一个新分支但错误的提交到了-main">我需要提交到一个新分支，但错误的提交到了 main</h3>
<p>在 main 下创建一个新分支，不切换到新分支,仍在 main 下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git branch my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p>把 main 分支重置到前一个提交:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reset --hard HEAD^
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>
<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的 hash(<code>git log</code> 能够完成)， 然后重置到这个 hash。 使用<code>git push</code> 同步内容到远程。</p>
<p>例如, main 分支想重置到的提交的 hash 为<code>a13b85e</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reset --hard a13b85e
</span></span><span class="line"><span class="cl">HEAD is now at a13b85e
</span></span></code></pre></td></tr></table>
</div>
</div><p>签出(checkout)刚才新建的分支继续工作:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="keep-whole-file"></a></p>
<h3 id="我想保留来自另外一个-ref-ish-的整个文件">我想保留来自另外一个 ref-ish 的整个文件</h3>
<p>假设你正在做一个原型方案(原文为 working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>solution<span class="o">)</span>$ git add -A <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&#34;Adding all changes from this spike into one big commit.&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>
<p>假设你有:</p>
<ul>
<li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>
<li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>
</ul>
<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>develop<span class="o">)</span>$ git checkout solution -- file1.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># On branch develop</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Your branch is up-to-date with &#39;origin/develop&#39;.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Changes to be committed:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  (use &#34;git reset HEAD &lt;file&gt;...&#34; to unstage)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#        modified:   file1.txt</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后, 正常提交。</p>
<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ <a href="https://en.wikipedia.org/wiki/Extreme_programming_practices" target="_blank" rel="noopener noreffer">Wikipedia</a>.</p>
<p><a name="cherry-pick"></a></p>
<h3 id="我把几个提交commit提交到了同一个分支而这些提交应该分布在不同的分支里">我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3>
<p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git log
</span></span><span class="line"><span class="cl">commit e3851e817c451cc36f2e6f3049db528415e3c114
</span></span><span class="line"><span class="cl">Author: Alex Lee &lt;alexlee@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Jul <span class="m">22</span> 15:39:27 <span class="m">2014</span> -0400
</span></span><span class="line"><span class="cl">    Bug <span class="c1">#21 - Added CSRF protection</span>
</span></span><span class="line"><span class="cl">commit 5ea51731d150f7ddc4a365437931cd8be3bf3131
</span></span><span class="line"><span class="cl">Author: Alex Lee &lt;alexlee@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Jul <span class="m">22</span> 15:39:12 <span class="m">2014</span> -0400
</span></span><span class="line"><span class="cl">    Bug <span class="c1">#14 - Fixed spacing on title</span>
</span></span><span class="line"><span class="cl">commit a13b85e984171c6e2a1729bb061994525f626d14
</span></span><span class="line"><span class="cl">Author: Aki Rose &lt;akirose@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Jul <span class="m">21</span> 01:12:48 <span class="m">2014</span> -0400
</span></span><span class="line"><span class="cl">    First commit
</span></span></code></pre></td></tr></table>
</div>
</div><p>让我们用提交 hash(commit hash)标记 bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>
<p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reset --hard a13b85e
</span></span><span class="line"><span class="cl">HEAD is now at a13b85e
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在, 我们对 bug #21 创建一个新的分支:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout -b <span class="m">21</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>21<span class="o">)</span>$
</span></span></code></pre></td></tr></table>
</div>
</div><p>接着, 我们用 <em>cherry-pick</em> 把对 bug #21 的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在 HEAD 上面。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>21<span class="o">)</span>$ git cherry-pick e3851e8
</span></span></code></pre></td></tr></table>
</div>
</div><p>这时候, 这里可能会产生冲突， 参见<a href="#interactive-rebase" rel="">交互式 rebasing 章</a> <a href="#merge-conflict" rel=""><strong>冲突节</strong></a> 解决冲突.</p>
<p>再者， 我们为 bug #14 创建一个新的分支, 也基于<code>main</code>分支</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>21<span class="o">)</span>$ git checkout main
</span></span><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout -b <span class="m">14</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>14<span class="o">)</span>$
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>14<span class="o">)</span>$ git cherry-pick 5ea5173
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="delete-stale-local-branches"></a></p>
<h3 id="我想删除上游upstream分支被删除了的本地分支">我想删除上游(upstream)分支被删除了的本地分支</h3>
<p>一旦你在 github 上面合并(merge)了一个 pull request, 你就可以删除你 fork 里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git fetch -p
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name='restore-a-deleted-branch'></a></p>
<h3 id="我不小心删除了我的分支">我不小心删除了我的分支</h3>
<p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout -b my-branch
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git branch
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ touch foo.txt
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ ls
</span></span><span class="line"><span class="cl">README.md foo.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加文件并做一次提交</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git add .
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git commit -m <span class="s1">&#39;foo.txt added&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ foo.txt added
</span></span><span class="line"><span class="cl"> <span class="m">1</span> files changed, <span class="m">1</span> insertions<span class="o">(</span>+<span class="o">)</span>
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> foo.txt
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git log
</span></span><span class="line"><span class="cl">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012
</span></span><span class="line"><span class="cl">Author: siemiatj &lt;siemiatj@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Wed Jul <span class="m">30</span> 00:34:10 <span class="m">2014</span> +0200
</span></span><span class="line"><span class="cl">    foo.txt added
</span></span><span class="line"><span class="cl">commit 69204cdf0acbab201619d95ad8295928e7f411d5
</span></span><span class="line"><span class="cl">Author: Kate Hudson &lt;katehudson@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Jul <span class="m">29</span> 13:14:46 <span class="m">2014</span> -0400
</span></span><span class="line"><span class="cl">    Fixes <span class="c1">#6: Force pushing after amending commits</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git checkout main
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;main&#39;</span>
</span></span><span class="line"><span class="cl">Your branch is up-to-date with <span class="s1">&#39;origin/main&#39;</span>.
</span></span><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git branch -D my-branch
</span></span><span class="line"><span class="cl">Deleted branch my-branch <span class="o">(</span>was 4e3cd85<span class="o">)</span>.
</span></span><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ <span class="nb">echo</span> oh noes, deleted my branch!
</span></span><span class="line"><span class="cl">oh noes, deleted my branch!
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(main)$ git reflog
</span></span><span class="line"><span class="cl">69204cd HEAD@{0}: checkout: moving from my-branch to main
</span></span><span class="line"><span class="cl">4e3cd85 HEAD@{1}: commit: foo.txt added
</span></span><span class="line"><span class="cl">69204cd HEAD@{2}: checkout: moving from main to my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p>正如你所见，我们有一个来自删除分支的提交 hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout -b my-branch-help
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;my-branch-help&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch-help<span class="o">)</span>$ git reset --hard 4e3cd85
</span></span><span class="line"><span class="cl">HEAD is now at 4e3cd85 foo.txt added
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch-help<span class="o">)</span>$ ls
</span></span><span class="line"><span class="cl">README.md foo.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>看! 我们把删除的文件找回来了。 Git 的 <code>reflog</code> 在 rebasing 出错的时候也是同样有用的。</p>
<p><a name="i-want-to-delete-a-branch"></a></p>
<h3 id="我想删除一个分支">我想删除一个分支</h3>
<p>删除一个远程分支:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git push origin --delete my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p>你也可以:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git push origin :my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除一个本地分支:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git branch -D my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="i-want-to-checkout-to-a-remote-branch-that-someone-else-is-working-on"></a></p>
<h3 id="我想从别人正在工作的远程分支签出checkout一个分支">我想从别人正在工作的远程分支签出(checkout)一个分支</h3>
<p>首先, 从远程拉取(fetch) 所有分支:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git fetch --all
</span></span></code></pre></td></tr></table>
</div>
</div><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout --track origin/daves
</span></span><span class="line"><span class="cl">Branch daves <span class="nb">set</span> up to track remote branch daves from origin.
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;daves&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>(<code>--track</code> 是 <code>git checkout -b <sup>branch] [remotename</sup>/<sub>branch</sub></code> 的简写)</p>
<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>
<h2 id="rebasing-和合并merging">Rebasing 和合并(Merging)</h2>
<p><a name="undo-rebase"></a></p>
<h3 id="我想撤销-rebasemerge">我想撤销 rebase/merge</h3>
<p>你可以合并(merge)或 rebase 了一个错误的分支, 或者完成不了一个进行中的 rebase/merge。 Git 在进行危险操作的时候会把原始的 HEAD 保存在一个叫 ORIG_HEAD 的变量里, 所以要把分支恢复到 rebase/merge 前的状态是很容易的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git reset --hard ORIG_HEAD
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="force-push-rebase"></a></p>
<h3 id="我已经-rebase-过-但是我不想强推force-push">我已经 rebase 过, 但是我不想强推(force push)</h3>
<p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了 Git 历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git checkout my-branch
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git rebase -i main
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git checkout main
</span></span><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git merge --ff-only my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多, 参见 <a href="http://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push" target="_blank" rel="noopener noreffer">this SO thread</a>.</p>
<p><a name="interactive-rebase"></a></p>
<h3 id="我需要组合combine几个提交commit">我需要组合(combine)几个提交(commit)</h3>
<p>假设你的工作分支将会做对于 <code>main</code> 的 pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 <em>所有</em> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git reset --soft main
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git commit -am <span class="s2">&#34;New awesome feature&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式 rebase (interactive rebase):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git rebase -i main
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行 rebase， 组合最近 3 次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git rebase -i HEAD~2
</span></span></code></pre></td></tr></table>
</div>
</div><p>在你执行了交互式 rebase 的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">pick</span> <span class="nx">a9c8a1d</span> <span class="nx">Some</span> <span class="nx">refactoring</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">pick</span> <span class="m">01</span>b<span class="m">2</span>fd<span class="m">8</span> <span class="nx">New</span> <span class="nx">awesome</span> <span class="nx">feature</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">pick</span> <span class="nx">b729ad5</span> <span class="nx">fixup</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">pick</span> <span class="nx">e3851e8</span> <span class="nx">another</span> <span class="nx">fix</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">Rebase</span> <span class="m">8074</span>d<span class="m">12</span>..<span class="nx">b729ad5</span> <span class="nx">onto</span> <span class="m">8074</span>d<span class="m">12</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">Commands</span>:<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#  <span class="nx">p</span><span class="p">,</span> <span class="nx">pick</span> <span class="p">=</span> <span class="nx">use</span> <span class="nx">commit</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#  <span class="nx">r</span><span class="p">,</span> <span class="nx">reword</span> <span class="p">=</span> <span class="nx">use</span> <span class="nx">commit</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">edit</span> <span class="nx">the</span> <span class="nx">commit</span> <span class="nx">message</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#  <span class="nx">e</span><span class="p">,</span> <span class="nx">edit</span> <span class="p">=</span> <span class="nx">use</span> <span class="nx">commit</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">stop</span> <span class="nx">for</span> <span class="nx">amending</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#  <span class="nx">s</span><span class="p">,</span> <span class="nx">squash</span> <span class="p">=</span> <span class="nx">use</span> <span class="nx">commit</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">meld</span> <span class="nx">into</span> <span class="nx">previous</span> <span class="nx">commit</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#  <span class="nx">f</span><span class="p">,</span> <span class="nx">fixup</span> <span class="p">=</span> <span class="nx">like</span> <span class="s2">&#34;squash&#34;</span><span class="p">,</span> <span class="nx">but</span> <span class="nx">discard</span> <span class="nx">this</span> <span class="nx">commit</span>&#39;<span class="nx">s</span> <span class="nx">log</span> <span class="nx">message</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#  <span class="nx">x</span><span class="p">,</span> <span class="nx">exec</span> <span class="p">=</span> <span class="nx">run</span> <span class="nx">command</span> <span class="p">(</span><span class="nx">the</span> <span class="nx">rest</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">line</span><span class="p">)</span> <span class="nx">using</span> <span class="nx">shell</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">These</span> <span class="nx">lines</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">re</span><span class="p">-</span><span class="nx">ordered</span>; <span class="nx">they</span> <span class="nx">are</span> <span class="nx">executed</span> <span class="nx">from</span> <span class="nx">top</span> <span class="nx">to</span> <span class="nx">bottom</span>.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">If</span> <span class="nx">you</span> <span class="nx">remove</span> <span class="nx">a</span> <span class="nx">line</span> <span class="nx">here</span> <span class="nx">THAT</span> <span class="nx">COMMIT</span> <span class="nx">WILL</span> <span class="nx">BE</span> <span class="nx">LOST</span>.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">However</span><span class="p">,</span> <span class="k">if</span> <span class="nx">you</span> <span class="nx">remove</span> <span class="nx">everything</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">rebase</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">aborted</span>.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">Note</span> <span class="nx">that</span> <span class="nx">empty</span> <span class="nx">commits</span> <span class="nx">are</span> <span class="nx">commented</span> <span class="nx">out</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>
<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>
<p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">pick</span> <span class="nx">a9c8a1d</span> <span class="nx">Some</span> <span class="nx">refactoring</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">pick</span> <span class="m">01</span>b<span class="m">2</span>fd<span class="m">8</span> <span class="nx">New</span> <span class="nx">awesome</span> <span class="nx">feature</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">f</span> <span class="nx">b729ad5</span> <span class="nx">fixup</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">f</span> <span class="nx">e3851e8</span> <span class="nx">another</span> <span class="nx">fix</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">pick</span> <span class="nx">a9c8a1d</span> <span class="nx">Some</span> <span class="nx">refactoring</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">pick</span> <span class="m">01</span>b<span class="m">2</span>fd<span class="m">8</span> <span class="nx">New</span> <span class="nx">awesome</span> <span class="nx">feature</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">s</span> <span class="nx">b729ad5</span> <span class="nx">fixup</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">s</span> <span class="nx">e3851e8</span> <span class="nx">another</span> <span class="nx">fix</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">Newer</span><span class="p">,</span> <span class="nx">awesomer</span> <span class="nx">features</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">Please</span> <span class="nx">enter</span> <span class="nx">the</span> <span class="nx">commit</span> <span class="nx">message</span> <span class="nx">for</span> <span class="nx">your</span> <span class="nx">changes</span>. <span class="nx">Lines</span> <span class="nx">starting</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">with</span> <span class="s1">&#39;#&#39;</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">ignored</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">an</span> <span class="nx">empty</span> <span class="nx">message</span> <span class="nx">aborts</span> <span class="nx">the</span> <span class="nx">commit</span>.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">rebase</span> <span class="nx">in</span> <span class="nx">progress</span>; <span class="nx">onto</span> <span class="m">8074</span>d<span class="m">12</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">You</span> <span class="nx">are</span> <span class="nx">currently</span> <span class="nx">editing</span> <span class="nx">a</span> <span class="nx">commit</span> <span class="nx">while</span> <span class="nx">rebasing</span> <span class="nx">branch</span> <span class="s1">&#39;main&#39;</span> <span class="nx">on</span> <span class="s1">&#39;8074d12&#39;</span>.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span># <span class="nx">Changes</span> <span class="nx">to</span> <span class="nx">be</span> <span class="nx">committed</span>:<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#	<span class="nx">modified</span>:   <span class="nx">README</span>.<span class="nx">md</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>#<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果成功了, 你应该看到类似下面的内容:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ Successfully rebased and updated refs/heads/main.
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="安全合并merging策略">安全合并(merging)策略</h4>
<p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 <code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git merge --no-ff --no-commit my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="我需要将一个分支合并成一个提交commit">我需要将一个分支合并成一个提交(commit)</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git merge --squash my-branch
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="rebase-unpushed-commits"></a></p>
<h4 id="我只想组合combine未推的提交unpushed-commit">我只想组合(combine)未推的提交(unpushed commit)</h4>
<p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git rebase -i @<span class="o">{</span>u<span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这会产生一次交互式的 rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行 reorder/fix/squash 都是安全的。</p>
<p><a name="check-if-all-commits-on-a-branch-are-merged"></a></p>
<h3 id="检查是否分支上的所有提交commit都合并merge过了">检查是否分支上的所有提交(commit)都合并(merge)过了</h3>
<p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的 head(或任何 commits)之间做一次 diff:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll
</span></span></code></pre></td></tr></table>
</div>
</div><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git log main ^feature/120-on-scroll --no-merges
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="交互式-rebaseinteractive-rebase可能出现的问题">交互式 rebase(interactive rebase)可能出现的问题</h3>
<p><a name="noop"></a></p>
<h4 id="这个-rebase-编辑屏幕出现noop">这个 rebase 编辑屏幕出现&rsquo;noop&rsquo;</h4>
<p>如果你看到的是这样:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">noop
</span></span></code></pre></td></tr></table>
</div>
</div><p>这意味着你 rebase 的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。 你可以尝试:</p>
<ul>
<li>检查确保主(main)分支没有问题</li>
<li>rebase <code>HEAD~2</code> 或者更早</li>
</ul>
<p><a name="merge-conflict"></a></p>
<h4 id="有冲突的情况">有冲突的情况</h4>
<p>如果你不能成功的完成 rebase, 你可能必须要解决冲突。</p>
<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git status
</span></span><span class="line"><span class="cl">On branch my-branch
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git checkout -- &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">	modified:   README.md
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这个例子里面, <code>README.md</code> 有冲突。 打开这个文件找到类似下面的内容:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl">   <span class="p">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="nx">HEAD</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>   <span class="nx">some</span> <span class="nx">code</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>   <span class="p">=========</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>   <span class="nx">some</span> <span class="nx">code</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>   <span class="p">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="nx">new</span><span class="p">-</span><span class="nx">commit</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>
<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main*<span class="o">)</span>$ git mergetool -t opendiff
</span></span></code></pre></td></tr></table>
</div>
</div><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续 rebase。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git add README.md
</span></span><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git rebase --continue
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>
<p>任何时候你想结束整个 rebase 过程，回来 rebase 前的分支状态, 你可以做:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>my-branch<span class="o">)</span>$ git rebase --abort
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="stashing"></a></p>
<h2 id="stash">Stash</h2>
<h3 id="暂存所有改动">暂存所有改动</h3>
<p>暂存你工作目录下的所有改动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash
</span></span></code></pre></td></tr></table>
</div>
</div><p>你可以使用<code>-u</code>来排除一些文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash -u
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="暂存指定文件">暂存指定文件</h3>
<p>假设你只想暂存某一个文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash push working-directory-path/filename.ext
</span></span></code></pre></td></tr></table>
</div>
</div><p>假设你想暂存多个文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="stash-msg"></a></p>
<h3 id="暂存时记录消息">暂存时记录消息</h3>
<p>这样你可以在<code>list</code>时看到它</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash save &lt;message&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>或</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash push -m &lt;message&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="stash-apply-specific"></a></p>
<h3 id="使用某个指定暂存">使用某个指定暂存</h3>
<p>首先你可以查看你的<code>stash</code>记录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash list
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后你可以<code>apply</code>某个<code>stash</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash apply <span class="s2">&#34;stash@{n}&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此处， &rsquo;n&rsquo;是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是 0</p>
<p>除此之外，也可以使用时间标记(假如你能记得的话)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash apply <span class="s2">&#34;stash@{2.hours.ago}&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="stage-and-keep-unstaged"></a></p>
<h3 id="暂存时保留未暂存的内容">暂存时保留未暂存的内容</h3>
<p>你需要手动 create 一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git stash create
</span></span><span class="line"><span class="cl">$ git stash store -m <span class="s2">&#34;commit-message&#34;</span> CREATED_SHA1
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="miscellaneous-objects"></a></p>
<h2 id="杂项miscellaneous-objects">杂项(Miscellaneous Objects)</h2>
<p><a name="clone-submodules"></a></p>
<h3 id="克隆所有子模块">克隆所有子模块</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git clone --recursive git://github.com/foo/bar.git
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果已经克隆了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git submodule update --init --recursive
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="delete-tag"></a></p>
<h3 id="删除标签tag">删除标签(tag)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git tag -d &lt;tag_name&gt;
</span></span><span class="line"><span class="cl">$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="recover-tag"></a></p>
<h3 id="恢复已删除标签tag">恢复已删除标签(tag)</h3>
<p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git fsck --unreachable <span class="p">|</span> grep tag
</span></span></code></pre></td></tr></table>
</div>
</div><p>记下这个标签(tag)的 hash，然后用 Git 的 <a href="http://git-scm.com/docs/git-update-ref" target="_blank" rel="noopener noreffer">update-ref</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git update-ref refs/tags/&lt;tag_name&gt; &lt;hash&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>这时你的标签(tag)应该已经恢复了。</p>
<p><a name="deleted-patch"></a></p>
<h3 id="已删除补丁patch">已删除补丁(patch)</h3>
<p>如果某人在 GitHub 上给你发了一个 pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>
<p>做完提交后, 再修改作者，参见<a href="#commit-wrong-author" rel="">变更作者</a>。 然后, 应用变化, 再发起一个新的 pull request。</p>
<h2 id="跟踪文件tracking-files">跟踪文件(Tracking Files)</h2>
<p><a href="i-want-to-change-a-file-names-capitalization-without-changing-the-contents-of-the-file"></a></p>
<h3 id="我只想改变一个文件名字的大小写而不修改内容">我只想改变一个文件名字的大小写，而不修改内容</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git mv --force myfile MyFile
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="remove-from-git"></a></p>
<h3 id="我想从-git-删除一个文件但保留该文件">我想从 Git 删除一个文件，但保留该文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git rm --cached log.txt
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置configuration">配置(Configuration)</h2>
<p><a name="adding-command-aliases"></a></p>
<h3 id="我想给一些-git-命令添加别名alias">我想给一些 Git 命令添加别名(alias)</h3>
<p>在 OS X 和 Linux 下, 你的 Git 的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl">[<span class="nx">alias</span>]<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">a</span> <span class="p">=</span> <span class="nx">add</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">amend</span> <span class="p">=</span> <span class="nx">commit</span> <span class="p">--</span><span class="nx">amend</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">c</span> <span class="p">=</span> <span class="nx">commit</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">ca</span> <span class="p">=</span> <span class="nx">commit</span> <span class="p">--</span><span class="nx">amend</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">ci</span> <span class="p">=</span> <span class="nx">commit</span> <span class="p">-</span><span class="nx">a</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">co</span> <span class="p">=</span> <span class="nx">checkout</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">d</span> <span class="p">=</span> <span class="nx">diff</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">dc</span> <span class="p">=</span> <span class="nx">diff</span> <span class="p">--</span><span class="nx">changed</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">ds</span> <span class="p">=</span> <span class="nx">diff</span> <span class="p">--</span><span class="nx">staged</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">f</span> <span class="p">=</span> <span class="nx">fetch</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">loll</span> <span class="p">=</span> <span class="nx">log</span> <span class="p">--</span><span class="nx">graph</span> <span class="p">--</span><span class="nx">decorate</span> <span class="p">--</span><span class="nx">pretty</span><span class="p">=</span><span class="nx">oneline</span> <span class="p">--</span><span class="nx">abbrev</span><span class="p">-</span><span class="nx">commit</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">m</span> <span class="p">=</span> <span class="nx">merge</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">one</span> <span class="p">=</span> <span class="nx">log</span> <span class="p">--</span><span class="nx">pretty</span><span class="p">=</span><span class="nx">oneline</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">outstanding</span> <span class="p">=</span> <span class="nx">rebase</span> <span class="p">-</span><span class="nx">i</span> @{<span class="nx">u</span>}<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">s</span> <span class="p">=</span> <span class="nx">status</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">unpushed</span> <span class="p">=</span> <span class="nx">log</span> @{<span class="nx">u</span>}<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">wc</span> <span class="p">=</span> <span class="nx">whatchanged</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">wip</span> <span class="p">=</span> <span class="nx">rebase</span> <span class="p">-</span><span class="nx">i</span> @{<span class="nx">u</span>}<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">zap</span> <span class="p">=</span> <span class="nx">fetch</span> <span class="p">-</span><span class="nx">p</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><a name="credential-helper"></a></p>
<h3 id="我想缓存一个仓库repository的用户名和密码">我想缓存一个仓库(repository)的用户名和密码</h3>
<p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper 能帮你。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git config --global credential.helper cache
</span></span><span class="line"><span class="cl"><span class="c1"># Set git to use the credential memory cache</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git config --global credential.helper <span class="s1">&#39;cache --timeout=3600&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set the cache to timeout after 1 hour (setting is in seconds)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="#ive-no-idea-what-i-did-wrong"></a></p>
<h2 id="我不知道我做错了些什么">我不知道我做错了些什么</h2>
<p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>
<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次 HEAD 的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>main<span class="o">)</span>$ git reflog
</span></span><span class="line"><span class="cl">0a2e358 HEAD@<span class="o">{</span>0<span class="o">}</span>: reset: moving to HEAD~2
</span></span><span class="line"><span class="cl">0254ea7 HEAD@<span class="o">{</span>1<span class="o">}</span>: checkout: moving from 2.2 to main
</span></span><span class="line"><span class="cl">c10f740 HEAD@<span class="o">{</span>2<span class="o">}</span>: checkout: moving from main to 2.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的 reflog 展示了从 main 分支签出(checkout)到 2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@{0}</code>标识.</p>
<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前 main 上指向的提交(0254ea7)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git reset --hard 0254ea7
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后使用 git reset 就可以把 main 改回到之前的 commit，这提供了一个在历史被意外更改情况下的安全网。</p>
<p>(<a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog" target="_blank" rel="noopener noreffer">摘自</a>).</p>
<h1 id="其它资源other-resources">其它资源(Other Resources)</h1>
<h2 id="书books">书(Books)</h2>
<ul>
<li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener noreffer">Pro Git</a> - Scott Chacon&rsquo;s excellent git book</li>
<li><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="noopener noreffer">Git Internals</a> - Scott Chacon&rsquo;s other excellent git book</li>
</ul>
<h2 id="教程tutorials">教程(Tutorials)</h2>
<ul>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener noreffer">Learn Git branching</a> 一个基于网页的交互式 branching/merging/rebasing 教程</li>
<li><a href="https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa" target="_blank" rel="noopener noreffer">Getting solid at Git rebase vs. merge</a></li>
<li><a href="https://github.com/asmeurer/git-workflow" target="_blank" rel="noopener noreffer">git-workflow</a> - <a href="https://github.com/asmeurer" target="_blank" rel="noopener noreffer">Aaron Meurer</a>的怎么使用 Git 为开源仓库贡献</li>
<li><a href="http://hugogiraudel.com/2015/08/13/github-as-a-workflow/" target="_blank" rel="noopener noreffer">GitHub as a workflow</a> - 使用 GitHub 做为工作流的趣事, 尤其是空 PRs</li>
</ul>
<h2 id="脚本和工具scripts-and-tools">脚本和工具(Scripts and Tools)</h2>
<ul>
<li><a href="http://firstaidgit.io/" target="_blank" rel="noopener noreffer">firstaidgit.io</a> 一个可搜索的最常被问到的 Git 的问题</li>
<li><a href="https://github.com/unixorn/git-extra-commands" target="_blank" rel="noopener noreffer">git-extra-commands</a> - 一堆有用的额外的 Git 脚本</li>
<li><a href="https://github.com/tj/git-extras" target="_blank" rel="noopener noreffer">git-extras</a> - GIT 工具集 &ndash; repo summary, repl, changelog population, author commit percentages and more</li>
<li><a href="https://github.com/qw3rtman/git-fire" target="_blank" rel="noopener noreffer">git-fire</a> - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。</li>
<li><a href="https://github.com/git-tips/tips" target="_blank" rel="noopener noreffer">git-tips</a> - Git 小提示</li>
<li><a href="https://github.com/Originate/git-town" target="_blank" rel="noopener noreffer">git-town</a> - 通用，高级 Git 工作流支持！ <a href="http://www.git-town.com" target="_blank" rel="noopener noreffer">http://www.git-town.com</a></li>
</ul>
<h2 id="gui-客户端gui-clients">GUI 客户端(GUI Clients)</h2>
<ul>
<li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener noreffer">GitKraken</a> - 豪华的 Git 客户端 Windows, Mac &amp; Linux</li>
<li><a href="https://git-cola.github.io/" target="_blank" rel="noopener noreffer">git-cola</a> - 另外一个 Git 客户端 Windows &amp; OS X</li>
<li><a href="https://github.com/git-up/GitUp" target="_blank" rel="noopener noreffer">GitUp</a> - 一个新的 Git 客户端，在处理 Git 的复杂性上有自己的特点</li>
<li><a href="https://rowanj.github.io/gitx/" target="_blank" rel="noopener noreffer">gitx-dev</a> - 图形化的 Git 客户端 OS X</li>
<li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener noreffer">Source Tree</a> - 免费的图形化 Git 客户端 Windows &amp; OS X</li>
<li><a href="http://www.git-tower.com/" target="_blank" rel="noopener noreffer">Tower</a> - 图形化 Git 客户端 OS X(付费)</li>
</ul>
]]></description>
</item><item>
    <title>git版本控制</title>
    <link>https://www.jobcher.com/git2/</link>
    <pubDate>Mon, 28 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/git2/</guid>
    <description><![CDATA[<h1 id="git-版本控制">git 版本控制</h1>
<h2 id="版本回退">版本回退</h2>
<h3 id="1查看-git-提交历史">1.查看 git 提交历史</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1">#查看git提交历史</span>
</span></span><span class="line"><span class="cl">git log
</span></span></code></pre></td></tr></table>
</div>
</div><p><br>
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --pretty<span class="o">=</span>oneline
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2回退到上一个版本">2.回退到上一个版本</h3>
<p><code>Git</code>必须知道当前版本是哪个版本，在 Git 中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>b534d741..</code>（注意我的提交 ID 和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上 100 个版本写 100 个^比较容易数不过来，所以写成<code>HEAD~100</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset --hard HEAD^
</span></span></code></pre></td></tr></table>
</div>
</div><p>最新的那个版本已经看不到了，可以顺着往上找，找到那个版本的 ID</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset --hard c8275ca
</span></span></code></pre></td></tr></table>
</div>
</div><p>Git 在内部有个指向当前版本的<code>HEAD</code>指针,当你回退版本的时候，Git 仅仅是把<code>HEAD</code>从指向<code>update</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">┌────┐
</span></span><span class="line"><span class="cl">│HEAD│
</span></span><span class="line"><span class="cl">└────┘
</span></span><span class="line"><span class="cl">   │
</span></span><span class="line"><span class="cl">   └──&gt; ○ update
</span></span><span class="line"><span class="cl">        │
</span></span><span class="line"><span class="cl">        ○ Create README.md
</span></span><span class="line"><span class="cl">        │
</span></span><span class="line"><span class="cl">        ○ init
</span></span></code></pre></td></tr></table>
</div>
</div><p>改为指向 Create README.md：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">┌────┐
</span></span><span class="line"><span class="cl">│HEAD│
</span></span><span class="line"><span class="cl">└────┘
</span></span><span class="line"><span class="cl">   │
</span></span><span class="line"><span class="cl">   │    ○ update
</span></span><span class="line"><span class="cl">   │    │
</span></span><span class="line"><span class="cl">   └──&gt; ○ Create README.md
</span></span><span class="line"><span class="cl">        │
</span></span><span class="line"><span class="cl">        ○ init
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？<br>
在 Git 中，总是有后悔药可以吃的。当你用$ <code>git reset --hard HEAD^</code>回退到<code>Create README.md</code>版本时，再想恢复到<code>update</code>，就必须找到<code>update</code>的 commit id。Git 提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reflog
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3总结一下">3.总结一下：</h3>
<ol>
<li><code>HEAD</code>指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ol>
<h2 id="工作区和暂存区">工作区和暂存区</h2>
<p><code>工作区</code>（Working Directory）<br>
就是你在电脑里能看到的目录，比如我的<code>shell</code>文件夹就是一个工作区<br>
<code>版本库</code>（Repository）<br>
工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</p>
<h2 id="管理修改">管理修改</h2>
<p>那怎么提交第二次修改呢？你可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先 git add 第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p>
<p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit </code></p>
<p>现在，你又理解了<code>Git</code>是如何跟踪修改的，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p>
<h2 id="撤销修改">撤销修改</h2>
<p><code>git checkout -- file</code>可以丢弃工作区的修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -- readme.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：<br>
一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p>
<h2 id="删除文件">删除文件</h2>
]]></description>
</item><item>
    <title>CICD 概念</title>
    <link>https://www.jobcher.com/devops/</link>
    <pubDate>Thu, 17 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/devops/</guid>
    <description><![CDATA[<h1 id="cicd-概念">CICD 概念</h1>
<h1 id="devops">DevOps</h1>
<p>Devlopment 和 Operation 的组合词</p>
<p>规划-》代码-》构建-》测试-》发布-》部署-》运营-》监控-》再次规划</p>
<ol>
<li>devOps 看作开发（软件工程）、技术运营和质量保障（QA）三者的交集</li>
<li>突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。</li>
<li>DevOps 希望做到的是软件产品交付过程中<code>IT工具链的打通</code>，使得各个团队减少时间损耗。更加高效的协同工作。良好的闭环可以大大增加整体的产出。</li>
</ol>
<h1 id="cicd">CICD</h1>
<p><code>持续</code>集成 <code>持续</code>部署<br>
</p>
<ol>
<li>持续集成<br>
持续集成是指软件个人研发的部分向软件整体部分交付，频繁进行集成以便更快地发现其中的错误。“持续集成”源自于极限编程（XP），是 12 最初的 12 种实践之一
Ci 需要具备这些：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">全面的自动化测试，这是实践持续集成和持续部署的基础，同时，选择合适的自动化测试工具也极其重要；
</span></span><span class="line"><span class="cl">灵活的基础设施。容器，虚拟化的存在让开发人员和QA不必再大费周折
</span></span><span class="line"><span class="cl">版本控制工具。如git，cvs，svn等
</span></span><span class="line"><span class="cl">自动化的构建和软件发布流程工具，如 Jenkins，flow.ci<span class="p">;</span>
</span></span><span class="line"><span class="cl">反馈机制，如构建/测试的失败，可以快速地反馈到相关负责人，以尽快解决达到一个更稳定的版本。
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>git使用方法</title>
    <link>https://www.jobcher.com/git/</link>
    <pubDate>Thu, 17 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/git/</guid>
    <description><![CDATA[<h1 id="git-使用方法">git 使用方法</h1>
<h2 id="一git-安装配置">一、git 安装配置</h2>
<ol>
<li>Debian/Ubuntu</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">    apt-get install libcurl4-gnutls-dev libexpat1-dev gettext <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libz-dev libssl-dev
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    apt-get install git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    git --version
</span></span><span class="line"><span class="cl">    git version 1.8.1.2
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>Centos/RedHat</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    yum install curl-devel expat-devel gettext-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    openssl-devel zlib-devel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    yum -y install git-core
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    git --version
</span></span><span class="line"><span class="cl">    git version 1.7.1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二git-拉取异常如何重新拉取">二、git 拉取异常如何重新拉取</h2>
<h3 id="1同一文件有修改产生冲突">1.同一文件有修改，产生冲突。</h3>
<ol>
<li>先将本地修改存储起来
使用<code>git stash</code>命令，这样本地的所有修改就都被暂时存储起来 。其中<code>stash@{0}</code>就是刚才保存的标记。后续可以通过此标记访问。</li>
<li>再次拉取代码</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git pull
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>还原暂存的内容</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash pop stash@<span class="o">{</span>0<span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>解决冲突
在存在冲突的文件中，<code>Updated upstream</code> 和<code>=====</code>之间的内容为拉取下来的代码，<code>=====</code>和<code>stashed changes</code>之间的内容就为本地修改的代码。解决完成之后，就可以正常的提交了。 5.删除<code>stash</code>
使用<code>git stash drop stash@{0}</code>命令，如果不加<code>stash</code>编号，默认的就是删除最新的，即编号为 0 的。或者<code>git stash clear</code>命令，清除所有<code>stash</code>。</li>
</ol>
<h3 id="2想要让某一个文件放弃修改同步服务器">2.想要让某一个文件放弃修改，同步服务器。</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout <span class="o">[</span>本地变动文件的路径<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3服务器代码完全替换和覆盖本地的代码改动">3.服务器代码完全替换和覆盖本地的代码改动。</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch --all
</span></span><span class="line"><span class="cl">git reset --hard origin/master
</span></span><span class="line"><span class="cl">git pull
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三git-命令表格">三、git 命令表格</h2>
<table>
<thead>
<tr>
<th style="text-align:left">专用名词</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Workspace</td>
<td style="text-align:left">工作区</td>
</tr>
<tr>
<td style="text-align:left">Index/Stage</td>
<td style="text-align:left">暂存区</td>
</tr>
<tr>
<td style="text-align:left">Repository</td>
<td style="text-align:left">仓库区（或本地仓库）</td>
</tr>
<tr>
<td style="text-align:left">Remote</td>
<td style="text-align:left">远程仓库</td>
</tr>
</tbody>
</table>
<p></p>
<h3 id="1新建代码仓库">1.新建代码仓库</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 在当前目录新建一个Git代码库</span>
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个目录，将其初始化为Git代码库</span>
</span></span><span class="line"><span class="cl">$ git init <span class="o">[</span>project-name<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载一个项目和它的整个代码历史</span>
</span></span><span class="line"><span class="cl">$ git clone <span class="o">[</span>url<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2配置">2.配置</h3>
<p>Git 的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 显示当前的Git配置</span>
</span></span><span class="line"><span class="cl">$ git config --list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑Git配置文件</span>
</span></span><span class="line"><span class="cl">$ git config -e <span class="o">[</span>--global<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置提交代码时的用户信息</span>
</span></span><span class="line"><span class="cl">$ git config <span class="o">[</span>--global<span class="o">]</span> user.name <span class="s2">&#34;[name]&#34;</span>
</span></span><span class="line"><span class="cl">$ git config <span class="o">[</span>--global<span class="o">]</span> user.email <span class="s2">&#34;[email address]&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3增加删除文件">3.增加/删除文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 添加指定文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span> ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加指定目录到暂存区，包括子目录</span>
</span></span><span class="line"><span class="cl">$ git add <span class="o">[</span>dir<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加当前目录的所有文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加每个变化前，都会要求确认</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 对于同一个文件的多处变化，可以实现分次提交</span>
</span></span><span class="line"><span class="cl">$ git add -p
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除工作区文件，并且将这次删除放入暂存区</span>
</span></span><span class="line"><span class="cl">$ git rm <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span> ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 停止追踪指定文件，但该文件会保留在工作区</span>
</span></span><span class="line"><span class="cl">$ git rm --cached <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 改名文件，并且将这个改名放入暂存区</span>
</span></span><span class="line"><span class="cl">$ git mv <span class="o">[</span>file-original<span class="o">]</span> <span class="o">[</span>file-renamed<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4代码提交">4.代码提交</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 提交暂存区到仓库区</span>
</span></span><span class="line"><span class="cl">$ git commit -m <span class="o">[</span>message<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交暂存区的指定文件到仓库区</span>
</span></span><span class="line"><span class="cl">$ git commit <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span> ... -m <span class="o">[</span>message<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交工作区自上次commit之后的变化，直接到仓库区</span>
</span></span><span class="line"><span class="cl">$ git commit -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交时显示所有diff信息</span>
</span></span><span class="line"><span class="cl">$ git commit -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用一次新的commit，替代上一次提交</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>
</span></span><span class="line"><span class="cl">$ git commit --amend -m <span class="o">[</span>message<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重做上一次commit，并包括指定文件的新变化</span>
</span></span><span class="line"><span class="cl">$ git commit --amend <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span> ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="5分支">5.分支</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 列出所有本地分支</span>
</span></span><span class="line"><span class="cl">$ git branch
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有远程分支</span>
</span></span><span class="line"><span class="cl">$ git branch -r
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有本地分支和远程分支</span>
</span></span><span class="line"><span class="cl">$ git branch -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个分支，但依然停留在当前分支</span>
</span></span><span class="line"><span class="cl">$ git branch <span class="o">[</span>branch-name<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个分支，并切换到该分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b <span class="o">[</span>branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个分支，指向指定commit</span>
</span></span><span class="line"><span class="cl">$ git branch <span class="o">[</span>branch<span class="o">]</span> <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个分支，与指定的远程分支建立追踪关系</span>
</span></span><span class="line"><span class="cl">$ git branch --track <span class="o">[</span>branch<span class="o">]</span> <span class="o">[</span>remote-branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 切换到指定分支，并更新工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout <span class="o">[</span>branch-name<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 切换到上一个分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 建立追踪关系，在现有分支与指定的远程分支之间</span>
</span></span><span class="line"><span class="cl">$ git branch --set-upstream <span class="o">[</span>branch<span class="o">]</span> <span class="o">[</span>remote-branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 合并指定分支到当前分支</span>
</span></span><span class="line"><span class="cl">$ git merge <span class="o">[</span>branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 选择一个commit，合并进当前分支</span>
</span></span><span class="line"><span class="cl">$ git cherry-pick <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除分支</span>
</span></span><span class="line"><span class="cl">$ git branch -d <span class="o">[</span>branch-name<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除远程分支</span>
</span></span><span class="line"><span class="cl">$ git push origin --delete <span class="o">[</span>branch-name<span class="o">]</span>
</span></span><span class="line"><span class="cl">$ git branch -dr <span class="o">[</span>remote/branch<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="6标签">6.标签</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 列出所有tag</span>
</span></span><span class="line"><span class="cl">$ git tag
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个tag在当前commit</span>
</span></span><span class="line"><span class="cl">$ git tag <span class="o">[</span>tag<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个tag在指定commit</span>
</span></span><span class="line"><span class="cl">$ git tag <span class="o">[</span>tag<span class="o">]</span> <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除本地tag</span>
</span></span><span class="line"><span class="cl">$ git tag -d <span class="o">[</span>tag<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除远程tag</span>
</span></span><span class="line"><span class="cl">$ git push origin :refs/tags/<span class="o">[</span>tagName<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看tag信息</span>
</span></span><span class="line"><span class="cl">$ git show <span class="o">[</span>tag<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交指定tag</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>tag<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交所有tag</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> --tags
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个分支，指向某个tag</span>
</span></span><span class="line"><span class="cl">$ git checkout -b <span class="o">[</span>branch<span class="o">]</span> <span class="o">[</span>tag<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="7查看信息">7.查看信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 显示有变更的文件</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示当前分支的版本历史</span>
</span></span><span class="line"><span class="cl">$ git log
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示commit历史，以及每次commit发生变更的文件</span>
</span></span><span class="line"><span class="cl">$ git log --stat
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 搜索提交历史，根据关键词</span>
</span></span><span class="line"><span class="cl">$ git log -S <span class="o">[</span>keyword<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个commit之后的所有变动，每个commit占据一行</span>
</span></span><span class="line"><span class="cl">$ git log <span class="o">[</span>tag<span class="o">]</span> HEAD --pretty<span class="o">=</span>format:%s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个commit之后的所有变动，其&#34;提交说明&#34;必须符合搜索条件</span>
</span></span><span class="line"><span class="cl">$ git log <span class="o">[</span>tag<span class="o">]</span> HEAD --grep feature
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个文件的版本历史，包括文件改名</span>
</span></span><span class="line"><span class="cl">$ git log --follow <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">$ git whatchanged <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示指定文件相关的每一次diff</span>
</span></span><span class="line"><span class="cl">$ git log -p <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示过去5次提交</span>
</span></span><span class="line"><span class="cl">$ git log -5 --pretty --oneline
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示所有提交过的用户，按提交次数排序</span>
</span></span><span class="line"><span class="cl">$ git shortlog -sn
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示指定文件是什么人在什么时间修改过</span>
</span></span><span class="line"><span class="cl">$ git blame <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示暂存区和工作区的差异</span>
</span></span><span class="line"><span class="cl">$ git diff
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示暂存区和上一个commit的差异</span>
</span></span><span class="line"><span class="cl">$ git diff --cached <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示工作区与当前分支最新commit之间的差异</span>
</span></span><span class="line"><span class="cl">$ git diff HEAD
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示两次提交之间的差异</span>
</span></span><span class="line"><span class="cl">$ git diff <span class="o">[</span>first-branch<span class="o">]</span>...<span class="o">[</span>second-branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示今天你写了多少行代码</span>
</span></span><span class="line"><span class="cl">$ git diff --shortstat <span class="s2">&#34;@{0 day ago}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某次提交的元数据和内容变化</span>
</span></span><span class="line"><span class="cl">$ git show <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某次提交发生变化的文件</span>
</span></span><span class="line"><span class="cl">$ git show --name-only <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某次提交时，某个文件的内容</span>
</span></span><span class="line"><span class="cl">$ git show <span class="o">[</span>commit<span class="o">]</span>:<span class="o">[</span>filename<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示当前分支的最近几次提交</span>
</span></span><span class="line"><span class="cl">$ git reflog
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="远程同步">远程同步</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 下载远程仓库的所有变动</span>
</span></span><span class="line"><span class="cl">$ git fetch <span class="o">[</span>remote<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示所有远程仓库</span>
</span></span><span class="line"><span class="cl">$ git remote -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个远程仓库的信息</span>
</span></span><span class="line"><span class="cl">$ git remote show <span class="o">[</span>remote<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 增加一个新的远程仓库，并命名</span>
</span></span><span class="line"><span class="cl">$ git remote add <span class="o">[</span>shortname<span class="o">]</span> <span class="o">[</span>url<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 取回远程仓库的变化，并与本地分支合并</span>
</span></span><span class="line"><span class="cl">$ git pull <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上传本地指定分支到远程仓库</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 强行推送当前分支到远程仓库，即使有冲突</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> --force
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 推送所有分支到远程仓库</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> --all
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="撤销">撤销</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 恢复暂存区的指定文件到工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 恢复某个commit的指定文件到暂存区和工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout <span class="o">[</span>commit<span class="o">]</span> <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 恢复暂存区的所有文件到工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>
</span></span><span class="line"><span class="cl">$ git reset <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重置暂存区与工作区，与上一次commit保持一致</span>
</span></span><span class="line"><span class="cl">$ git reset --hard
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>
</span></span><span class="line"><span class="cl">$ git reset <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>
</span></span><span class="line"><span class="cl">$ git reset --hard <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>
</span></span><span class="line"><span class="cl">$ git reset --keep <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个commit，用来撤销指定commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>
</span></span><span class="line"><span class="cl">$ git revert <span class="o">[</span>commit<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 暂时将未提交的变化移除，稍后再移入</span>
</span></span><span class="line"><span class="cl">$ git stash
</span></span><span class="line"><span class="cl">$ git stash pop
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="其他">其他</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 生成一个可供发布的压缩包</span>
</span></span><span class="line"><span class="cl">$ git archive
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Jenkins 安装与使用</title>
    <link>https://www.jobcher.com/jenkins/</link>
    <pubDate>Wed, 09 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/jenkins/</guid>
    <description><![CDATA[<h1 id="jenkins-安装与使用">Jenkins 安装与使用</h1>
<p>代码在本地修改&mdash;-》提交到远程 gitlab&mdash;-》触发 jenkins 整个自动化构建流程（打包，测试，发布，部署）</p>
<h2 id="安装-docker">安装 docker</h2>
<p><a href="https://www.jobcher.com/docker/" target="_blank" rel="noopener noreffer">安装 docker</a></p>
<h2 id="docker-安装-jenkins">docker 安装 jenkins</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -u root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -p 8080:8080 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -p 50000:50000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v jenkins-data:/var/jenkins_home <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /etc/localtime:/etc/localtime:ro <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart<span class="o">=</span>always <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  jenkinsci/blueocean
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="访问">访问</h2>
<p>http://localhost:8080</p>
<p>显示初始密码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti &lt;容器名称&gt; sh
</span></span><span class="line"><span class="cl">cat /var/jenkins_home/secrets/initialAdminPassword
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="工作流程">工作流程</h2>
<ol>
<li>先定义一个流水线项目，指定项目的 git 位置</li>
<li>git 位置自动拉取代码</li>
<li>解析拉取代码里面的 Jenkinsfile 文件</li>
<li>按照 Jenkinsfile 指定的流水线开始加工项目</li>
</ol>
<h2 id="jenkinsfile-语法">Jenkinsfile 语法</h2>
<p>基础语法,在仓库创建一个 <code>Jenkinsfile</code> 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">pipeline</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">/*</span> <span class="err">全部的CICD流程都在这里定义</span> <span class="err">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//任意代理可用就可以执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="err">agent</span> <span class="err">any</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//定义流水线的加工流程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="err">stages</span> <span class="err">{</span>
</span></span><span class="line"><span class="cl">        <span class="err">/*</span> <span class="err">流水线的所有阶段</span>
</span></span><span class="line"><span class="cl">            <span class="err">1.编译</span> <span class="nt">&#34;常量&#34;</span><span class="err">&#39;变量&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="mi">2</span><span class="err">.测试</span>
</span></span><span class="line"><span class="cl">            <span class="mi">3</span><span class="err">.打包</span>
</span></span><span class="line"><span class="cl">            <span class="mi">4</span><span class="err">.部署</span>
</span></span><span class="line"><span class="cl">        <span class="err">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="err">stage(&#39;代码编译&#39;)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="err">steps</span> <span class="err">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//要做的所有事情
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="err">echo</span> <span class="nt">&#34;编译……&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="err">stage(&#39;代码测试&#39;)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="err">steps</span> <span class="err">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//要做的所有事情
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="err">echo</span> <span class="nt">&#34;测试……&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="err">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="err">stage(&#39;打包&#39;)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="err">steps</span> <span class="err">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//要做的所有事情
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="err">echo</span> <span class="nt">&#34;打包……&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="err">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="err">stage(&#39;部署&#39;)</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="err">steps</span> <span class="err">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//要做的所有事情
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="err">echo</span> <span class="nt">&#34;部署……&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="err">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">}</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="构建远程触发">构建远程触发</h2>
<ol>
<li>
<p>在 jenkins 上选择:项目-&gt;配置-&gt;构建触发器-&gt;勾选触发远程构建<br>
</p>
</li>
<li>
<p>新疆 gitlab 账户，登录新用户并天剑 token 令牌<br>
<br>
</p>
</li>
<li>
<p>找到 gitlab 设置-&gt;webhook<br>
<br>
网站格式</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">http://&lt;USER&gt;:&lt;TOKENAPI&gt;@&lt;JENKINS-URL&gt;/job/test-blog-demo/build?token=&lt;TOKEN&gt;
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>gitlab与github同步项目</title>
    <link>https://www.jobcher.com/gitrsync/</link>
    <pubDate>Mon, 27 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/gitrsync/</guid>
    <description><![CDATA[<h1 id="gitlab-与-github-同步项目">gitlab 与 github 同步项目</h1>
<ol>
<li>本地同步项目</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>创建一个同名的项目,命令行终端中添加 remote 地址</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote add githubOrigin git@github.com:sjtfreaks/blog.git
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>项目同步到 Github 上</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push -u githubOrigin main
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>分别同步 github 与 gitlab 即可</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push -u githubOrigin main
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>git技巧</title>
    <link>https://www.jobcher.com/gitlab/</link>
    <pubDate>Fri, 10 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/gitlab/</guid>
    <description><![CDATA[<h1 id="git-技巧">git 技巧</h1>
<p>Git 是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>
<p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 &ldquo;页面内查找&rdquo; 的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>
<h2 id="开卷必读">开卷必读</h2>
<p><em>如果之前未使用过 Git，可以学习 <a href="https://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener noreffer">Git 小白教程</a>入门</em></p>
<ol>
<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>
<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>
<li>统一概念：
<ul>
<li>工作区：改动（增删文件和内容）</li>
<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li>
<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li>
<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li>
<li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li>
</ul>
</li>
<li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues" target="_blank" rel="noopener noreffer">反馈问题</a>😊</li>
</ol>
<h2 id="目录">目录</h2>
<ul>
<li><a href="#%e8%84%91%e5%9b%be" rel="">脑图</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e5%b8%ae%e5%8a%a9%e4%bf%a1%e6%81%af" rel="">展示帮助信息</a></li>
<li><a href="#%e5%9b%9e%e5%88%b0%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e7%9a%84%e7%8a%b6%e6%80%81" rel="">回到远程仓库的状态</a></li>
<li><a href="#%e9%87%8d%e8%ae%be%e7%ac%ac%e4%b8%80%e4%b8%aa-commit" rel="">重设第一个 commit</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b%e5%86%b2%e7%aa%81%e6%96%87%e4%bb%b6%e5%88%97%e8%a1%a8" rel="">查看冲突文件列表</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e5%b7%a5%e4%bd%9c%e5%8c%ba%e5%92%8c%e6%9a%82%e5%ad%98%e5%8c%ba%e7%9a%84%e4%b8%8d%e5%90%8c" rel="">展示工作区和暂存区的不同</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%9a%82%e5%ad%98%e5%8c%ba%e5%92%8c%e6%9c%80%e8%bf%91%e7%89%88%e6%9c%ac%e7%9a%84%e4%b8%8d%e5%90%8c" rel="">展示暂存区和最近版本的不同</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%9a%82%e5%ad%98%e5%8c%ba%e5%b7%a5%e4%bd%9c%e5%8c%ba%e5%92%8c%e6%9c%80%e8%bf%91%e7%89%88%e6%9c%ac%e7%9a%84%e4%b8%8d%e5%90%8c" rel="">展示暂存区、工作区和最近版本的不同</a></li>
<li><a href="#%e5%bf%ab%e9%80%9f%e5%88%87%e6%8d%a2%e5%88%b0%e4%b8%8a%e4%b8%80%e4%b8%aa%e5%88%86%e6%94%af" rel="">快速切换到上一个分支</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e5%b7%b2%e7%bb%8f%e5%90%88%e5%b9%b6%e5%88%b0-master-%e7%9a%84%e5%88%86%e6%94%af" rel="">删除已经合并到 master 的分支</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e5%85%b3%e8%81%94%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e7%9a%84%e6%83%85%e5%86%b5" rel="">展示本地分支关联远程仓库的情况</a></li>
<li><a href="#%e5%85%b3%e8%81%94%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af" rel="">关联远程分支</a></li>
<li><a href="#%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af" rel="">列出所有远程分支</a></li>
<li><a href="#%e5%88%97%e5%87%ba%e6%9c%ac%e5%9c%b0%e5%92%8c%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af" rel="">列出本地和远程分支</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af%e5%92%8c%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e7%9a%84%e5%af%b9%e5%ba%94%e5%85%b3%e7%b3%bb" rel="">查看远程分支和本地分支的对应关系</a></li>
<li><a href="#%e8%bf%9c%e7%a8%8b%e5%88%a0%e9%99%a4%e4%ba%86%e5%88%86%e6%94%af%e6%9c%ac%e5%9c%b0%e4%b9%9f%e6%83%b3%e5%88%a0%e9%99%a4" rel="">远程删除了分支本地也想删除</a></li>
<li><a href="#%e5%88%9b%e5%bb%ba%e5%b9%b6%e5%88%87%e6%8d%a2%e5%88%b0%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af" rel="">创建并切换到本地分支</a></li>
<li><a href="#%e4%bb%8e%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af%e4%b8%ad%e5%88%9b%e5%bb%ba%e5%b9%b6%e5%88%87%e6%8d%a2%e5%88%b0%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af" rel="">从远程分支中创建并切换到本地分支</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af" rel="">删除本地分支</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af" rel="">删除远程分支</a></li>
<li><a href="#%e9%87%8d%e5%91%bd%e5%90%8d%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af" rel="">重命名本地分支</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b%e6%a0%87%e7%ad%be" rel="">查看标签</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b%e6%a0%87%e7%ad%be%e8%af%a6%e7%bb%86%e4%bf%a1%e6%81%af" rel="">查看标签详细信息</a></li>
<li><a href="#%e6%9c%ac%e5%9c%b0%e5%88%9b%e5%bb%ba%e6%a0%87%e7%ad%be" rel="">本地创建标签</a></li>
<li><a href="#%e6%8e%a8%e9%80%81%e6%a0%87%e7%ad%be%e5%88%b0%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93" rel="">推送标签到远程仓库</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e6%9c%ac%e5%9c%b0%e6%a0%87%e7%ad%be" rel="">删除本地标签</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e8%bf%9c%e7%a8%8b%e6%a0%87%e7%ad%be" rel="">删除远程标签</a></li>
<li><a href="#%e5%88%87%e5%9b%9e%e5%88%b0%e6%9f%90%e4%b8%aa%e6%a0%87%e7%ad%be" rel="">切回到某个标签</a></li>
<li><a href="#%e6%94%be%e5%bc%83%e5%b7%a5%e4%bd%9c%e5%8c%ba%e7%9a%84%e4%bf%ae%e6%94%b9" rel="">放弃工作区的修改</a></li>
<li><a href="#%e6%81%a2%e5%a4%8d%e5%88%a0%e9%99%a4%e7%9a%84%e6%96%87%e4%bb%b6" rel="">恢复删除的文件</a></li>
<li><a href="#%e4%bb%a5%e6%96%b0%e5%a2%9e%e4%b8%80%e4%b8%aa-commit-%e7%9a%84%e6%96%b9%e5%bc%8f%e8%bf%98%e5%8e%9f%e6%9f%90%e4%b8%80%e4%b8%aa-commit-%e7%9a%84%e4%bf%ae%e6%94%b9" rel="">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>
<li><a href="#%e5%9b%9e%e5%88%b0%e6%9f%90%e4%b8%aa-commit-%e7%9a%84%e7%8a%b6%e6%80%81%e5%b9%b6%e5%88%a0%e9%99%a4%e5%90%8e%e9%9d%a2%e7%9a%84-commit" rel="">回到某个 commit 的状态，并删除后面的 commit</a></li>
<li><a href="#%e4%bf%ae%e6%94%b9%e4%b8%8a%e4%b8%80%e4%b8%aa-commit-%e7%9a%84%e6%8f%8f%e8%bf%b0" rel="">修改上一个 commit 的描述</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b-commit-%e5%8e%86%e5%8f%b2" rel="">查看 commit 历史</a></li>
<li><a href="#%e6%98%be%e7%a4%ba%e6%9c%ac%e5%9c%b0%e6%9b%b4%e6%96%b0%e8%bf%87-head-%e7%9a%84-git-%e5%91%bd%e4%bb%a4%e8%ae%b0%e5%bd%95" rel="">显示本地更新过 HEAD 的 git 命令记录</a></li>
<li><a href="#%e4%bf%ae%e6%94%b9%e4%bd%9c%e8%80%85%e5%90%8d" rel="">修改作者名</a></li>
<li><a href="#%e4%bf%ae%e6%94%b9%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e7%9a%84-url" rel="">修改远程仓库的 url</a></li>
<li><a href="#%e5%a2%9e%e5%8a%a0%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93" rel="">增加远程仓库</a></li>
<li><a href="#%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93" rel="">列出所有远程仓库</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b%e4%b8%a4%e4%b8%aa%e6%98%9f%e6%9c%9f%e5%86%85%e7%9a%84%e6%94%b9%e5%8a%a8" rel="">查看两个星期内的改动</a></li>
<li><a href="#%e6%8a%8a-A-%e5%88%86%e6%94%af%e7%9a%84%e6%9f%90%e4%b8%80%e4%b8%aa-commit%e6%94%be%e5%88%b0-B-%e5%88%86%e6%94%af%e4%b8%8a" rel="">把 A 分支的某一个 commit，放到 B 分支上</a></li>
<li><a href="#%e7%bb%99-git-%e5%91%bd%e4%bb%a4%e8%b5%b7%e5%88%ab%e5%90%8d" rel="">给 git 命令起别名</a></li>
<li><a href="#%e5%ad%98%e5%82%a8%e5%bd%93%e5%89%8d%e7%9a%84%e4%bf%ae%e6%94%b9%e4%bd%86%e4%b8%8d%e7%94%a8%e6%8f%90%e4%ba%a4-commit" rel="">存储当前的修改，但不用提交 commit</a></li>
<li><a href="#%e4%bf%9d%e5%ad%98%e5%bd%93%e5%89%8d%e7%8a%b6%e6%80%81%e5%8c%85%e6%8b%ac-untracked-%e7%9a%84%e6%96%87%e4%bb%b6" rel="">保存当前状态，包括 untracked 的文件</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%89%80%e6%9c%89-stashes" rel="">展示所有 stashes</a></li>
<li><a href="#%e5%9b%9e%e5%88%b0%e6%9f%90%e4%b8%aa-stash-%e7%9a%84%e7%8a%b6%e6%80%81" rel="">回到某个 stash 的状态</a></li>
<li><a href="#%e5%9b%9e%e5%88%b0%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa-stash-%e7%9a%84%e7%8a%b6%e6%80%81%e5%b9%b6%e5%88%a0%e9%99%a4%e8%bf%99%e4%b8%aa-stash" rel="">回到最后一个 stash 的状态，并删除这个 stash</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e6%89%80%e6%9c%89%e7%9a%84-stash" rel="">删除所有的 stash</a></li>
<li><a href="#%e4%bb%8e-stash-%e4%b8%ad%e6%8b%bf%e5%87%ba%e6%9f%90%e4%b8%aa%e6%96%87%e4%bb%b6%e7%9a%84%e4%bf%ae%e6%94%b9" rel="">从 stash 中拿出某个文件的修改</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%89%80%e6%9c%89-tracked-%e7%9a%84%e6%96%87%e4%bb%b6" rel="">展示所有 tracked 的文件</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%89%80%e6%9c%89-untracked-%e7%9a%84%e6%96%87%e4%bb%b6" rel="">展示所有 untracked 的文件</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%89%80%e6%9c%89%e5%bf%bd%e7%95%a5%e7%9a%84%e6%96%87%e4%bb%b6" rel="">展示所有忽略的文件</a></li>
<li><a href="#%e5%bc%ba%e5%88%b6%e5%88%a0%e9%99%a4-untracked-%e7%9a%84%e6%96%87%e4%bb%b6" rel="">强制删除 untracked 的文件</a></li>
<li><a href="#%e5%bc%ba%e5%88%b6%e5%88%a0%e9%99%a4-untracked-%e7%9a%84%e7%9b%ae%e5%bd%95" rel="">强制删除 untracked 的目录</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e7%ae%80%e5%8c%96%e7%9a%84-commit-%e5%8e%86%e5%8f%b2" rel="">展示简化的 commit 历史</a></li>
<li><a href="#%e6%9f%a5%e7%9c%8b%e6%9f%90%e6%ae%b5%e4%bb%a3%e7%a0%81%e6%98%af%e8%b0%81%e5%86%99%e7%9a%84" rel="">查看某段代码是谁写的</a></li>
<li><a href="#%e6%8a%8a%e6%9f%90%e4%b8%80%e4%b8%aa%e5%88%86%e6%94%af%e5%af%bc%e5%87%ba%e6%88%90%e4%b8%80%e4%b8%aa%e6%96%87%e4%bb%b6" rel="">把某一个分支导出成一个文件</a></li>
<li><a href="#%e4%bb%8e%e5%8c%85%e4%b8%ad%e5%af%bc%e5%85%a5%e5%88%86%e6%94%af" rel="">从包中导入分支</a></li>
<li><a href="#%e6%89%a7%e8%a1%8c-rebase-%e4%b9%8b%e5%89%8d%e8%87%aa%e5%8a%a8-stash" rel="">执行 rebase 之前自动 stash</a></li>
<li><a href="#%e4%bb%8e%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e6%a0%b9%e6%8d%ae-ID-%e6%8b%89%e4%b8%8b%e6%9f%90%e4%b8%80%e7%8a%b6%e6%80%81-%e5%88%b0%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af" rel="">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>
<li><a href="#%e8%af%a6%e7%bb%86%e5%b1%95%e7%a4%ba%e4%b8%80%e8%a1%8c%e4%b8%ad%e7%9a%84%e4%bf%ae%e6%94%b9" rel="">详细展示一行中的修改</a></li>
<li><a href="#%e6%b8%85%e9%99%a4-gitignore-%e6%96%87%e4%bb%b6%e4%b8%ad%e8%ae%b0%e5%bd%95%e7%9a%84%e6%96%87%e4%bb%b6" rel="">清除 <code>.gitignore</code> 文件中记录的文件</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e6%89%80%e6%9c%89-alias-%e5%92%8c-configs" rel="">展示所有 alias 和 configs</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e5%bf%bd%e7%95%a5%e7%9a%84%e6%96%87%e4%bb%b6" rel="">展示忽略的文件</a></li>
<li><a href="#commit-%e5%8e%86%e5%8f%b2%e4%b8%ad%e6%98%be%e7%a4%ba-Branch1-%e6%9c%89%e7%9a%84%e4%bd%86%e6%98%af-Branch2-%e6%b2%a1%e6%9c%89-commit" rel="">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>
<li><a href="#%e5%9c%a8-commit-log-%e4%b8%ad%e6%98%be%e7%a4%ba-GPG-%e7%ad%be%e5%90%8d" rel="">在 commit log 中显示 GPG 签名</a></li>
<li><a href="#%e5%88%a0%e9%99%a4%e5%85%a8%e5%b1%80%e8%ae%be%e7%bd%ae" rel="">删除全局设置</a></li>
<li><a href="#%e6%96%b0%e5%bb%ba%e5%b9%b6%e5%88%87%e6%8d%a2%e5%88%b0%e6%96%b0%e5%88%86%e6%94%af%e4%b8%8a%e5%90%8c%e6%97%b6%e8%bf%99%e4%b8%aa%e5%88%86%e6%94%af%e6%b2%a1%e6%9c%89%e4%bb%bb%e4%bd%95-commit" rel="">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>
<li><a href="#%e5%b1%95%e7%a4%ba%e4%bb%bb%e6%84%8f%e5%88%86%e6%94%af%e6%9f%90%e4%b8%80%e6%96%87%e4%bb%b6%e7%9a%84%e5%86%85%e5%ae%b9" rel="">展示任意分支某一文件的内容</a></li>
<li><a href="#clone-%e4%b8%8b%e6%9d%a5%e6%8c%87%e5%ae%9a%e7%9a%84%e5%8d%95%e4%b8%80%e5%88%86%e6%94%af" rel="">clone 下来指定的单一分支</a></li>
<li><a href="#clone-%e6%9c%80%e6%96%b0%e4%b8%80%e6%ac%a1%e6%8f%90%e4%ba%a4" rel="">clone 最新一次提交</a></li>
<li><a href="#%e5%bf%bd%e7%95%a5%e6%9f%90%e4%b8%aa%e6%96%87%e4%bb%b6%e7%9a%84%e6%94%b9%e5%8a%a8" rel="">忽略某个文件的改动</a></li>
<li><a href="#%e5%bf%bd%e7%95%a5%e6%96%87%e4%bb%b6%e7%9a%84%e6%9d%83%e9%99%90%e5%8f%98%e5%8c%96" rel="">忽略文件的权限变化</a></li>
<li><a href="#%e4%bb%a5%e6%9c%80%e5%90%8e%e6%8f%90%e4%ba%a4%e7%9a%84%e9%a1%ba%e5%ba%8f%e5%88%97%e5%87%ba%e6%89%80%e6%9c%89-Git-%e5%88%86%e6%94%af" rel="">以最后提交的顺序列出所有 Git 分支</a></li>
<li><a href="#%e5%9c%a8-commit-log-%e4%b8%ad%e6%9f%a5%e6%89%be%e7%9b%b8%e5%85%b3%e5%86%85%e5%ae%b9" rel="">在 commit log 中查找相关内容</a></li>
<li><a href="#%e6%8a%8a%e6%9a%82%e5%ad%98%e5%8c%ba%e7%9a%84%e6%8c%87%e5%ae%9a-file-%e6%94%be%e5%88%b0%e5%b7%a5%e4%bd%9c%e5%8c%ba%e4%b8%ad" rel="">把暂存区的指定 file 放到工作区中</a></li>
<li><a href="#%e5%bc%ba%e5%88%b6%e6%8e%a8%e9%80%81" rel="">强制推送</a></li>
<li><a href="#git-%e9%85%8d%e7%bd%ae-http-%e5%92%8c-socks-%e4%bb%a3%e7%90%86" rel="">git 配置 http 和 socks 代理</a></li>
<li><a href="#git-%e9%85%8d%e7%bd%ae-ssh-%e4%bb%a3%e7%90%86" rel="">git 配置 ssh 代理</a></li>
<li><a href="#%e4%bc%98%e9%9b%85%e7%9a%84Commit%e4%bf%a1%e6%81%af" rel="">优雅的 Commit 信息</a></li>
<li><a href="#commit%e5%b7%a5%e5%85%b7" rel="">commit 工具</a></li>
<li><a href="#%e5%a3%b0%e6%98%8e" rel="">声明</a></li>
</ul>
<h2 id="展示帮助信息">展示帮助信息</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git <span class="nb">help</span> -g
</span></span></code></pre></td></tr></table>
</div>
</div><p>The command output as below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-v" data-lang="v"><span class="line"><span class="cl"><span class="nc">The</span> <span class="nv">common</span> <span class="nc">Git</span> <span class="nv">guides</span> <span class="nl">are</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="nv">attributes</span>          <span class="nc">Defining</span> <span class="nv">attributes</span> <span class="nv">per</span> <span class="nv">path</span>
</span></span><span class="line"><span class="cl">   <span class="nv">cli</span>                 <span class="nc">Git</span> <span class="nv">command</span><span class="o">-</span><span class="nv">line</span> <span class="kd">interface</span> <span class="nv">and</span> <span class="nv">conventions</span>
</span></span><span class="line"><span class="cl">   <span class="nv">core</span><span class="o">-</span><span class="nv">tutorial</span>       <span class="nc">A</span> <span class="nc">Git</span> <span class="nv">core</span> <span class="nv">tutorial</span> <span class="k">for</span> <span class="nv">developers</span>
</span></span><span class="line"><span class="cl">   <span class="nv">cvs</span><span class="o">-</span><span class="nv">migration</span>       <span class="nc">Git</span> <span class="k">for</span> <span class="nc">CVS</span> <span class="nv">users</span>
</span></span><span class="line"><span class="cl">   <span class="nv">diffcore</span>            <span class="nc">Tweaking</span> <span class="nv">diff</span> <span class="nv">output</span>
</span></span><span class="line"><span class="cl">   <span class="nv">everyday</span>            <span class="nc">A</span> <span class="nv">useful</span> <span class="nv">minimum</span> <span class="nv">set</span> <span class="nv">of</span> <span class="nv">commands</span> <span class="k">for</span> <span class="nc">Everyday</span> <span class="nc">Git</span>
</span></span><span class="line"><span class="cl">   <span class="nv">glossary</span>            <span class="nc">A</span> <span class="nc">Git</span> <span class="nc">Glossary</span>
</span></span><span class="line"><span class="cl">   <span class="nv">hooks</span>               <span class="nc">Hooks</span> <span class="nv">used</span> <span class="nv">by</span> <span class="nc">Git</span>
</span></span><span class="line"><span class="cl">   <span class="nv">ignore</span>              <span class="nc">Specifies</span> <span class="nv">intentionally</span> <span class="nv">untracked</span> <span class="nv">files</span> <span class="nv">to</span> <span class="nv">ignore</span>
</span></span><span class="line"><span class="cl">   <span class="nv">modules</span>             <span class="nc">Defining</span> <span class="nv">submodule</span> <span class="nv">properties</span>
</span></span><span class="line"><span class="cl">   <span class="nv">namespaces</span>          <span class="nc">Git</span> <span class="nv">namespaces</span>
</span></span><span class="line"><span class="cl">   <span class="nv">repository</span><span class="o">-</span><span class="nv">layout</span>    <span class="nc">Git</span> <span class="nc">Repository</span> <span class="nc">Layout</span>
</span></span><span class="line"><span class="cl">   <span class="nv">revisions</span>           <span class="nc">Specifying</span> <span class="nv">revisions</span> <span class="nv">and</span> <span class="nv">ranges</span> <span class="k">for</span> <span class="nc">Git</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tutorial</span>            <span class="nc">A</span> <span class="nv">tutorial</span> <span class="nv">introduction</span> <span class="nv">to</span> <span class="nc">Git</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tutorial</span><span class="o">-</span><span class="mi">2</span>          <span class="nc">A</span> <span class="nv">tutorial</span> <span class="nv">introduction</span> <span class="nv">to</span> <span class="nc">Git</span><span class="p">:</span> <span class="nv">part</span> <span class="nv">two</span>
</span></span><span class="line"><span class="cl">   <span class="nv">workflows</span>           <span class="nc">An</span> <span class="nv">overview</span> <span class="nv">of</span> <span class="nv">recommended</span> <span class="nv">workflows</span> <span class="nv">with</span> <span class="nc">Git</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s1">&#39;git help -a&#39;</span> <span class="nv">and</span> <span class="s1">&#39;git help -g&#39;</span> <span class="nv">list</span> <span class="nv">available</span> <span class="nv">subcommands</span> <span class="nv">and</span> <span class="nv">some</span> <span class="nv">concept</span> <span class="nv">guides</span><span class="p">.</span> <span class="nc">See</span> <span class="s1">&#39;git help &lt;command&gt;&#39;</span> <span class="k">or</span> <span class="s1">&#39;git help &lt;concept&gt;&#39;</span> <span class="nv">to</span> <span class="nv">read</span> <span class="nv">about</span> <span class="nv">a</span> <span class="nv">specific</span> <span class="nv">subcommand</span> <span class="k">or</span> <span class="nv">concept</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回到远程仓库的状态">回到远程仓库的状态</h2>
<p>抛弃本地所有的修改，回到远程仓库的状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch --all <span class="o">&amp;&amp;</span> git reset --hard origin/master
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="重设第一个-commit">重设第一个 commit</h2>
<p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-ref -d HEAD
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看冲突文件列表">查看冲突文件列表</h2>
<p>展示工作区的冲突文件列表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --name-only --diff-filter<span class="o">=</span>U
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示工作区和暂存区的不同">展示工作区和暂存区的不同</h2>
<p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff &lt;commit-id&gt; &lt;commit-id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示暂存区和最近版本的不同">展示暂存区和最近版本的不同</h2>
<p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --cached
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示暂存区工作区和最近版本的不同">展示暂存区、工作区和最近版本的不同</h2>
<p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff HEAD
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="快速切换到上一个分支">快速切换到上一个分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除已经合并到-master-的分支">删除已经合并到 master 的分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch --merged master <span class="p">|</span> grep -v <span class="s1">&#39;^\*\|  master&#39;</span> <span class="p">|</span> xargs -n <span class="m">1</span> git branch -d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示本地分支关联远程仓库的情况">展示本地分支关联远程仓库的情况</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -vv
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="关联远程分支">关联远程分支</h2>
<p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -u origin/mybranch
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者在 push 时加上 <code>-u</code> 参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin/mybranch -u
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="列出所有远程分支">列出所有远程分支</h2>
<p>-r 参数相当于：remote</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -r
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="列出本地和远程分支">列出本地和远程分支</h2>
<p>-a 参数相当于：all</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -a
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看远程分支和本地分支的对应关系">查看远程分支和本地分支的对应关系</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote show origin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="远程删除了分支本地也想删除">远程删除了分支本地也想删除</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote prune origin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="创建并切换到本地分支">创建并切换到本地分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -b &lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="从远程分支中创建并切换到本地分支">从远程分支中创建并切换到本地分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除本地分支">删除本地分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -d &lt;local-branchname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除远程分支">删除远程分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin --delete &lt;remote-branchname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin :&lt;remote-branchname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="重命名本地分支">重命名本地分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -m &lt;new-branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看标签">查看标签</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag
</span></span></code></pre></td></tr></table>
</div>
</div><p>展示当前分支的最近的 tag</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git describe --tags --abbrev<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看标签详细信息">查看标签详细信息</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag -ln
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="本地创建标签">本地创建标签</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag &lt;version-number&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ git tag -a &lt;version-number&gt; -m <span class="s2">&#34;v1.0 发布(描述)&#34;</span> &lt;commit-id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="推送标签到远程仓库">推送标签到远程仓库</h2>
<p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin &lt;local-version-number&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>一次性推送所有标签，同步到远程仓库：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin --tags
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除本地标签">删除本地标签</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag -d &lt;tag-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除远程标签">删除远程标签</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin --delete tag &lt;tagname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="切回到某个标签">切回到某个标签</h2>
<p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -b branch_name tag_name
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="放弃工作区的修改">放弃工作区的修改</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;file-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>放弃所有修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout .
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="恢复删除的文件">恢复删除的文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rev-list -n <span class="m">1</span> HEAD -- &lt;file_path&gt; <span class="c1">#得到 deleting_commit</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="c1">#回到删除文件 deleting_commit 之前的状态</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="以新增一个-commit-的方式还原某一个-commit-的修改">以新增一个 commit 的方式还原某一个 commit 的修改</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git revert &lt;commit-id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回到某个-commit-的状态并删除后面的-commit">回到某个 commit 的状态，并删除后面的 commit</h2>
<p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset &lt;commit-id&gt;  <span class="c1">#默认就是-mixed参数。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git reset --mixed HEAD^  <span class="c1">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git reset --soft HEAD~3  <span class="c1">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git reset --hard &lt;commit-id&gt;  <span class="c1">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="修改上一个-commit-的描述">修改上一个 commit 的描述</h2>
<p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --amend
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看-commit-历史">查看 commit 历史</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看某段代码是谁写的">查看某段代码是谁写的</h2>
<p>blame 的意思为‘责怪’，你懂的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git blame &lt;file-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="显示本地更新过-head-的-git-命令记录">显示本地更新过 HEAD 的 git 命令记录</h2>
<p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。
这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reflog
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="修改作者名">修改作者名</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --amend --author<span class="o">=</span><span class="s1">&#39;Author Name &lt;email@address.com&gt;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="修改远程仓库的-url">修改远程仓库的 url</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote set-url origin &lt;URL&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="增加远程仓库">增加远程仓库</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote add origin &lt;remote-url&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="列出所有远程仓库">列出所有远程仓库</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查看两个星期内的改动">查看两个星期内的改动</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git whatchanged --since<span class="o">=</span><span class="s1">&#39;2 weeks ago&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="把-a-分支的某一个-commit放到-b-分支上">把 A 分支的某一个 commit，放到 B 分支上</h2>
<p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928" target="_blank" rel="noopener noreffer">参考</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;branch-name&gt; <span class="o">&amp;&amp;</span> git cherry-pick &lt;commit-id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="给-git-命令起别名">给 git 命令起别名</h2>
<p>简化命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global alias.&lt;handle&gt; &lt;command&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">比如：git status 改成 git st，这样可以简化命令
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global alias.st status
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="存储当前的修改但不用提交-commit">存储当前的修改，但不用提交 commit</h2>
<p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" target="_blank" rel="noopener noreffer">廖雪峰老师的 git 教程</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="保存当前状态包括-untracked-的文件">保存当前状态，包括 untracked 的文件</h2>
<p>untracked 文件：新建的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash -u
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示所有-stashes">展示所有 stashes</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash list
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回到某个-stash-的状态">回到某个 stash 的状态</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash apply &lt;stash@<span class="o">{</span>n<span class="o">}</span>&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回到最后一个-stash-的状态并删除这个-stash">回到最后一个 stash 的状态，并删除这个 stash</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash pop
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除所有的-stash">删除所有的 stash</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash clear
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="从-stash-中拿出某个文件的修改">从 stash 中拿出某个文件的修改</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;stash@<span class="o">{</span>n<span class="o">}</span>&gt; -- &lt;file-path&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示所有-tracked-的文件">展示所有 tracked 的文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files -t
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示所有-untracked-的文件">展示所有 untracked 的文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files --others
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示所有忽略的文件">展示所有忽略的文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files --others -i --exclude-standard
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="强制删除-untracked-的文件">强制删除 untracked 的文件</h2>
<p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>
<ol>
<li>clean 后，删除的文件无法找回</li>
<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean &lt;file-name&gt; -f
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="强制删除-untracked-的目录">强制删除 untracked 的目录</h2>
<p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean &lt;directory-name&gt; -df
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示简化的-commit-历史">展示简化的 commit 历史</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --pretty<span class="o">=</span>oneline --graph --decorate --all
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="把某一个分支导出成一个文件">把某一个分支导出成一个文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git bundle create &lt;file&gt; &lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="从包中导入分支">从包中导入分支</h2>
<p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="执行-rebase-之前自动-stash">执行 rebase 之前自动 stash</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rebase --autostash
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="从远程仓库根据-id拉下某一状态到本地分支">从远程仓库根据 ID，拉下某一状态，到本地分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="详细展示一行中的修改">详细展示一行中的修改</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --word-diff
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="清除-gitignore-文件中记录的文件">清除 gitignore 文件中记录的文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean -X -f
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示所有-alias-和-configs">展示所有 alias 和 configs</h2>
<p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --local --list <span class="o">(</span>当前目录<span class="o">)</span>
</span></span><span class="line"><span class="cl">git config --global --list <span class="o">(</span>全局<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示忽略的文件">展示忽略的文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git status --ignored
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="commit-历史中显示-branch1-有的但是-branch2-没有-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log Branch1 ^Branch2
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="在-commit-log-中显示-gpg-签名">在 commit log 中显示 GPG 签名</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --show-signature
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除全局设置">删除全局设置</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global --unset &lt;entry-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="新建并切换到新分支上同时这个分支没有任何-commit">新建并切换到新分支上，同时这个分支没有任何 commit</h2>
<p>相当于保存修改，但是重写 commit 历史</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout --orphan &lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="展示任意分支某一文件的内容">展示任意分支某一文件的内容</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git show &lt;branch-name&gt;:&lt;file-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="clone-下来指定的单一分支">clone 下来指定的单一分支</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="clone-最新一次提交">clone 最新一次提交</h2>
<p>只会 clone 最近一次提交，将减少 clone 时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone --depth<span class="o">=</span><span class="m">1</span> https://github.com/user/repo.git
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="忽略某个文件的改动">忽略某个文件的改动</h2>
<p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-index --assume-unchanged path/to/file
</span></span></code></pre></td></tr></table>
</div>
</div><p>恢复 track 指定文件的改动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-index --no-assume-unchanged path/to/file
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="忽略文件的权限变化">忽略文件的权限变化</h2>
<p>不再将文件的权限变化视作改动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config core.fileMode <span class="nb">false</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="以最后提交的顺序列出所有-git-分支">以最后提交的顺序列出所有 Git 分支</h2>
<p>最新的放在最上面</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git <span class="k">for</span>-each-ref --sort<span class="o">=</span>-committerdate --format<span class="o">=</span><span class="s1">&#39;%(refname:short)&#39;</span> refs/heads/
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="在-commit-log-中查找相关内容">在 commit log 中查找相关内容</h2>
<p>通过 grep 查找，given-text：所需要查找的字段</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --all --grep<span class="o">=</span><span class="s1">&#39;&lt;given-text&gt;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="把暂存区的指定-file-放到工作区中">把暂存区的指定 file 放到工作区中</h2>
<p>不添加参数，默认是 <code>-mixed</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset &lt;file-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="强制推送">强制推送</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push -f &lt;remote-name&gt; &lt;branch-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="git-配置-http-和-socks-代理">git 配置 http 和 socks 代理</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global https.proxy <span class="s1">&#39;http://127.0.0.1:8001&#39;</span>   <span class="c1"># 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span>
</span></span><span class="line"><span class="cl">git config --global http.proxy <span class="s1">&#39;http://127.0.0.1:8001&#39;</span>
</span></span><span class="line"><span class="cl">git config --global socks.proxy <span class="s2">&#34;127.0.0.1:1080&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="git-配置-ssh-代理">git 配置 ssh 代理</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ cat ~/.ssh/config
</span></span><span class="line"><span class="cl">Host gitlab.com
</span></span><span class="line"><span class="cl">ProxyCommand nc -X <span class="m">5</span> -x 127.0.0.1:1080 %h %p    <span class="c1"># 直接使用 shadowsocks 提供的 socks5 代理端口</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Host github.com
</span></span><span class="line"><span class="cl">ProxyCommand nc -X <span class="m">5</span> -x 127.0.0.1:1080 %h %p
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="脑图">脑图</h2>
<p></p>
<h2 id="优雅的-commit-信息">优雅的 Commit 信息</h2>
<p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener noreffer">Angular 团队提交规范</a></p>
<p>主要有以下组成</p>
<ul>
<li>标题行: 必填, 描述主要修改类型和内容</li>
<li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li>
<li>页脚注释: 放 Breaking Changes 或 Closed Issues</li>
</ul>
<p>常用的修改项</p>
<ul>
<li>type: commit 的类型</li>
<li>feat: 新特性</li>
<li>fix: 修改问题</li>
<li>refactor: 代码重构</li>
<li>docs: 文档修改</li>
<li>style: 代码格式修改, 注意不是 css 修改</li>
<li>test: 测试用例修改</li>
<li>chore: 其他修改, 比如构建流程, 依赖管理.</li>
<li>scope: commit 影响的范围, 比如: route, component, utils, build&hellip;</li>
<li>subject: commit 的概述</li>
<li>body: commit 具体修改内容, 可以分为多行</li>
<li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li>
</ul>
<h2 id="commit-工具">commit 工具</h2>
<p>可以使用<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener noreffer">cz-cli</a>工具代替 <code>git commit</code></p>
<p>全局安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install -g commitizen cz-conventional-changelog
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;{ &#34;path&#34;: &#34;cz-conventional-changelog&#34; }&#39;</span> &gt; ~/.czrc
</span></span></code></pre></td></tr></table>
</div>
</div><p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p>
<p></p>
<p><strong><a href="#%e7%9b%ae%e5%bd%95" rel="">⬆ 返回顶部</a></strong></p>
]]></description>
</item><item>
    <title>gitlab CI/CD 的使用</title>
    <link>https://www.jobcher.com/gitlab-cicd/</link>
    <pubDate>Fri, 03 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://www.jobcher.com/gitlab-cicd/</guid>
    <description><![CDATA[<h1 id="gitlab-cicd-的使用">gitlab CI/CD 的使用</h1>
<p>我将使用 gitlab 的流水线自动实现 hugo blog 文章的自动发布。</p>
<h2 id="一基础知识">一、基础知识</h2>
<h2 id="二安装过程">二、安装过程</h2>
<h3 id="1安装-gitlab-runner">1.安装 gitlab runner</h3>
<p>首先需要安装 gitlab runner 进入服务器 A<br>
安装方法：</p>
<ol>
<li>
<p>容器部署</p>
</li>
<li>
<p>手动二进制文件部署</p>
</li>
<li>
<p>通过 rpm/deb 包部署</p>
</li>
<li>
<p>docker 方式安装</p>
</li>
</ol>
<p>安装文档：https://docs.gitlab.com/runne&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    docker run -dit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name gitlab-runner <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --restart always <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /srv/gitlab-runner/config:/etc/gitlab-runner <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gitlab/gitlab-runner
</span></span></code></pre></td></tr></table>
</div>
</div><p>1.1 设置信息</p>
<pre><code>docker exec -it gitlab-runner gitlab-runner register
</code></pre>
<ol start="2">
<li>非 docker 方式安装</li>
</ol>
<p>2.1 安装 GitLab Runner</p>
<p>安装环境：Linux</p>
<p>其他环境参考：https://docs.gitlab.com/runne&hellip;</p>
<p>下载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    chmod +x /usr/local/bin/gitlab-runner
</span></span></code></pre></td></tr></table>
</div>
</div><p>新建 gitlab-runner 用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    sudo useradd --comment <span class="s1">&#39;GitLab Runner&#39;</span> --create-home gitlab-runner --shell /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装</p>
<p>安装时需要指定我们上面新建的用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    gitlab-runner install --user<span class="o">=</span>gitlab-runner --working-directory<span class="o">=</span>/home/gitlab-runner
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    gitlab-runner start
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># Download the binary for your system</span>
</span></span><span class="line"><span class="cl">sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Give it permissions to execute</span>
</span></span><span class="line"><span class="cl">sudo chmod +x /usr/local/bin/gitlab-runner
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a GitLab CI user</span>
</span></span><span class="line"><span class="cl">sudo useradd --comment <span class="s1">&#39;GitLab Runner&#39;</span> --create-home gitlab-runner --shell /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install and run as service</span>
</span></span><span class="line"><span class="cl">sudo gitlab-runner install --user<span class="o">=</span>gitlab-runner --working-directory<span class="o">=</span>/home/gitlab-runner
</span></span><span class="line"><span class="cl">sudo gitlab-runner start
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2配置-docker-shell-链接">2.配置 docker shell 链接</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    ssh-keygen -t rsa
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> .ssh/
</span></span><span class="line"><span class="cl">    cat id_rsa.pub &gt;&gt;authorized_keys
</span></span><span class="line"><span class="cl">    docker cp id_rsa gitlab-runner:/root
</span></span><span class="line"><span class="cl">    docker <span class="nb">exec</span> -it gitlab-runner /bin/bash
</span></span><span class="line"><span class="cl">    chmod <span class="m">600</span> /root/id_rsa
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    vim /etc/systemd/system/gitlab-runner.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;--syslog&#34;</span> <span class="s2">&#34;--user&#34;</span> <span class="s2">&#34;root&#34;</span> <span class="c1">#修改为root</span>
</span></span><span class="line"><span class="cl">    wq保存退出
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    systemctl daemon-reload
</span></span><span class="line"><span class="cl">    systemctl restart gitlab-runner
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3配置gitlab-ciyml-文件">3.配置.gitlab-ci.yml 文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    vim .gitlab-ci.yml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    stages:
</span></span><span class="line"><span class="cl">    - build
</span></span><span class="line"><span class="cl">    - <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    - deploy
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    build-job:
</span></span><span class="line"><span class="cl">    stage: build
</span></span><span class="line"><span class="cl">    script:
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;上传代码&#34;</span>
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;上传完成.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    unit-test-job:
</span></span><span class="line"><span class="cl">    stage: <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    script:
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">        - sleep <span class="m">60</span>
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;Code coverage is 90%&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    lint-test-job:
</span></span><span class="line"><span class="cl">    stage: <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    script:
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;Linting code... This will take about 10 seconds.&#34;</span>
</span></span><span class="line"><span class="cl">        - sleep <span class="m">10</span>
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;No lint issues found.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    deploy-job:
</span></span><span class="line"><span class="cl">    stage: deploy
</span></span><span class="line"><span class="cl">    script:
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;Deploying application...&#34;</span>
</span></span><span class="line"><span class="cl">        - <span class="nb">echo</span> <span class="s2">&#34;Application successfully deployed.&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
